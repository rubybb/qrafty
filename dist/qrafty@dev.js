/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/aliases.js":
/*!************************!*\
  !*** ./src/aliases.js ***!
  \************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/core */ \"./src/core/core.js\");\n;\n\nfunction createDeprecatedAlias(oldObject, oldName, newObject, newName) {\n\tObject.defineProperty(oldObject, oldName, {\n\t\tenumerable: false,\n\t\tconfigurable: false,\n\t\tget: function() { \n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.warn(`${oldName} is deprecated.`);\n\t\t\treturn newObject[newName];\n\t\t},\n\t\tset: function(value) { newObject[newName] = value; }\n\t});\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n\tdefineAliases: function defineAliases(Qrafty) {\n\t\t//createDeprecatedAlias(Qrafty, \"bind\", Qrafty, \"on\");\n\t\t//createDeprecatedAlias(Qrafty, \"trigger\", Qrafty, \"emit\");\n\n\t\tcreateDeprecatedAlias(Qrafty, \"image_whitelist\", Qrafty, \"imageWhitelist\");\n\n\t\tcreateDeprecatedAlias(Qrafty, \"mouseDispatch\", Qrafty.s(\"Mouse\"), \"processEvent\");\n\t\tcreateDeprecatedAlias(Qrafty, \"mouseButtonsDown\", Qrafty.s(\"Mouse\"), \"_buttonDown\");\n\t\tcreateDeprecatedAlias(Qrafty, \"lastEvent\", Qrafty.s(\"Mouse\"), \"lastMouseEvent\");\n\t\tcreateDeprecatedAlias(Qrafty, \"mouseObjs\", Qrafty.s(\"Mouse\"), \"mouseObjs\");\n\n\t\tcreateDeprecatedAlias(Qrafty, \"keyboardDispatch\", Qrafty.s(\"Keyboard\"), \"processEvent\");\n\t\tcreateDeprecatedAlias(Qrafty, \"keydown\", Qrafty.s(\"Keyboard\"), \"_keyDown\");\n\t\tcreateDeprecatedAlias(Qrafty, \"resetKeyDown\", Qrafty.s(\"Keyboard\"), \"resetKeyDown\");\n\n\t\tcreateDeprecatedAlias(Qrafty, \"touchDispatch\", Qrafty, \"_touchDispatch\");\n\t\tcreateDeprecatedAlias(Qrafty, \"touchObjs\", Qrafty.s(\"Touch\"), \"touchObjs\");\n\t\tQrafty.touchHandler = {};\n\t\tcreateDeprecatedAlias(Qrafty.touchHandler, \"fingers\", Qrafty.s(\"Touch\"), \"touchPoints\");\n\t}\n});\n\n\n\n//# sourceURL=webpack://qrafty-v2/./src/aliases.js?");

/***/ }),

/***/ "./src/controls/controls-system.js":
/*!*****************************************!*\
  !*** ./src/controls/controls-system.js ***!
  \*****************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n;\n\n// ToggleInput contract\n// Must provide an isDown method which returns whether the input is down or not\n// May provide a destroy method which can be used for cleanup\n\n\n\n\n// MouseButtonToggleInput\nfunction MouseButtonToggleInput(button) {\n\tthis.button = button;\n}\n\nMouseButtonToggleInput.prototype = {\n\tisDown: function() {\n\t\tvar mouseSystem = this.mouseSystem;\n\t\tif (!mouseSystem) this.mouseSystem = mouseSystem = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\");\n\t\treturn mouseSystem.isButtonDown(this.button);\n\t}\n};\n\n// KeyboardToggleInput\nfunction KeyboardToggleInput(key) {\n\tthis.key = key;\n}\n\nKeyboardToggleInput.prototype = {\n\tisDown: function() {\n\t\tvar keyboardSystem = this.keyboardSystem;\n\t\tif (!keyboardSystem) this.keyboardSystem = keyboardSystem = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\");\n\t\treturn keyboardSystem.isKeyDown(this.key);\n\t}\n};\n\n\n// ToggleInputGroup\nfunction ToggleInputGroup(inputs) {\n\tthis.inputs = inputs;\n}\n\n// Handles a group of inputs that represent the same toggle state\nToggleInputGroup.prototype = {\n\ttimeDown: null,\n\tisActive: function () {\n\t\tfor (var i in this.inputs) {\n\t\t\tvar input = this.inputs[i];\n\t\t\tif (input.isDown()) {\n\t\t\t\tif (!this.timeDown) {\n\t\t\t\t\tthis.timeDown = Date.now();\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tdelete this.timeDown;\n\t\treturn false;\n\t},\n\tdestroy: function() {\n\t\tfor (var i in this.inputs) {\n\t\t\tif (typeof this.inputs[i].destroy === \"function\") {\n\t\t\t\tthis.inputs[i].destroy();\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Provides abstractions for specific types of inputs:\n// - DirectionalInput: {x, y}\n// - TriggerInputDown/TriggerInputUp\n\n/**@\n * #Controls\n * @category Controls\n * @kind System\n * \n * A built-in system for linking specific inputs to general types of input events.\n * \n * @note The methods provided by this system are likely to change in future verisons of Qrafty, as more input types are supported.\n * \n * @trigger TriggerInputDown - When a trigger group is activated - {name}\n * @trigger TriggerInputUp - When a trigger group is released - {name, downFor}\n * @trigger DirectionalInput - When a directional input changes - {name, x, y}\n *\n * @trigger ControlDefined - When a control input is defined - {type, name}\n * @trigger ControlDestroyed - When a control input is destroyed - {type, name}\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Controls\", {\n\tinit: function () {\n\t\t// internal object to store definitions\n\t\tthis._dpads = {};\n\t\tthis._triggers = {};\n\n\t\t// listen to mouse events\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").bind(\"MouseDown\", this.updateTriggers.bind(this));\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").bind(\"MouseUp\", this.updateTriggers.bind(this));\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").bind(\"DoubleClick\", this.updateTriggers.bind(this));\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").bind(\"Click\", this.updateTriggers.bind(this));\n\t},\n\n\tevents: {\n\t\t\"EnterFrame\": \"runEvents\",\n\t\t\"KeyDown\": \"updateTriggers\",\n\t\t\"KeyUp\": \"updateTriggers\"\n\t},\n\n\t// Runs through all triggers and updates their status\n\tupdateTriggers: function(e) {\n\t\tfor (var t in this._triggers) {\n\t\t\tvar trigger = this._triggers[t];\n\t\t\tthis.updateTriggerInput(trigger);\n\t\t}\n\t},\n\n\trunEvents: function () { \n\t\t// Trigger DirectionalInput events for dpads\n\t\tfor (var d in this._dpads) {\n\t\t\tvar dpad = this._dpads[d];\n\t\t\tdpad.oldX = dpad.x;\n\t\t\tdpad.oldY = dpad.y;\n\t\t\tthis.updateDpadInput(dpad, dpad.multipleDirectionBehavior);\n\t\t\tthis.updateActiveDirection(dpad, dpad.normalize);\n\t\t\tdpad.event.x = dpad.x;\n\t\t\tdpad.event.y = dpad.y;\n\t\t\tif (dpad.x !== dpad.oldX || dpad.y !== dpad.oldY) {\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"DirectionalInput\", dpad.event);\n\t\t\t}\n\t\t}\n\t},\n\n\tgetDpad: function (name) {\n\t\treturn this._dpads[name];\n\t},\n\n\tisTriggerDown: function(name) {\n\t\treturn this._triggers[name].active;\n\t},\n\n\t/**@\n     * #.defineTriggerGroup\n     * @comp Controls\n     * @kind Method\n     *\n     * @sign defineTriggerGroup(string name, obj definition)\n     * @param name - a name for the trigger group\n     * @param definition - an object which defines the inputs for the trigger\n     * \n     * A trigger group is a set of togglable inputs mapped to the same event.  \n     * If any of the inputs are down, the trigger is considered down.  If all are up, it is considered up.  \n     * When the trigger state changes, a `TriggerInputUp` or `TriggerInputDown` event is fired.\n     * \n     * The definition object lists the inputs that are mapped to the trigger:\n     * - `keys`: An array of Qrafty keycodes\n     * - `mouseButtons`: An array of Qrafty mouse button codes\n     * \n     * @example\n     * ~~~\n     * // Define a trigger group mapped to the left mouse button and the A and B keys.\n     * Qrafty.s(\"Controls\").defineTriggerGroup(\"MyTrigger\", {\n     *   mouseButtons: [Qrafty.mouseButtons.LEFT],\n     *   keys: [Qrafty.keys.A, Qrafty.keys.B]\n     * });\n     * ~~~\n     *\n     * @see .destroyTriggerGroup\n     * @see Qrafty.mouseButtons\n     * @see Qrafty.keys\n     * @see Controllable\n     */\n\tdefineTriggerGroup: function(name, definition) {\n\t\tvar inputs;\n\t\tif (Array.isArray(definition)) {\n\t\t\tinputs = definition;\n\t\t} else {\n\t\t\tinputs = [];\n\t\t\tif (definition.mouseButtons) {\n\t\t\t\tfor (var b in definition.mouseButtons){\n\t\t\t\t\tinputs.push(new MouseButtonToggleInput(definition.mouseButtons[b]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (definition.keys) {\n\t\t\t\tfor (var k in definition.keys) {\n\t\t\t\t\tinputs.push(new KeyboardToggleInput(definition.keys[k]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.destroyTriggerGroup(name);\n\t\tthis._triggers[name] = {\n\t\t\tname: name,\n\t\t\tinput: new ToggleInputGroup(inputs),\n\t\t\tdownFor: 0,\n\t\t\tactive: false\n\t\t};\n\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"ControlDefined\", { type: \"TriggerGroup\", name: name });\n\t},\n\n\t/**@\n     * #.destroyTriggerGroup\n     * @comp Controls\n     * @kind Method\n     *\n     * @sign destroyTriggerGroup(string name)\n     * @param name - the name of the trigger group\n     *\n     * Destroys a previously defined trigger group.\n     *\n     * @see .defineTriggerGroup\n     */\n\tdestroyTriggerGroup: function(name) {\n\t\tif (this._triggers[name]) {\n\t\t\tthis._triggers[name].input.destroy();\n\t\t\tdelete this._triggers[name];\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"ControlDestroyed\", { type: \"TriggerGroup\", name: name });\n\t\t}\n\t},\n\n\t/**@\n     * #.defineDpad\n     * @comp Controls\n     * @kind Method\n     * \n     * @sign defineDpad(string name, obj definition[, obj options])\n     * @param name - a name for the dpad input\n     * @param definition - an object which defines the inputs and directions for the dpad\n     * @param options - a set of options for the dpad\n     * \n     * A dpad is a type of directional control which maps a set of triggers to a set of directions.\n     * \n     * The options object has two properties:\n     * - `normalize` *(bool)*: If true, the directional input will be normalized to a unit vector.  Defaults to false.\n     * - `multipleDirectionBehavior` *(string)*: How to behave when multiple directions are active at the same time.  Values are \"first\", \"last\", and \"all\".  Defaults to \"all\".\n     * \n     * @example\n     * ~~~\n     * // Define a two-direction dpad, with two keys each bound to the right and left directions\n     * Qrafty.s(\"Controls\").defineDpad(\"MyDpad\", {RIGHT_ARROW: 0, LEFT_ARROW: 180, D: 0, A: 180});\n     * ~~~\n     *\n     * @see .destroyDpad\n     * @see Qrafty.keys\n     * @see Controllable\n     * @see Multiway\n     */\n\tdefineDpad: function (name, definition, options) {\n\t\tvar directionDict = {};\n\t\tfor (var k in definition) {\n\t\t\tvar direction = definition[k];\n\t\t\tvar keyCode = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.keys[k] || k;\n\n\t\t\t// create a mapping of directions to all associated keycodes\n\t\t\tif (!directionDict[direction]) {\n\t\t\t\tdirectionDict[direction] = [];\n\t\t\t}\n\t\t\tdirectionDict[direction].push(new KeyboardToggleInput(keyCode));\n\t\t}\n\n\t\t// Create a useful definition from the input format that tracks state\n\t\tvar parsedDefinition = {};\n\t\tfor (var d in directionDict) {\n\t\t\tparsedDefinition[d] = {\n\t\t\t\tinput: new ToggleInputGroup(directionDict[d]),\n\t\t\t\tactive: false,\n\t\t\t\tn: this.parseDirection(d)\n\t\t\t};\n\t\t}\n\t\tif (typeof options === \"undefined\") {\n\t\t\toptions = {};\n\t\t}\n\t\tif (typeof options.normalize === \"undefined\") {\n\t\t\toptions.normalize = false;\n\t\t}\n\t\tif (typeof options.multipleDirectionBehavior === \"undefined\") {\n\t\t\toptions.multipleDirectionBehavior = \"all\";\n\t\t}\n\t\t// Create the fully realized dpad object\n\t\t// Store the name/definition pair\n\t\tthis.destroyDpad(name);\n\t\tthis._dpads[name] = {\n\t\t\tname: name,\n\t\t\tdirections: parsedDefinition,\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\toldX: 0,\n\t\t\toldY: 0,\n\t\t\tevent: { x: 0, y: 0, name: name },\n\t\t\tnormalize: options.normalize,\n\t\t\tmultipleDirectionBehavior: options.multipleDirectionBehavior\n\t\t};\n\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"ControlDefined\", { type: \"Dpad\", name: name });\n\t},\n\n\t/**@\n     * #.destroyDpad\n     * @comp Controls\n     * @kind Method\n     *\n     * @sign destroyDpad(string name)\n     * @param name - the name of the dpad input\n     *\n     * Destroys a previously defined dpad.\n     *\n     * @see .defineDpad\n     */\n\tdestroyDpad: function (name) {\n\t\tif (this._dpads[name]) {\n\t\t\tfor (var d in this._dpads[name].parsedDefinition) {\n\t\t\t\tthis._dpads[name].parsedDefinition[d].input.destroy();\n\t\t\t}\n\t\t\tdelete this._dpads[name];\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"ControlDestroyed\", { type: \"Dpad\", name: name });\n\t\t}\n\t},\n\n\t// Takes an amount in degrees and converts it to an x/y object.\n\t// Clamps to avoid rounding issues with sin/cos\n\tparseDirection: function (direction) {\n\t\treturn {\n\t\t\tx: Math.round(Math.cos(direction * (Math.PI / 180)) * 1000) / 1000,\n\t\t\ty: Math.round(Math.sin(direction * (Math.PI / 180)) * 1000) / 1000\n\t\t};\n\t},\n\n\t// dpad definition is a map of directions to keys array and active flag\n\tupdateActiveDirection: function (dpad, normalize) {\n\t\tvar x = 0, y = 0;\n\n\t\t// Sum up all active directions\n\t\tfor (var d in dpad.directions) {\n\t\t\tvar dir = dpad.directions[d];\n\t\t\tif (!dir.active) continue;\n\t\t\tx += dir.n.x;\n\t\t\ty += dir.n.y;\n\t\t}\n\n\t\t// Mitigate rounding errors when close to zero movement\n\t\tx = (-1e-10 < x && x < 1e-10) ? 0 : x;\n\t\ty = (-1e-10 < y && y < 1e-10) ? 0 : y;\n\n\t\t// Normalize\n\t\tif (normalize) {\n\t\t\tvar m = Math.sqrt(x * x + y * y);\n\t\t\tif (m > 0) {\n\t\t\t\tx /= m;\n\t\t\t\ty /= m;\n\t\t\t}\n\t\t}\n\n\t\tdpad.x = x;\n\t\tdpad.y = y;\n\t},\n\n\tupdateTriggerInput: function (trigger) {\n\t\tif (!trigger.active) {\n\t\t\tif (trigger.input.isActive()) {\n\t\t\t\ttrigger.downFor = Date.now() - trigger.input.timeDown;\n\t\t\t\ttrigger.active = true;\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"TriggerInputDown\", trigger);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!trigger.input.isActive()) {\n\t\t\t\ttrigger.active = false;\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"TriggerInputUp\", trigger);\n\t\t\t\ttrigger.downFor = 0;\n\t\t\t}\n\t\t}\n\t},\n\n\t// Has to handle three cases concerning multiple active input groups:\n\t// - \"all\": all directions are active\n\t// - \"last\": one direction at a time, new directions replace old ones\n\t// - \"first\": one direction at a time, new directions are ignored while old ones are still active \n\tupdateDpadInput: function (dpad, multiBehavior) {\n\t\tvar d, dir;\n\t\tvar winner;\n\n\t\tfor (d in dpad.directions) {\n\t\t\tdir = dpad.directions[d];\n\t\t\tdir.active = false;\n\n\t\t\tif (dir.input.isActive()) {\n\t\t\t\tif (multiBehavior === \"all\") {\n\t\t\t\t\tdir.active = true;\n\t\t\t\t} else {\n\t\t\t\t\tif (!winner) {\n\t\t\t\t\t\twinner = dir;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (multiBehavior === \"first\") {\n\t\t\t\t\t\t\tif (winner.input.timeDown > dir.input.timeDown) {\n\t\t\t\t\t\t\t\twinner = dir;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (multiBehavior === \"last\") {\n\t\t\t\t\t\t\tif (winner.input.timeDown < dir.input.timeDown) {\n\t\t\t\t\t\t\t\twinner = dir;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If we picked a winner, set it active\n\t\tif (winner) winner.active = true;\n\t}\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/controls/controls-system.js?");

/***/ }),

/***/ "./src/controls/controls.js":
/*!**********************************!*\
  !*** ./src/controls/controls.js ***!
  \**********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #Draggable\n * @category Controls\n * @kind Component\n * Enable drag and drop of the entity. Listens to events from `MouseDrag` and moves entity accordingly.\n *\n * @see MouseDrag\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Draggable\", {\n\t_origX: null,\n\t_origY: null,\n\t_oldX: null,\n\t_oldY: null,\n\t_dir: null,\n\n\trequired: \"MouseDrag\",\n\tevents: {\n\t\t\"StartDrag\": \"_startDrag\",\n\t\t\"Dragging\": \"_drag\"\n\t},\n\n\t/**@\n     * #.enableDrag\n     * @comp Draggable \n     * @kind Method\n     * \n     * @sign public this .enableDrag(void)\n     *\n     * Reenable dragging of entity. Use if `.disableDrag` has been called.\n     *\n     * @see .disableDrag\n     */\n\tenableDrag: function () {\n\t\tthis.uniqueBind(\"Dragging\", this._drag);\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.disableDrag\n     * @comp Draggable\n     * @kind Method\n     * \n     * @sign public this .disableDrag(void)\n     *\n     * Disables entity dragging. Reenable with `.enableDrag()`.\n     *\n     * @see .enableDrag\n     */\n\tdisableDrag: function () {\n\t\tthis.unbind(\"Dragging\", this._drag);\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.dragDirection\n     * @comp Draggable\n     * @kind Method\n     * \n     * Method used for modifying the drag direction.\n     * If direction is set, the entity being dragged will only move along the specified direction.\n     * If direction is not set, the entity being dragged will move along any direction.\n     *\n     * @sign public this .dragDirection()\n     * Remove any previously specified direction.\n     *\n     * @sign public this .dragDirection(vector)\n     * @param vector - Of the form of {x: valx, y: valy}, the vector (valx, valy) denotes the move direction.\n     *\n     * @sign public this .dragDirection(degree)\n     * @param degree - A number, the degree (clockwise) of the move direction with respect to the x axis.\n     *\n     * Specify the dragging direction.\n     *\n     * @example\n     * ~~~\n     * this.dragDirection()\n     * this.dragDirection({x:1, y:0}) //Horizontal\n     * this.dragDirection({x:0, y:1}) //Vertical\n     * // Note: because of the orientation of x and y axis,\n     * // this is 45 degree clockwise with respect to the x axis.\n     * this.dragDirection({x:1, y:1}) //45 degree.\n     * this.dragDirection(60) //60 degree.\n     * ~~~\n     */\n\tdragDirection: function (dir) {\n\t\tif (typeof dir === \"undefined\") {\n\t\t\tthis._dir = null;\n\t\t} else if (+dir === dir) { //dir is a number\n\t\t\tthis._dir = {\n\t\t\t\tx: Math.cos(dir / 180 * Math.PI),\n\t\t\t\ty: Math.sin(dir / 180 * Math.PI)\n\t\t\t};\n\t\t} else {\n\t\t\tif (dir.x === 0 && dir.y === 0) {\n\t\t\t\tthis._dir = { x: 0, y: 0 };\n\t\t\t} else {\n\t\t\t\tvar r = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n\t\t\t\tthis._dir = {\n\t\t\t\t\tx: dir.x / r,\n\t\t\t\t\ty: dir.y / r\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\n\t_startDrag: function (e) {\n\t\tthis._origX = e.realX;\n\t\tthis._origY = e.realY;\n\t\tthis._oldX = this._x;\n\t\tthis._oldY = this._y;\n\t},\n\n\t//Note: the code is not tested with zoom, etc., that may distort the direction between the viewport and the coordinate on the canvas.\n\t_drag: function(e) {\n\t\tif (this._dir) {\n\t\t\tif (this._dir.x !== 0 || this._dir.y !== 0) {\n\t\t\t\tvar len = (e.realX - this._origX) * this._dir.x + (e.realY - this._origY) * this._dir.y;\n\t\t\t\tthis.x = this._oldX + len * this._dir.x;\n\t\t\t\tthis.y = this._oldY + len * this._dir.y;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.x = this._oldX + (e.realX - this._origX);\n\t\t\tthis.y = this._oldY + (e.realY - this._origY);\n\t\t}\n\t}\n});\n\n\n/**@\n * #Controllable\n * @category Controls\n * @kind Component\n *\n * Used to bind methods to generalized input events.\n *\n * Currently supports the events \"DirectionalInput\", \"TriggerInputDown\", and \"TriggerInputUp\".\n *\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Controllable\", {\n\tinit: function () {\n\t\tthis._inputBindings = {\n\t\t\t\"DirectionalInput\": {},\n\t\t\t\"TriggerInputDown\": {},\n\t\t\t\"TriggerInputUp\": {}\n\t\t};\n\t},\n    \n\tevents: {\n\t\t// We don't want to use dot notation here for the property names\n\t\t/* jshint -W069 */\n\t\t\"DirectionalInput\": function (e) {\n\t\t\tif (this._inputBindings[\"DirectionalInput\"][e.name]) {\n\t\t\t\tthis._inputBindings[\"DirectionalInput\"][e.name].call(this, e);\n\t\t\t}\n\t\t},\n\n\t\t\"TriggerInputDown\": function (e) {\n\t\t\tif (this._inputBindings[\"TriggerInputDown\"][e.name]) {\n\t\t\t\tthis._inputBindings[\"TriggerInputDown\"][e.name].call(this, e);\n\t\t\t}\n\t\t},\n\n\t\t\"TriggerInputUp\": function (e) {\n\t\t\tif (this._inputBindings[\"TriggerInputUp\"][e.name]) {\n\t\t\t\tthis._inputBindings[\"TriggerInputUp\"][e.name].call(this, e);\n\t\t\t}\n\t\t}\n\t\t/* jshint +W069 */\n\t},\n\n\t/**@\n     * #.linkInput\n     * @comp Controllable\n     * @kind Method\n     * \n     * @sign public this linkInput(string event, string name, function fn)\n     * @param event - the name of the input event\n     * @param name - the name of the input\n     * @param fn - the function that will be called with the event object\n     * \n     * Binds the function to the particular named event trigger.\n     * \n     * Currently supports three types of input events.  Each event will have a `name` property.\n     * - `DirectionalInput`: The event will have `x` and `y` properties representing the directional input vector, often normalized to a unit vector.  Triggered when the input changes.\n     * - `TriggerInputDown`: Occurs when the input is triggered.\n     * - `TriggerInputDown`: Occurs when the trigger is released.  The event will have a `downFor` property, indicating how long it had been active.\n     * \n     * @example\n     * ~~~~\n     * // Create a trigger bound to the `b` key\n     * Qrafty.s(\"Controls\").defineTriggerGroup(\"BlushTrigger\", {keys:['b']});\n     * // Create a blue square that turns pink when the trigger is pressed\n     * Qrafty.e(\"2D, Canvas, Color, Controllable\")\n     *   .attr({x:10, y:10, h:10, w:10}).color(\"blue\")\n     *   .linkInput(\"TriggerInputDown\", \"BlushTrigger\", function(){this.color('pink');});\n     * ~~~\n     * \n     * @see .unlinkInput  \n     */\n\tlinkInput: function(event, name, fn) {\n\t\tthis._inputBindings[event][name] = fn;\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.unlinkInput\n     * @comp Controllable\n     * @kind Method\n     * \n     * @sign public this linkInput(string event, string name)\n     * @param event - the name of the input event\n     * @param name - the name of the input\n     * \n     * Removes a binding setup by linkInput\n     * \n     * @see .linkInput\n     */\n\tunlinkInput: function(event, name) {\n\t\tdelete this._inputBindings[event][name];\n\t\treturn this;\n\t},\n\n\n\tdisableControls: false,\n\n\t/**@\n     * #.enableControl\n     * @comp Controllable\n     * @kind Method\n     * \n     * @sign public this .enableControl()\n     *\n     * Enable the component to listen to input events.\n     *\n     * @example\n     * ~~~\n     * this.enableControl();\n     * ~~~\n     */\n\tenableControl: function () {\n\t\tthis.disableControls = false;\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.disableControl\n     * @comp Controllable\n     * @kind Method\n     * \n     * @sign public this .disableControl()\n     *\n     * Disable the component from responding to input events.\n     *\n     * @example\n     * ~~~\n     * this.disableControl();\n     * ~~~\n     */\n\tdisableControl: function () {\n\t\tthis.disableControls = true;\n\t\treturn this;\n\t}\n});\n\n\n/**@\n * #Multiway\n * @category Controls\n * @kind Component\n *\n * Used to bind keys to directions and have the entity move accordingly.\n *\n * Multiway acts by listening to directional events, and then setting the velocity each frame based on the current direction and the current speed.\n * \n * If a speed is not defined for a particular axis (x or y), then the velocity along that axis will not be set.\n *   \n * This behavior works in most cases, but can cause undesired behavior if you manipulate velocities by yourself while this component is in effect.\n * If you need to resolve collisions, it's advised to correct the position directly rather than to manipulate the velocity.\n * If you still need to reset the velocity once a collision happens, make sure to re-add the previous velocity once the collision is resolved.\n *\n * Additionally, this component provides the entity with `Motion` methods & events.\n *\n * @see Motion\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Multiway\", {\n\t_speed: null,\n    \n\tinit: async function () {\n\t\tawait this.requires(\"Motion, Controllable\");\n\t\tthis._dpadName = \"MultiwayDpad\" + this[0];\n\t\tthis._speed = { x: 150, y: 150 };\n\t\tthis._direction = {x:0, y:0};\n\t},\n\n\tremove: function() {\n\t\tif (!this.disableControls) this.vx = this.vy = 0;\n\t\tthis.unlinkInput(\"DirectionalInput\", this._dpadName);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Controls\").destroyDpad(this._dpadName);\n\t},\n\n\tevents: {\n\t\t\"UpdateFrame\": function() {\n\t\t\tif (!this.disableControls) {\n\t\t\t\tif (typeof this._speed.x !== \"undefined\" && this._speed.x !== null){\n\t\t\t\t\tthis.vx = this._speed.x * this._direction.x;\n\t\t\t\t}\n\t\t\t\tif (typeof this._speed.y !== \"undefined\" && this._speed.y !== null) {\n\t\t\t\t\tthis.vy = this._speed.y * this._direction.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n   \n\t// Rather than update the velocity directly in response to changing input, track the input direction separately\n\t// That makes it easier to enable/disable control\n\t_updateDirection: function(e) {\n\t\tthis._direction.x = e.x;\n\t\tthis._direction.y = e.y;\n\t},\n\n\t/**@\n     * #.multiway\n     * @comp Multiway\n     * @kind Method\n     * \n     * @sign public this .multiway([Number speed,] Object keyBindings[, Object options])\n     * @param speed - A speed in pixels per second\n     * @param keyBindings - What keys should make the entity go in which direction. Direction is specified in degrees\n     * @param options - An object with options for `normalize` and `multipleDirectionBehavior`.\n     *\n     * Constructor to initialize the speed and keyBindings.\n     * Component will listen to key events and move the entity appropriately.\n     * Can be called while a key is pressed to change direction & speed on the fly.\n     *\n     * The options parameter controls the behavior of the component, and has the following defaults:\n     * \n     *  - `\"normalize\": false`.  When set to true, the directional input always has a magnitude of 1\n     *  - `\"multipleDirectionBehavior\": \"all\"` How to resolve multiple active directions.  \n     *     Set to \"first\" or \"last\" to allow only one active direction at a time.\n     *\n     *  @example\n     * ~~~\n     * this.multiway(150, {UP_ARROW: -90, DOWN_ARROW: 90, RIGHT_ARROW: 0, LEFT_ARROW: 180});\n     * this.multiway({x:150,y:75}, {UP_ARROW: -90, DOWN_ARROW: 90, RIGHT_ARROW: 0, LEFT_ARROW: 180});\n     * this.multiway({W: -90, S: 90, D: 0, A: 180});\n     * ~~~\n     *\n     * @see Qrafty.keys\n     */         \n\tmultiway: function (speed, keys, options) {\n\t\tvar inputSystem = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Controls\");\n\n\t\tif (keys) {\n\t\t\tthis.speed(speed);\n\t\t} else {\n\t\t\tkeys = speed;\n\t\t}\n\t\tinputSystem.defineDpad(this._dpadName, keys, options);\n\t\tthis.linkInput(\"DirectionalInput\", this._dpadName, this._updateDirection);\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.speed\n     * @comp Multiway\n     * @kind Method\n     * \n     * @sign public this .speed(Object speed)\n     * @param speed - New speed the entity has, for x and y axis.\n     *\n     * Change the speed that the entity moves with, in units of pixels per second.\n     * Can be called while a key is pressed to change speed on the fly.\n     * \n     * If the passed object has only an x or y property, only the velocity along that axis will be controlled.\n     *\n     * @example\n     * ~~~\n     * this.speed({ x: 150, y: 50 });\n     * ~~~\n     */\n\tspeed: function (speed) {\n\t\tif (typeof speed === \"object\") {\n\t\t\tthis._speed.x = speed.x;\n\t\t\tthis._speed.y = speed.y;\n\t\t} else {\n\t\t\tthis._speed.x = speed;\n\t\t\tthis._speed.y = speed;\n\t\t}\n\t\treturn this;\n\t},\n\n    \n});\n\n\n/**@\n * #Jumper\n * @category Controls\n * @kind Component\n * @trigger CheckJumping - When entity is about to jump. This event is triggered with the object the entity is about to jump from (if it exists). Third parties can respond to this event and enable the entity to jump.\n *\n * Make the entity jump in response to key events.\n * Simulates jumping and falling when used with the `Gravity` component.\n *\n * Additionally, this component provides the entity with `Supportable`, `Motion` and `Keyboard` methods & events.\n *\n * @see Supportable, Motion, Keyboard, Gravity\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Jumper\", {\n\t_jumpSpeed: 300,\n\n\t/**@\n     * #.canJump\n     * @comp Jumper\n     * @kind Method\n     *\n     * The canJump function determines if the entity is allowed to jump or not (e.g. perhaps the entity should be able to double jump).\n     * The Jumper component will trigger a \"CheckJumping\" event.\n     * Interested parties can listen to this event and enable the entity to jump by setting `canJump` to true.\n     *\n     * @example\n     * ~~~\n     * var player = Qrafty.e(\"2D, Jumper\");\n     * player.hasDoubleJumpPowerUp = true; // allow player to double jump by granting him a powerup\n     * player.bind(\"CheckJumping\", function(ground) {\n     *     if (!ground && player.hasDoubleJumpPowerUp) { // allow player to double jump by using up his double jump powerup\n     *         player.canJump = true;\n     *         player.hasDoubleJumpPowerUp = false;\n     *     }\n     * });\n     * player.bind(\"LandedOnGround\", function(ground) {\n     *     player.hasDoubleJumpPowerUp = true; // give player new double jump powerup upon landing\n     * });\n     * ~~~\n     */\n\tcanJump: true,\n\n\tinit: async function () {\n\t\tawait this.requires(\"Supportable, Motion, Controllable\");\n\t},\n\n\tremove: function() {\n\t\tthis.unlinkInput(\"TriggerInputDown\", this._jumpTriggerName);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Controls\").destroyTriggerGroup(this._jumpTriggerName);\n\t},\n\n\t_keydown_jumper: function (e) {\n\t\tif (this.disableControls) return;\n\t\tthis.jump();        \n\t},\n\n\t/**@\n     * #.jump\n     * @comp Jumper\n     * @kind Method\n     * \n     * @sign public this .jump()\n     *\n     * Directly trigger the entity to jump.\n     *\n     */\n\tjump: function() {\n\t\tvar ground = this.ground;\n\t\tthis.canJump = !!ground;\n\t\tthis.trigger(\"CheckJumping\", ground);\n\t\tif (this.canJump) {\n\t\t\tthis.vy = -this._jumpSpeed;\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.jumper\n     * @comp Jumper\n     * @kind Method\n     * \n     * @sign public this .jumper([Number jumpSpeed,] Array jumpKeys)\n     * @param jumpSpeed - Vertical jump speed in pixels per second\n     * @param jumpKeys - Keys to listen for and make entity jump in response\n     * \n     * @sign public this .jumper([Number jumpSpeed,] Object jumpInputs)\n     * @param jumpSpeed - Vertical jump speed in pixels per second\n     * @param jumpInputs - An object with two properties, `keys` and `mouseButtons`.\n     *\n     * Constructor to initialize the power of jump and keys to listen to.\n     * Component will listen for key events and make the entity jump appropriately.\n     * \n     * If second argument is an object, the properties `keys` and `mouseButtons` will be used as triggers.\n     *\n     * @example\n     * ~~~\n     * this.jumper(300, ['UP_ARROW', 'W']);\n     * this.jumper(['UP_ARROW', 'W']);\n     * ~~~\n     *\n     * @see Qrafty.keys\n     */\n\tjumper: function (jumpSpeed, jumpKeys) {\n\t\tif (jumpKeys) {\n\t\t\tthis._jumpSpeed = jumpSpeed;\n\t\t} else {\n\t\t\tjumpKeys = jumpSpeed;\n\t\t}\n\t\tthis._jumpTriggerName = \"JumpTrigger\" + this[0];\n\t\tif (Array.isArray(jumpKeys)) {\n\t\t\tvar keys = [];\n\t\t\tfor (var i = 0; i < jumpKeys.length; ++i) {\n\t\t\t\tvar key = jumpKeys[i];\n\t\t\t\tvar keyCode = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.keys[key] || key;\n\t\t\t\tkeys.push(keyCode);\n\t\t\t}\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Controls\")\n\t\t\t\t.defineTriggerGroup(this._jumpTriggerName, {keys:keys});\n\t\t} else {\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Controls\")\n\t\t\t\t.defineTriggerGroup(this._jumpTriggerName, jumpKeys);\n\t\t}\n        \n\t\tthis.linkInput(\"TriggerInputDown\", this._jumpTriggerName, this._keydown_jumper);\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.jumpSpeed\n     * @comp Jumper\n     * @kind Method\n     * \n     * @sign public this .jumpSpeed(Number jumpSpeed)\n     * @param jumpSpeed - new vertical jump speed\n     *\n     * Change the vertical jump speed.\n     *\n     * @example\n     * ~~~\n     * this.jumpSpeed(300);\n     * ~~~\n     */\n\tjumpSpeed: function (jumpSpeed) {\n\t\tthis._jumpSpeed = jumpSpeed;\n\t\treturn this;\n\t}\n});\n\n/**@\n * #Fourway\n * @category Controls\n * @kind Component\n *\n * Move an entity in four directions by using the\n * `Up Arrow`, `Left Arrow`, `Down Arrow`, `Right Arrow` keys or `W`, `A`, `S`, `D`.\n *\n * This component is a thin wrapper around the `Multiway` component and sets the appropriate key bindings.\n * It is a well suited for games with a top-down (birds-eye) perspective.\n *\n * @see Multiway\n * @see Motion\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Fourway\", {\n\n\tinit: async function () {\n\t\tawait this.requires(\"Multiway\");\n\t},\n\n\t/**@\n     * #.fourway\n     * @comp Fourway\n     * @kind Method\n     * \n     * @sign public this .fourway([Number speed[, Object options]])\n     * @param speed - The speed of motion in pixels per second.\n     * @param options - A dictionary of options passed through to the underlying Multiway component\n     *\n     * Initialize the component with the given speed and options.  See the Multiway component for available options.\n     * \n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, Color, Fourway\")\n     *    .attr({x: 100, y: 100, w: 50, h:50})\n     *    .color(\"green\")\n     *    .fourway(100, {normalize:true});\n     * ~~~\n     * Create a green square controlled by the arrow keys and WASD, with diagonal movement normalized to the given speed.\n     * \n     * The speed is in units of pixels per second.\n     */\n\tfourway: function (speed, options) {\n\t\tthis.multiway(speed || this._speed, {\n\t\t\tUP_ARROW: -90,\n\t\t\tDOWN_ARROW: 90,\n\t\t\tRIGHT_ARROW: 0,\n\t\t\tLEFT_ARROW: 180,\n\t\t\tW: -90,\n\t\t\tS: 90,\n\t\t\tD: 0,\n\t\t\tA: 180,\n\t\t\tZ: -90,\n\t\t\tQ: 180\n\t\t}, options);\n\n\t\treturn this;\n\t}\n});\n\n/**@\n * #Twoway\n * @category Controls\n * @kind Component\n *\n * Move an entity left or right using the `Left Arrow`, `Right Arrow` keys or `D` and `A`\n * and make it jump using `Up Arrow` or `W`.\n * Simulates jumping and falling when used with the `Gravity` component.\n *\n * This component is a thin wrapper around the `Multiway` and `Jumper` components and sets the appropriate key bindings.\n * It is a well suited for side-scrolling platformer type games.\n *\n * @see Multiway, Jumper\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Twoway\", {\n\n\tinit: async function () {\n\t\tthis.requires(\"Multiway, Jumper\");\n\t},\n\n\t/**@\n     * #.twoway\n     * @comp Twoway\n     * @kind Method\n     * \n     * @sign public this .twoway([Number speed[, Number jumpSpeed]])\n     * @param speed - A speed in pixels per second\n     * @param jumpSpeed - Vertical jump speed in pixels per second\n     *\n     * Constructor to initialize the speed and power of jump.\n     * Component will listen for key events and move the entity\n     * in the respective direction by the speed passed in the argument.\n     * Pressing the jump key will cause the entity to jump with the supplied power.\n     */\n\ttwoway: function (speed, jumpSpeed) {\n\t\t// Set multiway with horizontal speed only\n\t\tvar hSpeed = speed || this._speed;\n\t\tthis.multiway({x: hSpeed}, {\n\t\t\tRIGHT_ARROW: 0,\n\t\t\tLEFT_ARROW: 180,\n\t\t\tD: 0,\n\t\t\tA: 180,\n\t\t\tQ: 180\n\t\t});\n\n\t\tthis.jumper(jumpSpeed || speed * 2 || this._jumpSpeed, [\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.keys.UP_ARROW,\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.keys.W,\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.keys.Z\n\t\t]);\n\n\t\treturn this;\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/controls/controls.js?");

/***/ }),

/***/ "./src/controls/keyboard.js":
/*!**********************************!*\
  !*** ./src/controls/keyboard.js ***!
  \**********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #KeyboardState\n * @category Input\n * @kind Component\n *\n * Handles valid key related events and key states for the entity.\n * @note This is an internally used component, automatically included in the `KeyboardSystem`.\n *\n * @trigger KeyDown - when a key is pressed - KeyboardEvent\n * @trigger KeyUp - when a key is released - KeyboardEvent\n *\n * The standard Qrafty `KeyboardEvent` object:\n * ~~~\n * // event name of key event\n * e.eventName\n *\n * // Normalized keyCode number according to `Qrafty.keys`\n * e.key\n *\n * // Original keyboard event, containing additional native properties\n * e.originalEvent\n * ~~~\n *\n * In addition to binding to these events, the current state (pressed/released) of a key can also be queried using the `.isKeyDown` method.\n *\n * @see Keyboard, KeyboardSystem\n * @see Qrafty.keys\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.__keyboardStateTemplate = {\n\t_keyDown: null,\n\n\tinit: function() {\n\t\tthis._keyDown = {};\n\t\t// use custom trigger method if specified\n\t\tthis.triggerKeyEvent = this.triggerKeyEvent || this.trigger;\n\t},\n\n\t/**@\n     * #.isKeyDown\n     * @comp KeyboardState\n     * @kind Method\n     *\n     * @sign public Boolean isKeyDown(String keyName)\n     * @param keyName - Name of the key to check. See `Qrafty.keys`.\n     * @returns The pressed state of the key\n     *\n     * @sign public Boolean isKeyDown(Number keyCode)\n     * @param keyCode - Key code in `Qrafty.keys`.\n     * @returns The pressed state of the key\n     *\n     * Determine if a certain key is currently down.\n     *\n     * @example\n     * ~~~\n     * ent.bind('UpdateFrame', function() {\n     *   if (Qrafty.s('Keyboard').isKeyDown('SPACE'))\n     *     this.y--;\n     * });\n     * ~~~\n     *\n     * @see .resetKeyDown\n     * @see Qrafty.keys\n     */\n\tisKeyDown: function (key) {\n\t\tif (typeof key === \"string\") {\n\t\t\tkey = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.keys[key];\n\t\t}\n\t\treturn !!this._keyDown[key];\n\t},\n\n\t/**@\n     * #.resetKeyDown\n     * @comp KeyboardState\n     * @kind Method\n     *\n     * @sign public this .resetKeyDown()\n     *\n     * Reset all currently pressed keys. Triggers appropriate \"KeyUp\" events.\n     *\n     * This method is called internally, but may be useful when running Qrafty in headless mode.\n     *\n     * @see .isKeyDown\n     * @see Qrafty.keys\n     */\n\tresetKeyDown: function () {\n\t\tvar evt = { key: -1, eventName: \"KeyUp\" };\n\n\t\t// Tell all the keys they're no longer held down\n\t\tvar keyDown = this._keyDown;\n\t\tfor (var k in keyDown) {\n\t\t\tif (keyDown[k] === true) {\n\t\t\t\tevt.key = +k; // convert k propertyString to number!\n\t\t\t\tthis.triggerKey(\"KeyUp\", evt);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.triggerKey\n     * @comp KeyboardState\n     * @kind Method\n     *\n     * @sign public this triggerKey(String eventName, Object eventData)\n     * @param eventName - Name of the key event to trigger (\"KeyDown\" or \"KeyUp\")\n     * @param eventData - The key event to trigger\n     *\n     * Try to trigger a key event on this entity and persist the key state.\n     * This method prevents inconsistent key state.\n     * e.g. If this entity didn't receive a \"KeyDown\" previously, it won't fire a \"KeyUp\" event.\n     *\n     * This method is called internally, but may be useful when running Qrafty in headless mode.\n     *\n     * @example\n     * ~~~\n     * var wasTriggered = false;\n     *\n     * ent.requires('KeyboardState')\n     *    .bind('KeyUp', function(evt) {\n     *       wasTriggered = true;\n     *    })\n     *    .triggerKey('KeyUp', { key: Qrafty.keys.RIGHT_ARROW });\n     *\n     * Qrafty.log(wasTriggered); // prints false\n     * ~~~\n     *\n     * @see Qrafty.keys\n     */\n\ttriggerKey: function (eventName, eventData) {\n\t\t// trigger event only if valid state\n\t\tvar key = eventData.key;\n\t\tif (eventName === \"KeyDown\") {\n\t\t\t// ignore KeyDown due to inconsistent state caused by loosing focus\n\t\t\tif (this._keyDown[key] !== true) {\n\t\t\t\tthis._keyDown[key] = true;\n\t\t\t\tthis.triggerKeyEvent(eventName, eventData);\n\t\t\t}\n\t\t} else if (eventName === \"KeyUp\") {\n\t\t\t// ignore KeyUp due to inconsistent state caused by loosing focus\n\t\t\tif (this._keyDown[key] === true) {\n\t\t\t\tthis._keyDown[key] = false;\n\t\t\t\tthis.triggerKeyEvent(eventName, eventData);\n\t\t\t}\n\t\t} else {\n\t\t\t// trigger the event otherwise\n\t\t\tthis.triggerKeyEvent(eventName, eventData);\n\t\t}\n\n\t\treturn this;\n\t}\n};\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"KeyboardState\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__keyboardStateTemplate);\n\n// define a basic Keyboard system for headless mode\n// will be substituted with proper one in browser mode\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call({\n\t// this method will be called by KeyboardState iff triggerKey event was valid\n\ttriggerKeyEvent: function (eventName, e) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(eventName, e);\n\t}\n}, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__keyboardStateTemplate), {}, false);\n\n\n//# sourceURL=webpack://qrafty-v2/./src/controls/keyboard.js?");

/***/ }),

/***/ "./src/controls/keycodes.js":
/*!**********************************!*\
  !*** ./src/controls/keycodes.js ***!
  \**********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.keys\n     * @category Input\n     * @kind Property\n     * \n     * Object of key names and the corresponding Unicode key code.\n     *\n     * ~~~\n     * BACKSPACE: 8,\n     * TAB: 9,\n     * ENTER: 13,\n     * PAUSE: 19,\n     * CAPS: 20,\n     * ESC: 27,\n     * SPACE: 32,\n     * PAGE_UP: 33,\n     * PAGE_DOWN: 34,\n     * END: 35,\n     * HOME: 36,\n     * LEFT_ARROW: 37,\n     * UP_ARROW: 38,\n     * RIGHT_ARROW: 39,\n     * DOWN_ARROW: 40,\n     * INSERT: 45,\n     * DELETE: 46,\n     * 0: 48,\n     * 1: 49,\n     * 2: 50,\n     * 3: 51,\n     * 4: 52,\n     * 5: 53,\n     * 6: 54,\n     * 7: 55,\n     * 8: 56,\n     * 9: 57,\n     * A: 65,\n     * B: 66,\n     * C: 67,\n     * D: 68,\n     * E: 69,\n     * F: 70,\n     * G: 71,\n     * H: 72,\n     * I: 73,\n     * J: 74,\n     * K: 75,\n     * L: 76,\n     * M: 77,\n     * N: 78,\n     * O: 79,\n     * P: 80,\n     * Q: 81,\n     * R: 82,\n     * S: 83,\n     * T: 84,\n     * U: 85,\n     * V: 86,\n     * W: 87,\n     * X: 88,\n     * Y: 89,\n     * Z: 90,\n     * NUMPAD_0: 96,\n     * NUMPAD_1: 97,\n     * NUMPAD_2: 98,\n     * NUMPAD_3: 99,\n     * NUMPAD_4: 100,\n     * NUMPAD_5: 101,\n     * NUMPAD_6: 102,\n     * NUMPAD_7: 103,\n     * NUMPAD_8: 104,\n     * NUMPAD_9: 105,\n     * MULTIPLY: 106,\n     * ADD: 107,\n     * SUBSTRACT: 109,\n     * DECIMAL: 110,\n     * DIVIDE: 111,\n     * F1: 112,\n     * F2: 113,\n     * F3: 114,\n     * F4: 115,\n     * F5: 116,\n     * F6: 117,\n     * F7: 118,\n     * F8: 119,\n     * F9: 120,\n     * F10: 121,\n     * F11: 122,\n     * F12: 123,\n     * SHIFT: 16,\n     * CTRL: 17,\n     * ALT: 18,\n     * PLUS: 187,\n     * COMMA: 188,\n     * MINUS: 189,\n     * PERIOD: 190,\n     * PULT_UP: 29460,\n     * PULT_DOWN: 29461,\n     * PULT_LEFT: 4,\n     * PULT_RIGHT': 5\n     * ~~~\n     */\n\tkeys: {\n\t\t\"BACKSPACE\": 8,\n\t\t\"TAB\": 9,\n\t\t\"ENTER\": 13,\n\t\t\"PAUSE\": 19,\n\t\t\"CAPS\": 20,\n\t\t\"ESC\": 27,\n\t\t\"SPACE\": 32,\n\t\t\"PAGE_UP\": 33,\n\t\t\"PAGE_DOWN\": 34,\n\t\t\"END\": 35,\n\t\t\"HOME\": 36,\n\t\t\"LEFT_ARROW\": 37,\n\t\t\"UP_ARROW\": 38,\n\t\t\"RIGHT_ARROW\": 39,\n\t\t\"DOWN_ARROW\": 40,\n\t\t\"INSERT\": 45,\n\t\t\"DELETE\": 46,\n\t\t\"0\": 48,\n\t\t\"1\": 49,\n\t\t\"2\": 50,\n\t\t\"3\": 51,\n\t\t\"4\": 52,\n\t\t\"5\": 53,\n\t\t\"6\": 54,\n\t\t\"7\": 55,\n\t\t\"8\": 56,\n\t\t\"9\": 57,\n\t\t\"A\": 65,\n\t\t\"B\": 66,\n\t\t\"C\": 67,\n\t\t\"D\": 68,\n\t\t\"E\": 69,\n\t\t\"F\": 70,\n\t\t\"G\": 71,\n\t\t\"H\": 72,\n\t\t\"I\": 73,\n\t\t\"J\": 74,\n\t\t\"K\": 75,\n\t\t\"L\": 76,\n\t\t\"M\": 77,\n\t\t\"N\": 78,\n\t\t\"O\": 79,\n\t\t\"P\": 80,\n\t\t\"Q\": 81,\n\t\t\"R\": 82,\n\t\t\"S\": 83,\n\t\t\"T\": 84,\n\t\t\"U\": 85,\n\t\t\"V\": 86,\n\t\t\"W\": 87,\n\t\t\"X\": 88,\n\t\t\"Y\": 89,\n\t\t\"Z\": 90,\n\t\t\"NUMPAD_0\": 96,\n\t\t\"NUMPAD_1\": 97,\n\t\t\"NUMPAD_2\": 98,\n\t\t\"NUMPAD_3\": 99,\n\t\t\"NUMPAD_4\": 100,\n\t\t\"NUMPAD_5\": 101,\n\t\t\"NUMPAD_6\": 102,\n\t\t\"NUMPAD_7\": 103,\n\t\t\"NUMPAD_8\": 104,\n\t\t\"NUMPAD_9\": 105,\n\t\t\"MULTIPLY\": 106,\n\t\t\"ADD\": 107,\n\t\t\"SUBSTRACT\": 109,\n\t\t\"DECIMAL\": 110,\n\t\t\"DIVIDE\": 111,\n\t\t\"F1\": 112,\n\t\t\"F2\": 113,\n\t\t\"F3\": 114,\n\t\t\"F4\": 115,\n\t\t\"F5\": 116,\n\t\t\"F6\": 117,\n\t\t\"F7\": 118,\n\t\t\"F8\": 119,\n\t\t\"F9\": 120,\n\t\t\"F10\": 121,\n\t\t\"F11\": 122,\n\t\t\"F12\": 123,\n\t\t\"SHIFT\": 16,\n\t\t\"CTRL\": 17,\n\t\t\"ALT\": 18,\n\t\t\"PLUS\": 187,\n\t\t\"COMMA\": 188,\n\t\t\"MINUS\": 189,\n\t\t\"PERIOD\": 190,\n\t\t\"PULT_UP\": 29460,\n\t\t\"PULT_DOWN\": 29461,\n\t\t\"PULT_LEFT\": 4,\n\t\t\"PULT_RIGHT\": 5\n\n\t},\n\n\t/**@\n     * #Qrafty.mouseButtons\n     * @category Input\n     * @kind Property\n     * \n     * An object mapping mouseButton names to the corresponding button ID.\n     * In all mouseEvents, we add the `e.mouseButton` property with a value normalized to match e.button of modern webkit browsers:\n     *\n     * ~~~\n     * LEFT: 0,\n     * MIDDLE: 1,\n     * RIGHT: 2\n     * ~~~\n     */\n\tmouseButtons: {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2\n\t}\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/controls/keycodes.js?");

/***/ }),

/***/ "./src/controls/mouse.js":
/*!*******************************!*\
  !*** ./src/controls/mouse.js ***!
  \*******************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #MouseState\n * @category Input\n * @kind Component\n *\n * Handles valid mouse related events and button states for the entity.\n * @note This is an internally used component, automatically included in the `MouseSystem`.\n *\n * @trigger MouseDown - when a mouse button is pressed - MouseEvent\n * @trigger MouseMove - when the mouse moves - MouseEvent\n * @trigger MouseUp - when a mouse button is released - MouseEvent\n *\n * The standard Qrafty `MouseEvent` object:\n * ~~~\n * // event name of mouse event\n * e.eventName\n *\n * // Normalized mouse button according to Qrafty.mouseButtons:\n * // Qrafty.mouseButtons.LEFT, Qrafty.mouseButtons.RIGHT or Qrafty.mouseButtons.MIDDLE\n * e.mouseButton\n *\n * // the closest (visible & Mouse-enhanced) entity to the source of the event (if available), otherwise null\n * e.target\n *\n * // (x,y) coordinates of mouse event in world (default viewport) space\n * e.realX\n * e.realY\n *\n * // Original mouse event, containing additional native properties\n * e.originalEvent\n * ~~~\n *\n * In addition to binding to these events, the current state (pressed/released) of a mouse button can also be queried using the `.isButtonDown` method.\n *\n * @see Mouse, MouseSystem\n * @see Qrafty.mouseButtons\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.__mouseStateTemplate = {\n\t_buttonDown: null,\n\n\t/**@\n     * #.lastMouseEvent\n     * @comp MouseState\n     * @kind Property\n     *\n     * Check which read-only mouse event occured most recently (useful for determining mouse position in every frame).\n     *\n     * @see Mouse, MouseSystem, Qrafty.mouseButtons\n     */\n\tlastMouseEvent: null,\n\n\tinit: function() {\n\t\tthis._buttonDown = {};\n\t\t// use custom trigger method if specified\n\t\tthis.triggerMouseEvent = this.triggerMouseEvent || this.trigger;\n\t\tthis.lastMouseEvent = {\n\t\t\teventName: \"\",\n\t\t\tmouseButton: -1,\n\t\t\ttarget: null,\n\t\t\trealX: 0,\n\t\t\trealY: 0,\n\t\t\tclientX: 0, // DEPRECATED: remove in upcoming release\n\t\t\tclientY: 0, // DEPRECATED: remove in upcoming release\n\t\t\toriginalEvent: null\n\t\t};\n\t},\n\n\t/**@\n     * #.isButtonDown\n     * @comp MouseState\n     * @kind Method\n     *\n     * @sign public Boolean .isButtonDown(String mouseButtonName)\n     * @param mouseButtonName - Name of the button to check. See `Qrafty.mouseButtons`.\n     * @returns The pressed state of the button\n     *\n     * @sign public Boolean .isButtonDown(Number buttonId)\n     * @param buttonId - ButtonId in `Qrafty.mouseButtons`.\n     * @returns The pressed state of the button\n     *\n     * Determine if a certain mouse button is currently down.\n     *\n     * @example\n     * ~~~\n     * ent.bind('UpdateFrame', function() {\n     *   if (Qrafty.s('Mouse').isButtonDown('LEFT'))\n     *     this.y--;\n     * });\n     * ~~~\n     *\n     * @see .resetButtonDown\n     * @see Qrafty.mouseButtons\n     */\n\tisButtonDown: function (button) {\n\t\tif (typeof button === \"string\") {\n\t\t\tbutton = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.mouseButtons[button];\n\t\t}\n\t\treturn !!this._buttonDown[button];\n\t},\n\n\t/**@\n     * #.resetButtonDown\n     * @comp MouseState\n     * @kind Method\n     *\n     * @sign public this .resetButtonDown()\n     *\n     * Reset all currently pressed buttons. Triggers appropriate \"MouseUp\" events.\n     *\n     * This method is called internally, but may be useful when running Qrafty in headless mode.\n     *\n     * @see .isButtonDown\n     * @see Qrafty.mouseButtons\n     */\n\tresetButtonDown: function () {\n\t\tvar lastEvent = this.lastMouseEvent;\n\n\t\t// Tell all buttons they're no longer held down\n\t\tvar buttonsDown = this._buttonDown;\n\t\tfor (var button in buttonsDown) {\n\t\t\tif (buttonsDown[button] === true) {\n\t\t\t\tlastEvent.mouseButton = +button; // convert button propertyString to number!\n\t\t\t\tlastEvent.eventName = \"MouseUp\";\n\t\t\t\tthis.triggerMouse(\"MouseUp\", lastEvent);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.triggerMouse\n     * @comp MouseState\n     * @kind Method\n     *\n     * @sign public this triggerMouse(String eventName, Object eventData)\n     * @param eventName - Name of the mouse event to trigger (\"MouseDown\", \"MouseUp\", \"MouseMove\", ...)\n     * @param eventData - The mouse event to trigger\n     *\n     * Try to trigger a mouse event on this entity and persist the button state.\n     * This method prevents inconsistent button state.\n     * e.g. If this entity didn't receive a \"MouseDown\" previously, it won't fire a \"MouseUp\" event.\n     *\n     * This method is called internally, but may be useful when running Qrafty in headless mode.\n     *\n     * @example\n     * ~~~\n     * var wasTriggered = false;\n     *\n     * ent.requires('MouseState')\n     *    .bind('MouseUp', function(evt) {\n     *       wasTriggered = true;\n     *    })\n     *    .triggerMouse('MouseUp', { mouseButton: Qrafty.mouseButtons.LEFT });\n     *\n     * Qrafty.log(wasTriggered); // prints false\n     * ~~~\n     *\n     * @see Qrafty.mouseButtons\n     */\n\ttriggerMouse: function (eventName, eventData) {\n\t\t// copy newest event to lastEvent\n\t\tvar lastEvent = this.lastMouseEvent;\n\t\tlastEvent.eventName = eventName;\n\t\tlastEvent.mouseButton = eventData.mouseButton;\n\t\tlastEvent.target = eventData.target;\n\t\tlastEvent.realX = eventData.realX;\n\t\tlastEvent.realY = eventData.realY;\n\t\tlastEvent.clientX = eventData.clientX; // DEPRECATED: remove in upcoming release\n\t\tlastEvent.clientY = eventData.clientY; // DEPRECATED: remove in upcoming release\n\t\tlastEvent.originalEvent = eventData.originalEvent;\n\n\t\t// trigger event only if valid state\n\t\tvar mouseButton = eventData.mouseButton;\n\t\tif (eventName === \"MouseDown\") {\n\t\t\t// ignore MouseDown due to inconsistent state caused by loosing focus\n\t\t\tif (this._buttonDown[mouseButton] !== true) {\n\t\t\t\tthis._buttonDown[mouseButton] = true;\n\t\t\t\tthis.triggerMouseEvent(eventName, eventData);\n\t\t\t}\n\t\t} else if (eventName === \"MouseUp\") {\n\t\t\t// ignore MouseUp due to inconsistent state caused by loosing focus\n\t\t\tif (this._buttonDown[mouseButton] === true) {\n\t\t\t\tthis._buttonDown[mouseButton] = false;\n\t\t\t\tthis.triggerMouseEvent(eventName, eventData);\n\t\t\t}\n\t\t} else {\n\t\t\t// trigger the event otherwise\n\t\t\tthis.triggerMouseEvent(eventName, eventData);\n\t\t}\n\n\t\treturn this;\n\t}\n};\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"MouseState\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__mouseStateTemplate);\n\n// define a basic Mouse system for headless mode\n// will be substituted with proper one in browser mode\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call({\n\t// this method will be called by MouseState iff triggerMouse event was valid\n\ttriggerMouseEvent: function (eventName, e) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(eventName, e);\n\t}\n}, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__mouseStateTemplate), {}, false);\n\n\n//# sourceURL=webpack://qrafty-v2/./src/controls/mouse.js?");

/***/ }),

/***/ "./src/controls/touch.js":
/*!*******************************!*\
  !*** ./src/controls/touch.js ***!
  \*******************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n;\n\n/**@\n * #TouchState\n * @category Input\n * @kind Component\n *\n * Handles valid touch related events and touch points for the entity.\n * @note This is an internally used component, automatically included in the `TouchSystem`.\n *\n * @trigger TouchStart - when a finger is pressed - TouchPointEvent\n * @trigger TouchMove - when a pressed finger is moved - TouchPointEvent\n * @trigger TouchEnd - when a finger is raised - TouchPointEvent\n * @trigger TouchCancel - when a touch event has been disrupted in some way - TouchPointEvent\n *\n * The standard Qrafty `TouchPointEvent` object:\n * ~~~\n * // event name of touch event\n * e.eventName\n *\n * // identifier for this touch point, unique over the duration the finger is on the touch surface\n * e.identifier\n *\n * // the closest (visible & Touch-enhanced) entity to the source of the event (if available), otherwise null\n * e.target\n *\n * // (x,y) coordinates of the touch point in world (default viewport) space\n * e.realX\n * e.realY\n *\n * // Original touch event, containing additional native properties\n * e.originalEvent\n * ~~~\n *\n * In addition to binding to these events, the current touch points can also be queried using the `.touchPoints` property.\n *\n * @see Touch, TouchSystem\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.__touchStateTemplate = {\n\t/**@\n     * #.touchPoints\n     * @comp TouchState\n     * @kind Property\n     *\n     * Holds data of all currently pressed touch points (useful for determining positions of fingers in every frame).\n     * Data of a touch point is lost when the respective finger is raised.\n     *\n     * @example\n     * ~~~\n     * var touchPoint, touchPoints = Qrafty.s('Touch').touchPoints;\n     * for (var i = 0, l = touchPoints.length; i < l; i++) {\n     *   touchPoint = touchPoints[i];\n     *   Qrafty.log(touchPoint.realX, touchPoint.realY); // logs coordinates in Qrafty's world space\n     * }\n     * ~~~\n     *\n     * @see .resetTouchPoints\n     */\n\ttouchPoints: null,\n\n\t_touchPointsPool: null,\n\n\tinit: function() {\n\t\tthis.touchPoints = [];\n\t\tthis._touchPointsPool = [];\n\t\t// use custom trigger method if specified\n\t\tthis.triggerTouchEvent = this.triggerTouchEvent || this.trigger;\n\t},\n\n\t/**@\n     * #.resetTouchPoints\n     * @comp TouchState\n     * @kind Method\n     *\n     * @sign public this .resetTouchPoints()\n     *\n     * Reset all current touch points. Triggers appropriate \"TouchCancel\" events.\n     *\n     * This method is called internally, but may be useful when running Qrafty in headless mode.\n     *\n     * @see .touchPoints\n     */\n\tresetTouchPoints: function () {\n\t\t// Tell all touch points they're no longer held down\n\t\tvar touchPoints = this.touchPoints, touchPoint,\n\t\t\ti = touchPoints.length;\n\t\twhile (i--) { // iterate backwards to avoid conflicts with removal of array elements\n\t\t\ttouchPoint = touchPoints[i];\n\t\t\ttouchPoint.eventName = \"TouchCancel\";\n\t\t\tthis.triggerTouch(\"TouchCancel\", touchPoint);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.triggerTouch\n     * @comp TouchState\n     * @kind Method\n     *\n     * @sign public this triggerTouch(String eventName, Object eventData)\n     * @param eventName - Name of the touch event to trigger (\"TouchStart\", \"TouchMove\", \"TouchEnd\", \"TouchCancel\", ...)\n     * @param eventData - The touch event to trigger\n     *\n     * Try to trigger a touch event on this entity and persist the touch point.\n     * This method prevents inconsistent touch state.\n     * e.g. If this entity didn't receive a \"TouchStart\" of a identifier previously, it won't fire a \"TouchEnd\" event for that identifier.\n     *\n     * This method is called internally, but may be useful when running Qrafty in headless mode.\n     *\n     * @example\n     * ~~~\n     * var wasTriggered = false;\n     *\n     * ent.requires('TouchState')\n     *    .bind('TouchEnd', function(evt) {\n     *       wasTriggered = true;\n     *    })\n     *    .triggerTouch('TouchEnd', { identifier: 0 });\n     *\n     * Qrafty.log(wasTriggered); // prints false\n     * ~~~\n     */\n\ttriggerTouch: function (eventName, eventData) {\n\t\tswitch (eventName) {\n\t\tcase \"TouchStart\":\n\t\t\tthis._handleStart(eventData);\n\t\t\tbreak;\n\t\tcase \"TouchMove\":\n\t\t\tthis._handleMove(eventData);\n\t\t\tbreak;\n\t\tcase \"TouchCancel\":\n\t\tcase \"TouchEnd\":\n\t\t\tthis._handleEnd(eventData);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthis.triggerTouchEvent(eventName, eventData); // trigger the event otherwise\n\t\t}\n\t\treturn this;\n\t},\n\n\t_indexOfTouchPoint: function (identifier) {\n\t\tvar touchPoints = this.touchPoints;\n\t\tfor (var i = 0, l = touchPoints.length; i < l; i++) {\n\t\t\tif (touchPoints[i].identifier === identifier) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\t_setTouchPoint: function (touchPointDest, touchPointSrc) {\n\t\ttouchPointDest.eventName = touchPointSrc.eventName;\n\t\ttouchPointDest.identifier = touchPointSrc.identifier;\n\t\ttouchPointDest.target = touchPointSrc.target;\n\t\ttouchPointDest.entity = touchPointSrc.entity; // DEPRECATED: remove this in upcoming release\n\t\ttouchPointDest.realX = touchPointSrc.realX;\n\t\ttouchPointDest.realY = touchPointSrc.realY;\n\t\ttouchPointDest.originalEvent = touchPointSrc.originalEvent;\n\t},\n\n\t_handleStart: function (touchPoint) {\n\t\tvar oldIndex = this._indexOfTouchPoint(touchPoint.identifier),\n\t\t\toldTouchPoint = oldIndex >= 0 ? this.touchPoints[oldIndex] : null;\n\t\tif (!oldTouchPoint) { // ignore TouchStart due to inconsistent state caused by loosing focus\n\t\t\t// allocate touch point\n\t\t\tvar newTouchPoint = this._touchPointsPool.pop() || {};\n\t\t\tthis._setTouchPoint(newTouchPoint, touchPoint);\n\t\t\tthis.touchPoints.push(newTouchPoint);\n\n\t\t\tthis.triggerTouchEvent(newTouchPoint.eventName, newTouchPoint);\n\t\t}\n\t},\n\n\t_handleMove: function (touchPoint) {\n\t\tvar oldIndex = this._indexOfTouchPoint(touchPoint.identifier),\n\t\t\toldTouchPoint = oldIndex >= 0 ? this.touchPoints[oldIndex] : null;\n\t\tif (oldTouchPoint) { // ignore TouchMove due to inconsistent state caused by loosing focus\n\t\t\t// update touch point\n\t\t\tthis._setTouchPoint(oldTouchPoint, touchPoint);\n\n\t\t\tthis.triggerTouchEvent(oldTouchPoint.eventName, oldTouchPoint);\n\t\t}\n\t},\n\n\t_handleEnd: function (touchPoint) {\n\t\tvar oldIndex = this._indexOfTouchPoint(touchPoint.identifier),\n\t\t\toldTouchPoint = oldIndex >= 0 ? this.touchPoints[oldIndex] : null;\n\t\tif (oldTouchPoint) { // ignore TouchEnd due to inconsistent state caused by loosing focus\n\t\t\tthis._setTouchPoint(oldTouchPoint, touchPoint);\n\t\t\tthis.triggerTouchEvent(oldTouchPoint.eventName, oldTouchPoint);\n\n\t\t\t// free touch point\n\t\t\tthis.touchPoints.splice(oldIndex, 1);\n\t\t\toldTouchPoint.target = null; // release reference for possible GC\n\t\t\toldTouchPoint.entity = null; // DEPRECATED: remove this in upcoming release\n\t\t\toldTouchPoint.originalEvent = null; // release reference for possible GC\n\t\t\tthis._touchPointsPool.push(oldTouchPoint);\n\t\t}\n\t}\n};\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"TouchState\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__touchStateTemplate);\n\n// define a basic Touch system for headless mode\n// will be substituted with proper one in browser mode\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call({\n\t// this method will be called by TouchState iff triggerTouch event was valid\n\ttriggerTouchEvent: function (eventName, e) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(eventName, e);\n\t}\n}, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__touchStateTemplate), {}, false);\n\n\n//# sourceURL=webpack://qrafty-v2/./src/controls/touch.js?");

/***/ }),

/***/ "./src/core/animation.js":
/*!*******************************!*\
  !*** ./src/core/animation.js ***!
  \*******************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #Qrafty.easing\n * @category Animation\n * @kind Class\n * \n *\n * An object for tracking transitions.  Typically used indirectly through \"SpriteAnimation\", \"Tween\", or viewport animations.\n * \n * If a method allows you to specify the type of easing, you can do so by providing a custom function or a string corresponding to the name of a built-in method.\n *\n * Built-in easing functions are \"linear\", \"smoothStep\", \"smootherStep\", \"easeInQuad\", \"easeOutQuad\", and \"easeInOutQuad\".\n *\n * A custom function will be passed a parameter `t` which will vary between 0 and 1, and should return the progress of the animation between 0 and 1.\n * @example\n * Here is how you might use easing functions with the \"Tween\" component.\n * ~~~~\n * var e = Qrafty.e(\"2D, Tween\");\n * // Use built-in easing functions\n * e.tween({x:100}, 1000, \"smoothStep\");\n * e.tween({y:100}, 1000, \"easeInQuad\");\n * // Define a custom easing function: 2t^2 - t\n * e.tween({w:0}, 1000, function(t){return 2*t*t - t;});\n * ~~~\n * @see Tween, SpriteAnimation\n */\nvar easing = function(duration, easingFn) {\n\tthis.timePerFrame = 1000 / _core_core__WEBPACK_IMPORTED_MODULE_0__.default.timer.FPS();\n\tthis.duration = duration;   //default duration given in ms\n\tif (typeof easingFn === \"function\"){\n\t\tthis.easing_function = easingFn;\n\t} else if (typeof easingFn === \"string\" && this.standardEasingFunctions[easingFn]){\n\t\tthis.easing_function = this.standardEasingFunctions[easingFn];\n\t} else {\n\t\tthis.easing_function = this.standardEasingFunctions.linear;\n\t}\n\tthis.reset();\n};\n\n\neasing.prototype = {\n\tduration: 0,\n\tclock:0,\n\tsteps: null,\n\tcomplete: false,\n\tpaused: false,\n\n\t// init values\n\treset: function(){\n\t\tthis.loops = 1;\n\t\tthis.clock = 0;\n\t\tthis.complete = false;\n\t\tthis.paused = false;\n\t},\n\n\trepeat: function(loopCount){\n\t\tthis.loops = loopCount;\n\t},\n\n\tsetProgress: function(progress, loopCount){\n\t\tthis.clock = this.duration * progress;\n\t\tif (typeof loopCount !== \"undefined\")\n\t\t\tthis.loops = loopCount;\n\n\t},\n\n\tpause: function(){\n\t\tthis.paused = true;\n\t},\n\n\tresume: function(){\n\t\tthis.paused = false;\n\t\tthis.complete = false;\n\t},\n\n\t// Increment the clock by some amount dt\n\t// Handles looping and sets a flag on completion\n\ttick: function(dt){\n\t\tif (this.paused || this.complete) return;\n\t\tthis.clock += dt;\n\t\tthis.frames = Math.floor(this.clock/this.timePerFrame);\n\t\twhile (this.clock >= this.duration && this.complete === false){\n\t\t\tthis.loops--;\n\t\t\tif (this.loops > 0)\n\t\t\t\tthis.clock -= this.duration;\n\t\t\telse\n\t\t\t\tthis.complete = true;\n\t\t}\n\t},\n\n\t// same as value for now; with other time value functions would be more useful\n\ttime: function(){\n\t\treturn ( Math.min(this.clock/this.duration, 1) );\n\n\t},\n\n\t// Value is where along the tweening curve we are\n\tvalue: function(){\n\t\treturn this.easing_function(this.time());\n\t},\n\n\t// Easing functions, formulas taken from https://gist.github.com/gre/1650294\n\t//\tand https://en.wikipedia.org/wiki/Smoothstep\n\tstandardEasingFunctions: {\n\t\t// no easing, no acceleration\n\t\tlinear: function (t) { return t; },\n\t\t// smooth step; starts and ends with v=0\n\t\tsmoothStep: function(t){ return (3-2*t)*t*t; },\n\t\t// smootherstep; starts and ends with v, a=0\n\t\tsmootherStep: function(t){ return (6*t*t-15*t+10)*t*t*t; },\n\t\t// quadratic curve; starts with v=0\n\t\teaseInQuad: function (t) { return t*t; },\n\t\t// quadratic curve; ends with v=0\n\t\teaseOutQuad: function (t) { return t*(2-t); },\n\t\t// quadratic curve; starts and ends with v=0\n\t\teaseInOutQuad: function (t) { return t<0.5 ? 2*t*t : (4-2*t)*t-1; }\n\t}\n};\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.easing = easing;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (easing);\n\n//# sourceURL=webpack://qrafty-v2/./src/core/animation.js?");

/***/ }),

/***/ "./src/core/components.js":
/*!********************************!*\
  !*** ./src/core/components.js ***!
  \********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core */ \"./src/core/core.js\");\n;\n\n_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call(_core__WEBPACK_IMPORTED_MODULE_0__.default.defaultOptions.settings, {\n\tfindComponents: false\n});\n\n_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t_components: new Map(),\n    \n\tc: async function () { return this.defineComponent.apply(this, arguments); },\n    \n\tcomponent: async function () {\n\t\tif (arguments.length === 1) return this.findComponent.apply(this, arguments); \n\t\treturn this.defineComponent.apply(this, arguments);\n\t},\n\n\tdefineComponent: async function (name, component) {\n\t\tif (!component) return this._components.get(name);\n        \n\t\tthis.debug(`defineComponent: \"${name}\"`, component);\n\t\tthis._components.set(name, component);\n\t},\n    \n\tcomponents: function () {\n\t\treturn this._components;\n\t},\n\n\tisComp: async function () { return this.isComponent.apply(this, arguments); },\n\tisComponent: function (name) {\n\t\treturn this._components.has(name);\n\t},\n    \n\tfindComponent: async function (name, lookup = true) {\n\t\tif (lookup && !this._components.has(name)) {\n\t\t\tconst findDynamicObject = this.functions.get(\"findDynamicObject\");\n\t\t\tif (this.settings.get(\"findComponent\") && findDynamicObject) {\n\t\t\t\tlet component = await findDynamicObject({name, type: \"component\"}).catch((e) => {\n\t\t\t\t\tthis.debug(\"findComponent: findDynamicObject threw error:\", e);\n\t\t\t\t\tthrow new Error(`the component \"${name}\" does not exist`);\n\t\t\t\t});\n                \n\t\t\t\tthis.debug(`findComponent: \"${name}\" (dynamically imported)`);\n\n\t\t\t\tcomponent.__dynamic = true;\n\t\t\t\tawait this.defineComponent(name, component);\n\t\t\t}\n\n\t\t\tif (!this._components.has(name)) throw new Error(`the component \"${name}\" does not exist`);\n\t\t}\n\n\t\treturn this._components.get(name);\n\t}\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/core/components.js?");

/***/ }),

/***/ "./src/core/core.js":
/*!**************************!*\
  !*** ./src/core/core.js ***!
  \**************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _resolver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resolver */ \"./src/core/resolver/index.js\");\n/* harmony import */ var _entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entity */ \"./src/core/entity.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./version */ \"./src/core/version.js\");\n\n;\n\n\n\n\nvar Qrafty = function (selector) {\n\treturn new Qrafty.fn.init(selector);\n};\n\nQrafty._entities = {};\nQrafty._compEntities = {};\n\n// Internal variables\nvar GUID, frame, handlers, onloads;\n\nvar initState = function () {\n\tGUID        = 1; // GUID for entity IDs\n\tframe       = 0;\n\n\t//entities    = {}; // Map of entities and their data\n\t//compEntities= {}; // Map from componentName to (entityId -> entity)\n\thandlers    = {}; // Global event handlers\n\tonloads     = []; // Temporary storage of onload handlers\n};\n\ninitState();\n\n\nQrafty.fn = Qrafty.prototype = _entity__WEBPACK_IMPORTED_MODULE_1__.default;\nQrafty.fn.init.prototype = Qrafty.fn;\n\nQrafty.extend = Qrafty.fn.extend = function (obj) {\n\tlet target = this, key;\n\tif (!obj) return target;\n\n\tfor (key in obj) {\n\t\tif (target === obj[key]) continue; //handle circular reference\n\t\ttarget[key] = obj[key];\n\t}\n\n\treturn target;\n};\n\nQrafty._callbackMethods = {\n\t// Add a function to the list of callbacks for an event\n\t_bindCallback: function(event, fn) {\n\t\t// Get handle to event, creating it if necessary\n\t\tvar callbacks = this._callbacks[event];\n\t\tif (!callbacks) {\n\t\t\tcallbacks = this._callbacks[event] = ( handlers[event] || ( handlers[event] = {} ) )[this[0]] = [];\n\t\t\tcallbacks.context = this;\n\t\t\tcallbacks.depth = 0;\n\t\t}\n\t\t// Push to callback array\n\t\tcallbacks.push(fn);\n\t},\n\n\t// Process for running all callbacks for the given event\n\t_runCallbacks: function(event, data) {\n\t\tif (!this._callbacks[event] || this.__callbacksFrozen) {\n\t\t\treturn;\n\t\t}\n\t\tvar callbacks = this._callbacks[event];\n\n\t\t// Callback loop; deletes dead callbacks, but only when it is safe to do so\n\t\tvar i, l = callbacks.length;\n\t\t// callbacks.depth tracks whether this function was invoked in the middle of a previous iteration through the same callback array\n\t\tcallbacks.depth++;\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tif (typeof callbacks[i] === \"undefined\") {\n\t\t\t\tif (callbacks.depth <= 1) {\n\t\t\t\t\tcallbacks.splice(i, 1);\n\t\t\t\t\ti--;\n\t\t\t\t\tl--;\n\t\t\t\t\t// Delete callbacks object if there are no remaining bound events\n\t\t\t\t\tif (callbacks.length === 0) {\n\t\t\t\t\t\tdelete this._callbacks[event];\n\t\t\t\t\t\tdelete handlers[event][this[0]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcallbacks[i].call(this, data);\n\t\t\t}\n\t\t}\n\t\tcallbacks.depth--;\n\t},\n\n\t// Unbind callbacks for the given event\n\t// If fn is specified, only it will be removed; otherwise all callbacks will be\n\t_unbindCallbacks: function(event, fn) {\n\t\tif (!this._callbacks[event]) {\n\t\t\treturn;\n\t\t}\n\t\tvar callbacks = this._callbacks[event];\n\t\t// Iterate through and delete the callback functions that match\n\t\t// They are spliced out when _runCallbacks is invoked, not here\n\t\t// (This function might be called in the middle of a callback, which complicates the logic)\n\t\tfor (var i = 0; i < callbacks.length; i++) {\n\t\t\tif (!fn || callbacks[i] === fn) {\n\t\t\t\tdelete callbacks[i];\n\t\t\t}\n\t\t}\n\t},\n\n\t// Completely all callbacks for every event, such as on object destruction\n\t_unbindAll: function() {\n\t\tif (!this._callbacks) return;\n\t\tthis.__callbacksFrozen = false;\n\t\tfor (var event in this._callbacks) {\n\t\t\tif (this._callbacks[event]) {\n\t\t\t\t// Remove the normal way, in case we've got a nested loop\n\t\t\t\tthis._unbindCallbacks(event);\n\t\t\t\t// Also completely delete the registered callback from handlers\n\t\t\t\tdelete handlers[event][this[0]];\n\t\t\t}\n\t\t}\n\t},\n\n\t_freezeCallbacks: function() {\n\t\tif (!this._callbacks) return;\n\t\tfor (var event in this._callbacks) {\n\t\t\tif (this._callbacks[event]) {\n\t\t\t\t// Remove the callbacks from the global list of handlers\n\t\t\t\tdelete handlers[event][this[0]];\n\t\t\t}\n\t\t}\n\t\t// Mark this callback list as frozen\n\t\tthis.__callbacksFrozen = true;\n\t},\n\n\t_unfreezeCallbacks: function() {\n\t\tif (!this._callbacks) return;\n\t\tthis.__callbacksFrozen = false;\n\t\tfor (var event in this._callbacks) {\n\t\t\tif (this._callbacks[event]) {\n\t\t\t\t// Add the callbacks back to the global list of handlers\n\t\t\t\thandlers[event][this[0]] = this._callbacks[event];\n\t\t\t}\n\t\t}\n        \n\t}\n};\n\nQrafty._addCallbackMethods = function(context) {\n\tcontext.extend(Qrafty._callbackMethods);\n\tcontext._callbacks = {};\n};\n\nQrafty._addCallbackMethods(Qrafty);\n\nQrafty.extend({\n\t0: \"global\",\n\n\toptions: {},\n\tdefaultOptions: {\n\t\telement: document.querySelector(\"#qrafty\"),\n\t\twidth: 500, height: 500,\n\t\tsettings: {}, functions: {}\n\t},\n\t\n\tinit: function (options = {}) {\n\t\t// support for previous version of arguments.\n\t\t// -> Qrafty.init(width, height, element);\n\t\tif (typeof arguments[0] === \"number\" && typeof arguments[1] === \"number\") {\n\t\t\tthis.options.element = arguments[2];\n\t\t\tthis.options.height = arguments[1];\n\t\t\tthis.options.width = arguments[0];\n\t\t}\n\n\t\toptions = this._handleOptions(options);\n\t\tthis.debug(\"init\", options);\n        \n\t\t// If necessary, attach any event handlers registered before Qrafty started\n\t\tif (!this._preBindDone) {\n\t\t\tfor(var i = 0; i < this._bindOnInit.length; i++) {\n\n\t\t\t\tvar preBind = this._bindOnInit[i];\n\t\t\t\tQrafty.bind(preBind.event, preBind.handler);\n\t\t\t}\n\t\t}\n\n\t\tQrafty.viewport.init(options.width, options.height, options.element);\n\n\t\tthis.trigger(\"Load\");\n\t\tthis.timer.init();\n\n\t\treturn this;\n\t},\n\n\t_handleOptions: function (options) {\n\t\toptions = Object.assign({}, this.defaultOptions, options);\n\t\toptions.settings = Object.assign({}, this.defaultOptions.settings, options.settings);\n\t\toptions.functions = Object.assign({}, this.defaultOptions.functions, options.functions);\n\n\t\tfor (const key in options.settings) {\n\t\t\tthis.settings.set(key, options.settings[key]);\n\t\t}\n\n\t\tfor (const key in options.functions) {\n\t\t\tthis.functions.set(key, options.functions[key]);\n\t\t}\n\n\t\tthis.options = Object.freeze(options);\n\t\treturn this.options;\n\t},\n\n\t// There are some events that need to be bound to Qrafty when it's started/restarted, so store them here\n\t// Switching Qrafty's internals to use the new system idiom should allow removing this hack\n\t_bindOnInit: [],\n\t_preBindDone: false,\n\t_preBind: function(event, handler) {\n\t\tthis._bindOnInit.push({\n\t\t\tevent: event,\n\t\t\thandler: handler\n\t\t});\n\t},\n\n\t/**@\n     * #Qrafty.getVersion\n     * @category Core\t\n     * @kind Method\n     * \n     * @sign public String Qrafty.getVersion()\n     * @returns Current version of Qrafty as a string\n     *\n     * Return current version of crafty\n     *\n     * @example\n     * ~~~\n     * Qrafty.getVersion(); //'0.5.2'\n     * ~~~\n     */\n\tgetVersion: function () {\n\t\treturn _version__WEBPACK_IMPORTED_MODULE_2__.default;\n\t},\n\n\t/**@\n     * #Qrafty.stop\n     * @category Core\n     * @kind Method\n     * \n     * @trigger QraftyStop - when the game is stopped  - {bool clearState}\n     * @sign public this Qrafty.stop([bool clearState])\n     * @param clearState - if true the stage and all game state is cleared.\n     *\n     * Stops the `UpdateFrame` interval and removes the stage element.\n     *\n     * To restart, use `Qrafty.init()`.\n     * @see Qrafty.init\n     */ \n\tstop: function (clearState) {\n\t\tQrafty.trigger(\"QraftyStop\", clearState);\n\n\t\tthis.timer.stop();\n\t\tif (clearState) {\n\t\t\t// Remove audio\n\t\t\tQrafty.audio.remove();\n\n\t\t\t//Destroy all systems\n\t\t\tfor (var s in Qrafty._systems) {\n\t\t\t\tQrafty._systems[s].destroy();\n\t\t\t}\n\n\t\t\t// Remove the stage element, and re-add a div with the same id\n\t\t\tif (Qrafty.stage && Qrafty.stage.elem.parentNode) {\n\t\t\t\tvar newCrStage = document.createElement(\"div\");\n\t\t\t\tnewCrStage.id = Qrafty.stage.elem.id;\n\t\t\t\tQrafty.stage.elem.parentNode.replaceChild(newCrStage, Qrafty.stage.elem);\n\t\t\t}\n\n\t\t\t// reset callbacks, and indicate that prebound functions need to be bound on init again\n\t\t\tQrafty._unbindAll();\n\t\t\tQrafty._addCallbackMethods(Qrafty);\n\t\t\tthis._preBindDone = false;\n\n\t\t\tinitState();\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**@\n     * #Qrafty.pause\n     * @category Core\n     * @kind Method\n     * \n     * @trigger Pause - when the game is paused\n     * @trigger Unpause - when the game is unpaused\n     * @sign public this Qrafty.pause(void)\n     *\n     * Pauses the game by stopping the `UpdateFrame` event from firing. If the game is already paused it is unpaused.\n     * You can pass a boolean parameter if you want to pause or unpause no matter what the current state is.\n     * Modern browsers pauses the game when the page is not visible to the user. If you want the Pause event\n     * to be triggered when that happens you can enable autoPause in `Qrafty.settings`.\n     *\n     * @example\n     * Have an entity pause the game when it is clicked.\n     * ~~~\n     * button.bind(\"click\", function() {\n     *     Qrafty.pause();\n     * });\n     * ~~~\n     */\n\tpause: function (toggle) {\n\t\tif (arguments.length === 1 ? toggle : !this._paused) {\n\t\t\tthis.trigger(\"Pause\");\n\t\t\tthis._paused = true;\n\t\t\tsetTimeout(function () {\n\t\t\t\tQrafty.timer.stop();\n\t\t\t}, 0);\n\t\t} else {\n\t\t\tthis.trigger(\"Unpause\");\n\t\t\tthis._paused = false;\n\t\t\tsetTimeout(function () {\n\t\t\t\tQrafty.timer.init();\n\t\t\t}, 0);\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**@\n     * #Qrafty.isPaused\n     * @category Core\n     * @kind Method\n     * \n     * @sign public Boolean Qrafty.isPaused()\n     * @returns Whether the game is currently paused.\n     *\n     * @example\n     * ~~~\n     * Qrafty.isPaused();\n     * ~~~\n     */\n\tisPaused: function () {\n\t\treturn this._paused;\n\t},\n\n\t/**@\n     * #Qrafty.timer\n     * @category Game Loop\n     * @kind CoreObject\n     * \n     * Handles game ticks\n     */\n\ttimer: (function () {\n\t\t/*\n         * `window.requestAnimationFrame` or its variants is called for animation.\n         * `.requestID` keeps a record of the return value previous `window.requestAnimationFrame` call.\n         * This is an internal variable. Used to stop frame.\n         */\n\t\tvar tick, requestID;\n\n\t\t// Internal variables used to control the game loop.  Use Qrafty.timer.steptype() to set these.\n\t\tvar mode = \"fixed\",\n\t\t\tmaxFramesPerStep = 5,\n\t\t\tmaxTimestep = 40;\n\n\t\t// variables used by the game loop to track state\n\t\tvar endTime = 0,\n\t\t\ttimeSlip = 0,\n\t\t\tgameTime;\n\n\t\t// Controls the target rate of fixed mode loop.  Set these with the Qrafty.timer.FPS function\n\t\tvar FPS = 50,\n\t\t\tmilliSecPerFrame = 1000 / FPS;\n\n\n\n\n\t\treturn {\n\t\t\tinit: function () {\n\t\t\t\t// When first called, set the  gametime one frame before now!\n\t\t\t\tif (typeof gameTime === \"undefined\")\n\t\t\t\t\tgameTime = Date.now() - milliSecPerFrame;\n\n\t\t\t\tvar onFrame = (typeof window !== \"undefined\") && (\n\t\t\t\t\twindow.requestAnimationFrame ||\n                    window.webkitRequestAnimationFrame ||\n                    window.mozRequestAnimationFrame ||\n                    window.oRequestAnimationFrame ||\n                    window.msRequestAnimationFrame ||\n                    null\n\t\t\t\t);\n\n\t\t\t\tif (onFrame) {\n\t\t\t\t\ttick = function () {\n\t\t\t\t\t\tQrafty.timer.step();\n\t\t\t\t\t\tif (tick !== null) {\n\t\t\t\t\t\t\trequestID = onFrame(tick);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Qrafty.log(requestID + ', ' + frame)\n\t\t\t\t\t};\n\n\t\t\t\t\ttick();\n\t\t\t\t} else {\n\t\t\t\t\ttick = setInterval(function () {\n\t\t\t\t\t\tQrafty.timer.step();\n\t\t\t\t\t}, 1000 / FPS);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tstop: function () {\n\t\t\t\tQrafty.trigger(\"QraftyStopTimer\");\n\n\t\t\t\tif (typeof tick !== \"function\") clearInterval(tick);\n\n\t\t\t\tvar onFrame = (typeof window !== \"undefined\") && (\n\t\t\t\t\twindow.cancelAnimationFrame ||\n                    window.cancelRequestAnimationFrame ||\n                    window.webkitCancelRequestAnimationFrame ||\n                    window.mozCancelRequestAnimationFrame ||\n                    window.oCancelRequestAnimationFrame ||\n                    window.msCancelRequestAnimationFrame ||\n                    null\n\t\t\t\t);\n\n\t\t\t\tif (onFrame) onFrame(requestID);\n\t\t\t\ttick = null;\n\t\t\t},\n\n\n\t\t\t/**@\n             * #Qrafty.timer.steptype\n             * @comp Qrafty.timer\n             * @kind Method\n             *\n             * @trigger NewSteptype - when the current steptype changes - { mode, maxTimeStep } - New steptype\n             *\n             * Can be called to set the type of timestep the game loop uses.\n             * @sign public void Qrafty.timer.steptype(mode [, maxTimeStep])\n             * @param mode - the type of time loop.  Allowed values are \"fixed\", \"semifixed\", and \"variable\".  Qrafty defaults to \"fixed\".\n             * @param maxTimeStep - For \"fixed\", sets the max number of frames per step.   For \"variable\" and \"semifixed\", sets the maximum time step allowed.\n             *\n             * Can be called to get the type of timestep the game loop uses.\n             * @sign public Object Qrafty.timer.steptype(void)\n             * @returns Object containing the current timestep's properties { mode, maxTimeStep }\n             *\n             * * In \"fixed\" mode, each frame is sent the same value of `dt`, and to achieve the target game speed, mulitiple frame events are triggered before each render.\n             * * In \"variable\" mode, there is only one frame triggered per render.  This recieves a value of `dt` equal to the actual elapsed time since the last frame.\n             * * In \"semifixed\" mode, multiple frames per render are processed, and the total time since the last frame is divided evenly between them.\n             *\n             * @see Qrafty.timer.FPS\n             */\n\t\t\tsteptype: function (newmode, option) {\n\t\t\t\t// setters\n\t\t\t\tif (newmode === \"variable\" || newmode === \"semifixed\") {\n\t\t\t\t\tmode = newmode;\n\t\t\t\t\tif (option)\n\t\t\t\t\t\tmaxTimestep = option;\n\t\t\t\t\tQrafty.trigger(\"NewSteptype\", {mode: mode, maxTimeStep: maxTimestep});\n\t\t\t\t} else if (newmode === \"fixed\") {\n\t\t\t\t\tmode = \"fixed\";\n\t\t\t\t\tif (option)\n\t\t\t\t\t\tmaxFramesPerStep = option;\n\t\t\t\t\tQrafty.trigger(\"NewSteptype\", {mode: mode, maxTimeStep: maxFramesPerStep});\n\t\t\t\t} else if (newmode !== undefined) {\n\t\t\t\t\tthrow \"Invalid step type specified\";\n\t\t\t\t\t// getter\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmode: mode,\n\t\t\t\t\t\tmaxTimeStep: (mode === \"variable\" || mode === \"semifixed\") ? maxTimestep : maxFramesPerStep\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**@\n             * #Qrafty.timer.step\n             * @comp Qrafty.timer\n             * @kind Method\n             * \n             * @sign public void Qrafty.timer.step()\n             * @trigger EnterFrame - Triggered before each frame.  Passes the frame number, and the amount of time since the last frame.  If the time is greater than maxTimestep, that will be used instead.  (The default value of maxTimestep is 50 ms.) - { frame: Number, dt:Number }\n             * @trigger UpdateFrame - Triggered on each frame.  Passes the frame number, and the amount of time since the last frame.  If the time is greater than maxTimestep, that will be used instead.  (The default value of maxTimestep is 50 ms.) - { frame: Number, dt:Number }\n             * @trigger ExitFrame - Triggered after each frame.  Passes the frame number, and the amount of time since the last frame.  If the time is greater than maxTimestep, that will be used instead.  (The default value of maxTimestep is 50 ms.) - { frame: Number, dt:Number }\n             * @trigger PreRender - Triggered every time immediately before a scene should be rendered\n             * @trigger RenderScene - Triggered every time a scene should be rendered\n             * @trigger PostRender - Triggered every time immediately after a scene should be rendered\n             * @trigger MeasureWaitTime - Triggered at the beginning of each step after the first.  Passes the time the game loop waited between steps. - Number\n             * @trigger MeasureFrameTime - Triggered after each frame.  Passes the time it took to advance one frame. - Number\n             * @trigger MeasureRenderTime - Triggered after each render. Passes the time it took to render the scene - Number\n             *\n             * Advances the game by performing a step. A step consists of one/multiple frames followed by a render. The amount of frames depends on the timer's steptype.\n             * Specifically it triggers `EnterFrame`, `UpdateFrame` & `ExitFrame` events for each frame and `PreRender`, `RenderScene` & `PostRender` events for each render.\n             *\n             * @see Qrafty.timer.steptype\n             * @see Qrafty.timer.FPS\n             */\n\t\t\tstep: function () {\n\t\t\t\tvar drawTimeStart, dt, lastFrameTime, loops = 0;\n\n\t\t\t\tvar currentTime = Date.now();\n\t\t\t\tif (endTime > 0)\n\t\t\t\t\tQrafty.trigger(\"MeasureWaitTime\", currentTime - endTime);\n\n\t\t\t\t// If we're currently ahead of the current time, we need to wait until we're not!\n\t\t\t\tif (gameTime + timeSlip >= currentTime) {\n\t\t\t\t\tendTime = currentTime;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar netTimeStep = currentTime - (gameTime + timeSlip);\n\t\t\t\t// We try to keep up with the target FPS by processing multiple frames per render\n\t\t\t\t// If we're hopelessly behind, stop trying to catch up.\n\t\t\t\tif (netTimeStep > milliSecPerFrame * 20) {\n\t\t\t\t\t//gameTime = currentTime - milliSecPerFrame;\n\t\t\t\t\ttimeSlip += netTimeStep - milliSecPerFrame;\n\t\t\t\t\tnetTimeStep = milliSecPerFrame;\n\t\t\t\t}\n\n\t\t\t\t// Set up how time is incremented\n\t\t\t\tif (mode === \"fixed\") {\n\t\t\t\t\tloops = Math.ceil(netTimeStep / milliSecPerFrame);\n\t\t\t\t\t// maxFramesPerStep adjusts how willing we are to delay drawing in order to keep at the target FPS\n\t\t\t\t\tloops = Math.min(loops, maxFramesPerStep);\n\t\t\t\t\tdt = milliSecPerFrame;\n\t\t\t\t} else if (mode === \"variable\") {\n\t\t\t\t\tloops = 1;\n\t\t\t\t\tdt = netTimeStep;\n\t\t\t\t\t// maxTimestep is the maximum time to be processed in a frame.  (Large dt => unstable physics)\n\t\t\t\t\tdt = Math.min(dt, maxTimestep);\n\t\t\t\t} else if (mode === \"semifixed\") {\n\t\t\t\t\tloops = Math.ceil(netTimeStep / maxTimestep);\n\t\t\t\t\tdt = netTimeStep / loops;\n\t\t\t\t}\n\n\t\t\t\t// Process frames, incrementing the game clock with each frame.\n\t\t\t\t// dt is determined by the mode\n\t\t\t\tfor (var i = 0; i < loops; i++) {\n\t\t\t\t\tlastFrameTime = currentTime;\n                    \n\t\t\t\t\tvar frameData = {\n\t\t\t\t\t\tframe: frame++,\n\t\t\t\t\t\tdt: dt,\n\t\t\t\t\t\tgameTime: gameTime\n\t\t\t\t\t};\n\n\t\t\t\t\t// Event that happens before \"UpdateFrame\",\n\t\t\t\t\t// e.g. for setting-up movement in response to user input for the next \"UpdateFrame\" event\n\t\t\t\t\tQrafty.trigger(\"EnterFrame\", frameData);\n\t\t\t\t\t// Everything that changes over time hooks into this event\n\t\t\t\t\tQrafty.trigger(\"UpdateFrame\", frameData);\n\t\t\t\t\t// Event that happens after \"UpdateFrame\",\n\t\t\t\t\t// e.g. for resolivng collisions applied through movement during \"UpdateFrame\" events\n\t\t\t\t\tQrafty.trigger(\"ExitFrame\", frameData);\n\t\t\t\t\tgameTime += dt;\n\n\t\t\t\t\tcurrentTime = Date.now();\n\t\t\t\t\tQrafty.trigger(\"MeasureFrameTime\", currentTime - lastFrameTime);\n\t\t\t\t}\n\n\t\t\t\t//If any frames were processed, render the results\n\t\t\t\tif (loops > 0) {\n\t\t\t\t\tdrawTimeStart = currentTime;\n\t\t\t\t\tQrafty.trigger(\"PreRender\"); // Pre-render setup opportunity\n\t\t\t\t\tQrafty.trigger(\"RenderScene\");\n\t\t\t\t\tQrafty.trigger(\"PostRender\"); // Post-render cleanup opportunity\n\t\t\t\t\tcurrentTime = Date.now();\n\t\t\t\t\tQrafty.trigger(\"MeasureRenderTime\", currentTime - drawTimeStart);\n\t\t\t\t}\n\n\t\t\t\tendTime = currentTime;\n\t\t\t},\n\t\t\t/**@\n             * #Qrafty.timer.FPS\n             * @comp Qrafty.timer\n             * @kind Method\n             * \n             * @sign public void Qrafty.timer.FPS()\n             * Returns the target frames per second. This is not an actual frame rate.\n             * @sign public void Qrafty.timer.FPS(Number value)\n             * @param value - the target rate\n             * @trigger FPSChange - Triggered when the target FPS is changed by user - Number - new target FPS\n             *\n             * Sets the target frames per second. This is not an actual frame rate.\n             * The default rate is 50.\n             *\n             * @see Qrafty.timer.steptype\n             */\n\t\t\tFPS: function (value) {\n\t\t\t\tif (typeof value === \"undefined\")\n\t\t\t\t\treturn FPS;\n\t\t\t\telse {\n\t\t\t\t\tFPS = value;\n\t\t\t\t\tmilliSecPerFrame = 1000 / FPS;\n\t\t\t\t\tQrafty.trigger(\"FPSChange\", value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**@\n             * #Qrafty.timer.simulateFrames\n             * @comp Qrafty.timer\n             * @kind Method\n             * \n             * @sign public this Qrafty.timer.simulateFrames(Number frames[, Number timestep])\n             * Advances the game state by a number of frames and draws the resulting stage at the end. Useful for tests and debugging.\n             * @param frames - number of frames to simulate\n             * @param timestep - the duration to pass each frame.  Defaults to milliSecPerFrame (20 ms) if not specified.\n             */\n\t\t\tsimulateFrames: function (frames, timestep) {\n\t\t\t\ttimestep = timestep || milliSecPerFrame;\n\t\t\t\twhile (frames-- > 0) {\n\t\t\t\t\tvar frameData = {\n\t\t\t\t\t\tframe: frame++,\n\t\t\t\t\t\tdt: timestep\n\t\t\t\t\t};\n\t\t\t\t\tQrafty.trigger(\"EnterFrame\", frameData);\n\t\t\t\t\tQrafty.trigger(\"UpdateFrame\", frameData);\n\t\t\t\t\tQrafty.trigger(\"ExitFrame\", frameData);\n\t\t\t\t}\n\t\t\t\tQrafty.trigger(\"PreRender\");\n\t\t\t\tQrafty.trigger(\"RenderScene\");\n\t\t\t\tQrafty.trigger(\"PostRender\");\n\t\t\t}\n\t\t};\n\t})(),\n\n\tentity: async function () {\n\t\treturn this.e.apply(this, arguments);\n\t},\n\n\te: async function () {\n\t\tlet id = UID();\n\t\tthis._entities[id] = null;\n\t\tthis._entities[id] = Qrafty(id);\n\n\t\t\n\t\tawait this._entities[id].addComponent(...arguments);\n\t\tawait this._entities[id].addComponent(\"obj\");\n\t\tthis._entities[id].setName(`Entity #${id}`);\n\n\t\tQrafty.emit(\"NewEntity\", {id});\n\n\t\treturn this._entities[id];\n\t},\n\n\ttrigger: function () { this.emit.apply(this, arguments); },\n\temit: function (event, data) {\n\t\t//Qrafty.debug(`trigger: \"${event}\"`, data);\n\t\t//  To learn how the event system functions, see the comments for Qrafty._callbackMethods\n\t\tvar hdl = handlers[event] || (handlers[event] = {}),\n\t\t\th, callbacks;\n\t\t//loop over every object bound\n\t\tfor (h in hdl) {\n\t\t\t// Check whether h needs to be processed\n\t\t\tif (!hdl.hasOwnProperty(h)) continue;\n\t\t\tcallbacks = hdl[h];\n\t\t\tif (!callbacks || callbacks.length === 0) continue;\n\n\t\t\tcallbacks.context._runCallbacks(event, data);\n\t\t}\n\t},\n\n\tbind: function () { this.on.apply(this, arguments); },\n\ton: function (event, callback, unique = false) {\n\t\tif (unique) this.unbind(event, callback);\n\t\tthis._bindCallback(event, callback);\n\t\treturn callback;\n\t},\n\n\tuniqueBind: function (event, callback) {\n\t\treturn this.on(event, callback, true);\n\t},\n\n\t/**@\n     * #Qrafty.one\n     * @category Core, Events\n     * @kind Method\n     * \n     * @sign public Function one(String eventName, Function callback)\n     * @param eventName - Name of the event to bind to\n     * @param callback - Method to execute upon event triggered\n     * @returns callback function which can be used for unbind\n     *\n     * Works like Qrafty.bind, but will be unbound once the event triggers.\n     *\n     * @see Qrafty.bind\n     */\n\tone: function (event, callback) {\n\t\tvar self = this;\n\t\tvar oneHandler = function (data) {\n\t\t\tcallback.call(self, data);\n\t\t\tself.unbind(event, oneHandler);\n\t\t};\n\t\treturn self.bind(event, oneHandler);\n\t},\n\n\t/**@\n     * #Qrafty.unbind\n     * @category Core, Events\n     * @kind Method\n     * \n     * @sign public Boolean Qrafty.unbind(String eventName, Function callback)\n     * @param eventName - Name of the event to unbind\n     * @param callback - Function to unbind\n     * @example\n     * ~~~\n     *    var play_gameover_sound = function () {...};\n     *    Qrafty.bind('GameOver', play_gameover_sound);\n     *    ...\n     *    Qrafty.unbind('GameOver', play_gameover_sound);\n     * ~~~\n     *\n     * The first line defines a callback function. The second line binds that\n     * function so that `Qrafty.trigger('GameOver')` causes that function to\n     * run. The third line unbinds that function.\n     *\n     * ~~~\n     *    Qrafty.unbind('GameOver');\n     * ~~~\n     *\n     * This unbinds ALL global callbacks for the event 'GameOver'. That\n     * includes all callbacks attached by `Qrafty.bind('GameOver', ...)`, but\n     * none of the callbacks attached by `some_entity.bind('GameOver', ...)`.\n     */\n\tunbind: function (event, callback) {\n\t\t//  To learn how the event system functions, see the comments for Qrafty._callbackMethods\n\t\tthis._unbindCallbacks(event, callback);\n\t},\n\n\t/**@\n     * #Qrafty.frame\n     * @category Core\n     * @kind Method\n     * \n     * @sign public Number Qrafty.frame(void)\n     * @returns the current frame number\n     */\n\tframe: function () {\n\t\treturn frame;\n\t},\n\n\tentities: function () {\n\t\treturn this._entities;\n\t},\n\n\tsettings: (function () {\n\t\tlet states = {};\n\n\t\treturn {\n\t\t\tregister: function (setting, callback) {\n\t\t\t\tQrafty.on(`SettingsChange[${setting}]`, callback);\n\t\t\t},\n\n\t\t\tset: function () { this.modify.apply(this, arguments); },\n\n\t\t\tmodify: function (setting, value) {\n\t\t\t\tif (!setting || value === undefined) throw new Error(\"setting cannot be assigned without key and value\");\n\t\t\t\tQrafty.emit(`SettingsChange[${setting}]`, value);\n\t\t\t\tstates[setting] = value;\n\t\t\t},\n\n\t\t\tget: function (setting) {\n\t\t\t\tif (!setting) return Object.freeze({...states});\n\t\t\t\treturn states[setting];\n\t\t\t}\n\t\t};\n\t})(),\n\n\tfunctions: (function () {\n\t\tlet states = {};\n\n\t\treturn {\n\t\t\tregister: function (key, callback) {\n\t\t\t\tQrafty.on(`FunctionsChange[${key}]`, callback);\n\t\t\t},\n\n\t\t\tset: function () { this.modify.apply(this, arguments); },\n\t\t\t\n\t\t\tmodify: function (key, value) {\n\t\t\t\tif (!key || !value) throw new Error(\"custom functions cannot be assiged without key and value\");\n\t\t\t\tif (typeof value !== \"function\") throw new Error(\"custom function is the wrong type\");\n\n\t\t\t\tQrafty.emit(`FunctionsChange[${key}]`, value);\n\t\t\t\tstates[key] = value;\n\t\t\t},\n\n\t\t\tget: function (key) {\n\t\t\t\tif (!key) return Object.freeze({...states});\n\t\t\t\treturn states[key];\n\t\t\t}\n\t\t};\n\t})(),\n\n\t/**@\n     * #Qrafty.defineField\n     * @category Core\n     * @kind Method\n     * \n     * @sign public void Qrafty.defineField(Object object, String property, Function getCallback, Function setCallback)\n     * @param object - Object to define property on\n     * @param property - Property name to assign getter & setter to\n     * @param getCallback - Method to execute if the property is accessed\n     * @param setCallback - Method to execute if the property is mutated\n     *\n     * Assigns getters and setters to the property in the given object.\n     * A getter will watch a property waiting for access and will then invoke the\n     * given getCallback when attempting to retrieve.\n     * A setter will watch a property waiting for mutation and will then invoke the\n     * given setCallback when attempting to modify.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D\");\n     * Qrafty.defineField(ent, \"customData\", function() { \n     *    return this._customData; \n     * }, function(newValue) { \n     *    this._customData = newValue;\n     * });\n     *\n     * ent.customData = \"2\" // set customData to 2\n     * Qrafty.log(ent.customData) // prints 2\n     * ~~~\n     * @see Qrafty Core#.defineField\n     */\n\tdefineField: function(obj, prop, getCallback, setCallback) {\n\t\tObject.defineProperty(obj, prop, {\n\t\t\tget: getCallback,\n\t\t\tset: setCallback,\n\t\t\tconfigurable: false,\n\t\t\tenumerable: true,\n\t\t});\n\t},\n\n\tclone: clone\n});\n\n\nfunction UID() {\n\tlet id = GUID++;\n\n\tif (id in Qrafty._entities) return UID();\n\treturn id;\n}\n\nfunction clone(obj) {\n\tif (obj === null || (typeof obj) !== \"object\") return obj;\n\n\tlet temp = obj.constructor(); // changed\n\tfor (let key in obj) temp[key] = clone(obj[key]);\n\treturn temp;\n}\n\nQrafty.resolver = _resolver__WEBPACK_IMPORTED_MODULE_0__;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Qrafty);\n\n//# sourceURL=webpack://qrafty-v2/./src/core/core.js?");

/***/ }),

/***/ "./src/core/entity.js":
/*!****************************!*\
  !*** ./src/core/entity.js ***!
  \****************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core */ \"./src/core/core.js\");\n/* harmony import */ var _resolver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolver */ \"./src/core/resolver/index.js\");\n;\n\n\n//Qrafty._entities = {};\n//Qrafty._compEntities = {};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n\tinit: function (selector) {\n\n\t\tif (typeof selector === \"string\") {\n\t\t\tif (selector === \"*\") {\n\t\t\t\tlet index = 0;\n\t\t\t\tfor (let e in _core__WEBPACK_IMPORTED_MODULE_0__.default._entities) {\n\t\t\t\t\tthis[index] = Number.parseInt(e);\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\n\t\t\t\tthis.length = index;\n\t\t\t\tif (this.length === 1) return _core__WEBPACK_IMPORTED_MODULE_0__.default._entities[this[0]];\n\t\t\t\treturn this;\n\t\t\t}\n            \n\t\t\tlet entities = {};\n\t\t\tlet components = _resolver__WEBPACK_IMPORTED_MODULE_1__.components(arguments);\n\t\t\tfor (let name of components) {\n\t\t\t\tfor (let entity in _core__WEBPACK_IMPORTED_MODULE_0__.default._compEntities[name]) {\n\t\t\t\t\tentities[entity] = Number.parseInt(entity);\n\t\t\t\t}\n\t\t\t}\n                \n\t\t\tlet element = 0;\n\t\t\tfor (let i in entities) {\n\t\t\t\tthis[element++] = entities[i];\n\t\t\t}\n\n\t\t\tthis.length = element;\n\t\t\tif (element === 1) return _core__WEBPACK_IMPORTED_MODULE_0__.default._entities[this[element-1]];\n            \n\t\t\t_core__WEBPACK_IMPORTED_MODULE_0__.default._addCallbackMethods(this);\n\t\t\treturn this;\n\t\t}\n        \n\t\tif (!selector) { // nothing passed, create god entity??\n\t\t\tselector = 0;\n\t\t\tif (!(0 in _core__WEBPACK_IMPORTED_MODULE_0__.default._entities)) _core__WEBPACK_IMPORTED_MODULE_0__.default._entities[0] = this;\n\t\t}\n        \n\t\tif (!(selector in _core__WEBPACK_IMPORTED_MODULE_0__.default._entities)) {\n\t\t\tthis.length = 0;\n\t\t\treturn this;\n\t\t}\n        \n\t\tthis[0] = selector;\n\t\tthis.length = 1;\n        \n\t\tif (!this.__c) this.__c = {};\n\t\tif (!this._callbacks) _core__WEBPACK_IMPORTED_MODULE_0__.default._addCallbackMethods(this);\n        \n\t\tif (!_core__WEBPACK_IMPORTED_MODULE_0__.default._entities[selector]) _core__WEBPACK_IMPORTED_MODULE_0__.default._entities[selector] = this;\n\t\treturn _core__WEBPACK_IMPORTED_MODULE_0__.default._entities[selector]; \n\t},\n\n\tsetName: function (name) {\n\t\tthis._entityName = String(name);\n\t\tthis.emit(\"NewEntityName\", this._entityName);\n\t\treturn this;\n\t},\n\n\tgetName: function () {\n\t\treturn this._entityName;\n\t},\n\n\taddComponent: async function () {\n\t\tlet components = _resolver__WEBPACK_IMPORTED_MODULE_1__.components(arguments);\n\n\t\tfor (let name of components) {\n\t\t\tif (!_core__WEBPACK_IMPORTED_MODULE_0__.default.isComponent(name)) continue;\n\t\t\tif (this.__c[name] === true) continue;\n\t\t\tthis.__c[name] = true;\n\n\t\t\t_core__WEBPACK_IMPORTED_MODULE_0__.default._compEntities[name] = _core__WEBPACK_IMPORTED_MODULE_0__.default._compEntities[name] || {};\n\t\t\t_core__WEBPACK_IMPORTED_MODULE_0__.default._compEntities[name][this[0]] = this;\n\n\t\t\tlet component = await _core__WEBPACK_IMPORTED_MODULE_0__.default.component(name);\n\t\t\tthis.extend(component);\n            \n\t\t\tif (\"required\" in component) this.addComponent(component.requires);\n            \n\t\t\tif (\"properties\" in component) {\n\t\t\t\tfor (let property in component.properties) {\n\t\t\t\t\tObject.defineProperty(this, property, component.properties[property]);\n\t\t\t\t}\n\t\t\t}\n            \n\t\t\tif (\"events\" in component) {\n\t\t\t\tfor (var event in component.events){\n\t\t\t\t\tthis.on(event, component.events[event]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\"init\" in component) {\n\t\t\t\tawait component.init.call(this);\n\t\t\t}\n\t\t}\n\n\t\tthis.trigger(\"NewComponent\", components);\n\t\treturn this;\n\t},\n\n\ttoggleComponent: async function () {\n\t\tlet components = _resolver__WEBPACK_IMPORTED_MODULE_1__.components(arguments);\n\t\tfor (let name of components) {\n\t\t\tif (!this.has(name)) {\n\t\t\t\tawait this.addComponent(name);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tawait this.removeComponent(name);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\trequires: async function () {\n\t\treturn this.addComponent.apply(this, arguments);\n\t},\n    \n\tremoveComponent: async function (id, soft) {\n\t\treturn;\n\t\tvar comp = components[id];\n\t\tthis.emit(\"RemoveComponent\", id);\n\t\tif (comp && \"events\" in comp){\n\t\t\tvar auto = comp.events;\n\t\t\tfor (var eventName in auto){\n\t\t\t\tvar fn = typeof auto[eventName] === \"function\" ? auto[eventName] : comp[auto[eventName]];\n\t\t\t\tthis.unbind(eventName, fn);\n\t\t\t}\n\t\t}\n\t\tif (comp && \"remove\" in comp) {\n\t\t\tcomp.remove.call(this, false);\n\t\t}\n\t\tif (soft === false && comp) {\n\t\t\tfor (var prop in comp) {\n\t\t\t\tdelete this[prop];\n\t\t\t}\n\t\t}\n\t\tdelete this.__c[id];\n\t\t// update map from component to (entityId -> entity)\n\t\tif (compEntities[id]) {\n\t\t\tdelete compEntities[id][this[0]];\n\t\t}\n\n\t\treturn this;\n\t},\n\n\n\tgetId: function () {\n\t\treturn this[0];\n\t},\n\n\thas: function (id) {\n\t\treturn !!this.__c[id];\n\t},\n    \n\tattr: function (key, value, silent, recursive) {\n\t\tif (arguments.length === 1 && typeof arguments[0] === \"string\") {\n\t\t\treturn this._attr_get(key);\n\t\t} else {\n\t\t\treturn this._attr_set(key, value, silent, recursive);\n\t\t}\n\t},\n\n\t_attr_get: function(key, context) {\n\t\tvar first, keys, subkey;\n\t\tif (typeof context === \"undefined\" || context === null) {\n\t\t\tcontext = this;\n\t\t}\n\t\tif (key.indexOf(\".\") > -1) {\n\t\t\tkeys = key.split(\".\");\n\t\t\tfirst = keys.shift();\n\t\t\tsubkey = keys.join(\".\");\n\t\t\treturn this._attr_get(keys.join(\".\"), context[first]);\n\t\t} else {\n\t\t\treturn context[key];\n\t\t}\n\t},\n\n\t_attr_set: function() {\n\t\tvar data, silent, recursive;\n\t\tif (typeof arguments[0] === \"string\") {\n\t\t\tdata = this._set_create_object(arguments[0], arguments[1]);\n\t\t\tsilent = !!arguments[2];\n\t\t\trecursive = arguments[3] || arguments[0].indexOf(\".\") > -1;\n\t\t} else {\n\t\t\tdata = arguments[0];\n\t\t\tsilent = !!arguments[1];\n\t\t\trecursive = !!arguments[2];\n\t\t}\n\n\t\tif (!silent) {\n\t\t\tthis.trigger(\"Change\", data);\n\t\t}\n\n\t\tif (recursive) {\n\t\t\tthis._recursive_extend(data, this);\n\t\t} else {\n\t\t\tthis.extend.call(this, data);\n\t\t}\n\t\treturn this;\n\t},\n\n\t_set_create_object: function(key, value) {\n\t\tvar data = {}, keys, first, subkey;\n\t\tif (key.indexOf(\".\") > -1) {\n\t\t\tkeys = key.split(\".\");\n\t\t\tfirst = keys.shift();\n\t\t\tsubkey = keys.join(\".\");\n\t\t\tdata[first] = this._set_create_object(subkey, value);\n\t\t} else {\n\t\t\tdata[key] = value;\n\t\t}\n\t\treturn data;\n\t},\n\n\t_recursive_extend: function(new_data, original_data) {\n\t\tvar key;\n\t\tfor (key in new_data) {\n\t\t\tif (new_data[key].constructor === Object) {\n\t\t\t\toriginal_data[key] = this._recursive_extend(new_data[key], original_data[key]);\n\t\t\t} else {\n\t\t\t\toriginal_data[key] = new_data[key];\n\t\t\t}\n\t\t}\n\t\treturn original_data;\n\t},\n\n\ttoArray: function () {\n\t\treturn Array.prototype.slice.call(this, 0);\n\t},\n\n\ttimeout: function (callback, duration) {\n\t\tthis.each(function () {\n\t\t\tlet self = this;\n\t\t\tsetTimeout(function () {\n\t\t\t\tcallback.call(self);\n\t\t\t}, duration);\n\t\t});\n        \n\t\treturn this;\n\t},\n    \n\ton: function () { return this.bind.apply(this, arguments); },\n\tbind: function (event, callback, unique = false) {\n\t\tif (unique) this.unbind(event, callback);\n\n\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\tvar e = _core__WEBPACK_IMPORTED_MODULE_0__.default._entities[this[i]];\n\t\t\tif (e) {\n\t\t\t\te._bindCallback(event, callback);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn this;\n\t},\n\n\tuniqueBind: function (event, callback) {\n\t\treturn this.bind(event, callback, true);\n\t},\n\n\tone: function (event, callback) {\n\t\tlet self = this;\n\t\treturn this.bind(event, function () {\n\t\t\tcallback.apply(self, arguments);\n\t\t\tself.unbind(event, this);\n\t\t});\n\n\t},\n\n\tunbind: function (event, callback) {\n\t\tfor (let i = 0; i < this.length; i++) {\n\t\t\tlet entity = _core__WEBPACK_IMPORTED_MODULE_0__.default._entities[this[i]];\n\t\t\tif (entity) entity._unbindCallbacks(event, callback);\n\t\t}\n        \n\t\treturn this;\n\t},\n    \n\temit: function () { return this.trigger.apply(this, arguments); },\n\ttrigger: function (event, data) {\n\t\tfor (let i = 0; i < this.length; i++) {\n\t\t\tlet entity = _core__WEBPACK_IMPORTED_MODULE_0__.default._entities[this[i]];\n\t\t\tif (entity) entity._runCallbacks(event, data);\n\t\t}\n\t\t\n\t\treturn this;\n\t},\n\n\teach: function (func) {\n\t\tfor (let i = 0; i < this.length; i++) {\n\t\t\tif (!_core__WEBPACK_IMPORTED_MODULE_0__.default._entities[this[i]]) continue;\n\t\t\tfunc.call(_core__WEBPACK_IMPORTED_MODULE_0__.default._entities[this[i]], i);\n\t\t}\n        \n\t\treturn this;\n\t},\n\n\t/**@\n     * #.get\n     * @comp Qrafty Core\n     * @kind Method\n     * \n     * @sign public Array .get()\n     * @returns An array of entities corresponding to the active selector\n     *\n     * @sign public Entity .get(Number index)\n     * @returns an entity belonging to the current selection\n     * @param index - The index of the entity to return.  If negative, counts back from the end of the array.\n     *\n     *\n     * @example\n     * Get an array containing every \"2D\" entity\n     * ~~~\n     * var arr = Qrafty(\"2D\").get()\n     * ~~~\n     * Get the first entity matching the selector\n     * ~~~\n     * // equivalent to Qrafty(\"2D\").get()[0], but doesn't create a new array\n     * var e = Qrafty(\"2D\").get(0)\n     * ~~~\n     * Get the last \"2D\" entity matching the selector\n     * ~~~\n     * var e = Qrafty(\"2D\").get(-1)\n     * ~~~\n     *\n     */\n\tget: function (index) {\n\t\tconst length = this.length;\n\t\tif (typeof index !== \"undefined\") {\n\t\t\tif (index >= length || index+length < 0) return undefined;\n\t\t\tif (index >= 0) return _core__WEBPACK_IMPORTED_MODULE_0__.default._entities[this[index]];\n\t\t\treturn _core__WEBPACK_IMPORTED_MODULE_0__.default._entities[this[index-length]];\n\t\t}\n        \n\t\tlet results = [];\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tif (!_core__WEBPACK_IMPORTED_MODULE_0__.default._entities[this[i]]) continue;\n\t\t\tresults.push(_core__WEBPACK_IMPORTED_MODULE_0__.default._entities[this[i]] );\n\t\t}\n\n\t\treturn results;\n\t},\n\n\tclone: async function () {\n\t\tlet components = this.__c, clone = _core__WEBPACK_IMPORTED_MODULE_0__.default.e();\n\n\t\tfor (let name in components) {\n\t\t\tawait clone.addComponent(name);\n\t\t}\n\n\t\tfor (let prop in this) {\n\t\t\tif (prop !== \"0\" && prop !== \"_global\" && prop !== \"_changed\" && typeof this[prop] !== \"function\" && typeof this[prop] !== \"object\") {\n\t\t\t\tclone[prop] = this[prop];\n\t\t\t}\n\t\t}\n\n\t\treturn clone;\n\t},\n\n\n\t/**@\n     * #.defineField\n     * @comp Qrafty Core\n     * @kind Method\n     * \n     * @sign public this .defineField(String property, Function getCallback, Function setCallback)\n     * @param property - Property name to assign getter & setter to\n     * @param getCallback - Method to execute if the property is accessed\n     * @param setCallback - Method to execute if the property is mutated\n     *\n     * Assigns getters and setters to the property. \n     * A getter will watch a property waiting for access and will then invoke the\n     * given getCallback when attempting to retrieve.\n     * A setter will watch a property waiting for mutation and will then invoke the\n     * given setCallback when attempting to modify.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D\");\n     * ent.defineField(\"customData\", function() { \n     *    return this._customData; \n     * }, function(newValue) { \n     *    this._customData = newValue;\n     * });\n     *\n     * ent.customData = \"2\" // set customData to 2\n     * Qrafty.log(ent.customData) // prints 2\n     * ~~~\n     */\n\tdefineField: function (prop, getCallback, setCallback) {\n\t\t_core__WEBPACK_IMPORTED_MODULE_0__.default.defineField(this, prop, getCallback, setCallback);\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.destroy\n     * @comp Qrafty Core\n     * @kind Method\n     * \n     * @sign public this .destroy(void)\n     * Will remove all event listeners and delete all properties as well as removing from the stage\n     */\n\tdestroy: function () {\n\t\t//remove all event handlers, delete from entities\n\t\tthis.each(function () {\n\t\t\tvar comp;\n\t\t\tthis.trigger(\"Remove\");\n\t\t\tfor (var compName in this.__c) {\n\t\t\t\tcomp = components[compName];\n\t\t\t\tif (comp && \"remove\" in comp)\n\t\t\t\t\tcomp.remove.call(this, true);\n\n\t\t\t\t// update map from component to (entityId -> entity)\n\t\t\t\tdelete compEntities[compName][this[0]];\n\t\t\t}\n\t\t\tthis._unbindAll();\n\t\t\tdelete _core__WEBPACK_IMPORTED_MODULE_0__.default._entities[this[0]];\n\t\t});\n\t},\n\n\t/**@\n     * #.freeze\n     * @comp Qrafty Core\n     * @kind Method\n     * \n     * @sign public this .freeze()\n     * \n     * @triggers Freeze - Directly before the entity is frozen\n     * \n     * Freezes the entity.  A frozen entity will not receive events or be displayed by graphics systems. \n     * It is also removed from the spatial map, which means it will not be found by collisions, \n     * raycasting, or similar functions.\n     * \n     * This method may be called upon a collection of entities.\n     * \n     * @note Because the entity no longer listens to events, modifying its properties can result in an inconsistent state.\n     * \n     * If custom components need to handle frozen entities, they can listen to the \"Freeze\" event, which will be triggered before the event system is disabled.\n     * \n     * @example\n     * \n     * ```\n     * // Freeze all entities with the Dead component\n     * Qrafty(\"Dead\").freeze();\n     * ```\n     * \n     * @see .unfreeze\n     */\n\tfreeze: function () {\n\t\tif (this.length === 1 && !this.__frozen) {\n\t\t\tthis.trigger(\"Freeze\", this);\n\t\t\tthis._freezeCallbacks();\n\t\t\tthis.__frozen = true;\n\t\t} else {\n\t\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\t\tvar e = entities[this[i]];\n\t\t\t\tif (e && !e.__frozen) {\n\t\t\t\t\te.trigger(\"Freeze\", e);\n\t\t\t\t\te._freezeCallbacks();\n\t\t\t\t\t// Set a frozen flag.  (This is distinct from the __callbackFrozen flag)\n\t\t\t\t\te.__frozen = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**#\n     * #.unfreeze\n     * @comp Qrafty Core\n     * @kind Method\n     * \n     * @sign public this .unfreeze()\n     * \n     * @triggers Unfreeze - While the entity is being unfrozen\n     * \n     * Unfreezes the entity, allowing it to receive events, inserting it back into the spatial map, \n     * and restoring it to its previous visibility.\n     * \n     * This method may be called upon a collection of entities.\n     * \n     * If a custom component needs to know when an entity is unfrozen, they can listen to the \"Unfreeze\"\" event.\n     * \n     * @example\n     * ```\n     * // Bring the dead back to life!\n     * Qrafty(\"Dead\").unfreeze().addComponent(\"Undead\");\n     * ```\n     */\n\tunfreeze: function () {\n\t\tif (this.length === 1 && this.__frozen) {\n\t\t\tthis.__frozen = false;\n\t\t\tthis._unfreezeCallbacks();\n\t\t\tthis.emit(\"Unfreeze\", this);\n\t\t} else {\n\t\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\t\tvar e = entities[this[i]];\n\t\t\t\tif (e && e.__frozen) {\n\t\t\t\t\te.__frozen = false;\n\t\t\t\t\te._unfreezeCallbacks();\n\t\t\t\t\te.emit(\"Unfreeze\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/core/entity.js?");

/***/ }),

/***/ "./src/core/extensions.js":
/*!********************************!*\
  !*** ./src/core/extensions.js ***!
  \********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\nvar document = (typeof window !== \"undefined\") && window.document;\n\n/**@\n * #Qrafty.support\n * @category Misc, Core\n * @kind CoreObject\n * \n * Determines feature support for what Qrafty can do.\n */\n(function testSupport() {\n\tvar support = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.support = {},\n\t\tua = (typeof navigator !== \"undefined\" && navigator.userAgent.toLowerCase()) || (typeof process !== \"undefined\" && process.version),\n\t\tmatch = /(webkit)[ \\/]([\\w.]+)/.exec(ua) ||\n            /(o)pera(?:.*version)?[ \\/]([\\w.]+)/.exec(ua) ||\n            /(ms)ie ([\\w.]+)/.exec(ua) ||\n            /(moz)illa(?:.*? rv:([\\w.]+))?/.exec(ua) ||\n            /(v)\\d+\\.(\\d+)/.exec(ua) || [],\n\t\tmobile = /iPad|iPod|iPhone|Android|webOS|IEMobile/i.exec(ua);\n\n\t/**@\n     * #Qrafty.mobile\n     * @comp Qrafty.device\n     * @kind Property\n     *\n     * Determines if Qrafty is running on mobile device.\n     *\n     * If Qrafty.mobile is equal true Qrafty does some things under hood:\n     * ~~~\n     * - set viewport on max device width and height\n     * - set Qrafty.stage.fullscreen on true\n     * - hide window scrollbars\n     * ~~~\n     *\n     * @see Qrafty.viewport\n     */\n\tif (mobile) _core_core__WEBPACK_IMPORTED_MODULE_0__.default.mobile = mobile[0];\n\n\t/**@\n     * #Qrafty.support.defineProperty\n     * @comp Qrafty.support\n     * @kind Property\n     * \n     * Is `Object.defineProperty` supported?\n     */\n\tsupport.defineProperty = (function () {\n\t\tif (!(\"defineProperty\" in Object)) return false;\n\t\ttry { Object.defineProperty({}, \"x\", {});\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t})();\n\n\t/**@\n     * #Qrafty.support.audio\n     * @comp Qrafty.support\n     * @kind Property\n     * \n     * Is HTML5 `Audio` supported?\n     */\n\tsupport.audio = (typeof window !== \"undefined\") && (\"canPlayType\" in document.createElement(\"audio\"));\n\n\t/**@\n     * #Qrafty.support.prefix\n     * @comp Qrafty.support\n     * @kind Property\n     * \n     * Returns the browser specific prefix (`Moz`, `O`, `ms`, `webkit`, `node`).\n     */\n\tsupport.prefix = (match[1] || match[0]);\n\n\t//browser specific quirks\n\tif (support.prefix === \"moz\") support.prefix = \"Moz\";\n\tif (support.prefix === \"o\") support.prefix = \"O\";\n\tif (support.prefix === \"v\") support.prefix = \"node\";\n\n\tif (match[2]) {\n\t\t/**@\n         * #Qrafty.support.versionName\n         * @comp Qrafty.support\n         * @kind Property\n         * \n         * Version of the browser\n         */\n\t\tsupport.versionName = match[2];\n\n\t\t/**@\n         * #Qrafty.support.version\n         * @comp Qrafty.support\n         * @kind Property\n         * \n         * Version number of the browser as an Integer (first number)\n         */\n\t\tsupport.version = +(match[2].split(\".\"))[0];\n\t}\n\n\t/**@\n     * #Qrafty.support.canvas\n     * @comp Qrafty.support\n     * @kind Property\n     * \n     * Is the `canvas` element supported?\n     */\n\tsupport.canvas = (typeof window !== \"undefined\") && (\"getContext\" in document.createElement(\"canvas\"));\n\n\t/**@\n     * #Qrafty.support.webgl\n     * @comp Qrafty.support\n     * @kind Property\n     * \n     * Is WebGL supported on the canvas element?\n     */\n\tif (support.canvas) {\n\t\tvar gl;\n\t\ttry {\n\t\t\tvar c = document.createElement(\"canvas\");\n\t\t\tgl = c.getContext(\"webgl\") || c.getContext(\"experimental-webgl\");\n\t\t\tgl.viewportWidth = support.canvas.width;\n\t\t\tgl.viewportHeight = support.canvas.height;\n\t\t} catch (e) {}\n\t\tsupport.webgl = !! gl;\n\t} else {\n\t\tsupport.webgl = false;\n\t}\n\n\t/**@\n     * #Qrafty.support.css3dtransform\n     * @comp Qrafty.support\n     * @kind Property\n     * \n     * Is css3Dtransform supported by browser.\n     */\n\tsupport.css3dtransform = (typeof window !== \"undefined\") && ((typeof document.createElement(\"div\").style.Perspective !== \"undefined\") || (typeof document.createElement(\"div\").style[support.prefix + \"Perspective\"] !== \"undefined\"));\n\n\t/**@\n     * #Qrafty.support.deviceorientation\n     * @comp Qrafty.support\n     * @kind Property\n     * Is deviceorientation event supported by browser.\n     */\n\tsupport.deviceorientation = (typeof window !== \"undefined\") && ((typeof window.DeviceOrientationEvent !== \"undefined\") || (typeof window.OrientationEvent !== \"undefined\"));\n\n\t/**@\n     * #Qrafty.support.devicemotion\n     * @comp Qrafty.support\n     * @kind Property\n     * \n     * Is devicemotion event supported by browser.\n     */\n\tsupport.devicemotion = (typeof window !== \"undefined\") && (typeof window.DeviceMotionEvent !== \"undefined\");\n\n})();\n\n\n//# sourceURL=webpack://qrafty-v2/./src/core/extensions.js?");

/***/ }),

/***/ "./src/core/loader.js":
/*!****************************!*\
  !*** ./src/core/loader.js ***!
  \****************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.assets\n     * @category Assets\n     * @kind Property\n     * \n     * An object containing every asset used in the current Qrafty game.\n     * The key is the URL and the value is the `Audio` or `Image` object.\n     *\n     * If loading an asset, check that it is in this object first to avoid loading twice.\n     *\n     * @example\n     * ~~~\n     * var isLoaded = !!Qrafty.assets[\"images/sprite.png\"];\n     * ~~~\n     * @see Qrafty.load\n     */\n\tassets: {},\n\t__paths: { audio: \"\", images: \"\" },\n\t/**@\n     * #Qrafty.paths\n     * @category Assets\n     * @kind Method\n     * \n     * @sign public void Qrafty.paths([Object paths])\n     * @param paths - Object containing paths for audio and images folders\n     *\n     * Function to define custom folder for audio and images. You should use\n     * this function to avoid typing the same paths again and again when\n     * loading assets with the Qrafty.load() function.\n     *\n     * If you do not give a object you get the current paths for both audio\n     * and images back.\n     *\n     * You do not have to define paths.\n     *\n     * @example\n     *\n     *\n     * Setting folders:\n     * ~~~\n     * Qrafty.paths({ audio: \"custom/audio/path/\", images: \"custom/images/path/\" });\n     *\n     * Qrafty.load({\n     *   \"audio\": {\n     *     \"ray\": ['ray.mp3'] // This loads ray.mp3 from custom/audio/path/ray.mp3\n     *   }\n     * }, function() {\n     *   Qrafty.log('loaded');\n     * });\n     * ~~~\n     *\n     * @see Qrafty.load\n     */\n\tpaths: function(p) {\n\t\tif (typeof p === \"undefined\") {\n\t\t\treturn this.__paths;\n\t\t} else {\n\t\t\tif(p.audio)\n\t\t\t\tthis.__paths.audio = p.audio;\n\t\t\tif(p.images)\n\t\t\t\tthis.__paths.images = p.images;\n\t\t}\n\t},\n\n\t/**@\n     * #Qrafty.asset\n     * @category Assets\n     * @kind Method\n     * \n     * @trigger NewAsset - After setting new asset - Object - key and value of new added asset.\n     * @sign public void Qrafty.asset(String key, Object asset)\n     * @param key - asset url.\n     * @param asset - `Audio` or `Image` object.\n     *\n     * Add new asset to assets object.\n     *\n     * @sign public void Qrafty.asset(String key)\n     * @param key - asset url.\n     *\n     *\n     * Get asset from assets object.\n     *\n     * @example\n     * ~~~\n     * Qrafty.asset(key, value);\n     * var asset = Qrafty.asset(key); //object with key and value fields\n     * ~~~\n     *\n     * @see Qrafty.assets\n     */\n\tasset: function (key, value) {\n\t\tif (arguments.length === 1) {\n\t\t\treturn _core_core__WEBPACK_IMPORTED_MODULE_0__.default.assets[key];\n\t\t}\n\n\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.assets[key]) {\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.assets[key] = value;\n\t\t\tthis.trigger(\"NewAsset\", {\n\t\t\t\tkey: key,\n\t\t\t\tvalue: value\n\t\t\t});\n\t\t\treturn value;\n\t\t}\n\t},\n\t/**@\n     * #Qrafty.imageWhitelist\n     * @category Assets\n     * @kind Method\n     *\n     * A list of file extensions that can be loaded as images by Qrafty.load\n     *\n     * @example\n     * ~~~\n     * // add tif extension to list of supported image files\n     * Qrafty.imageWhitelist.push(\"tif\");\n     *\n     * var assets = {\n     *     \"sprites\": {\n     *         \"sprite.tif\": {   //set a tif sprite\n     *            \"tile\": 64,\n     *            \"tileh\": 32,\n     *            \"map\": { \"sprite_car\": [0, 0] }\n     *         }\n     *     },\n     *     \"audio\": {\n     *         \"jump\": \"jump.mp3\";\n     *     }\n     * };\n     *\n     * Qrafty.load( assets, // preload the assets\n     *     function() {     //when loaded\n     *         Qrafty.audio.play(\"jump\"); //Play the audio file\n     *         Qrafty.e('2D, DOM, sprite_car'); // create entity with sprite\n     *     },\n     *\n     *     function(e) { //progress\n     *     },\n     *\n     *     function(e) { //uh oh, error loading\n     *     }\n     * );\n     * ~~~\n     *\n     * @see Qrafty.asset\n     * @see Qrafty.load\n     */\n\timageWhitelist: [\"jpg\", \"jpeg\", \"gif\", \"png\", \"svg\"],\n\t/**@\n     * #Qrafty.load\n     * @category Assets\n     * @kind Method\n     * \n     * @sign public void Qrafty.load(Object assets, Function onLoad[, Function onProgress[, Function onError]])\n     * @param assets - Object JSON formatted (or JSON string), with assets to load (accepts sounds, images and sprites)\n     * @param onLoad - Callback when the assets are loaded\n     * @param onProgress - Callback when an asset is loaded. Contains information about assets loaded\n     * @param onError - Callback when an asset fails to load\n     *\n     * Preloader for all assets. Takes a JSON formatted object (or JSON string) of files and adds them to the\n     * `Qrafty.assets` object, as well as setting sprites accordingly.\n     *\n     * Format must follow the pattern shown in the example below, but it's not required to pass all \"audio\",\n     * \"images\" and \"sprites\" properties, only those you'll need. For example, if you don't need to preload\n     * sprites, you can omit that property.\n     *\n     * By default, Qrafty will assume all files are in the current path.  For changing these,\n     * use the function `Qrafty.paths`.\n     *\n     * Files with suffixes in `imageWhitelist` (case insensitive) will be loaded.\n     *\n     * It's possible to pass the full file path(including protocol), instead of just the filename.ext, in case\n     * you want some asset to be loaded from another domain.\n     *\n     * If `Qrafty.support.audio` is `true`, files with the following suffixes `mp3`, `wav`, `ogg` and\n     * `mp4` (case insensitive) can be loaded.\n     *\n     * The `onProgress` function will be passed on object with information about\n     * the progress including how many assets loaded, total of all the assets to\n     * load and a percentage of the progress.\n     * ~~~\n     * { loaded: j, total: total, percent: (j / total * 100), src:src }\n     * ~~~\n     *\n     * `onError` will be passed with the asset that couldn't load.\n     *\n     * When `onError` is not provided, the onLoad is loaded even when some assets are not successfully loaded.\n     * Otherwise, onLoad will be called no matter whether there are errors or not.\n     *\n     * @example\n     * ~~~\n     * var assetsObj = {\n     *     \"audio\": {\n     *         \"beep\": [\"beep.wav\", \"beep.mp3\", \"beep.ogg\"],\n     *         \"boop\": \"boop.wav\",\n     *         \"slash\": \"slash.wav\"\n     *     },\n     *     \"images\": [\"badguy.bmp\", \"goodguy.png\"],\n     *     \"sprites\": {\n     *         \"animals.png\": {\n     *             \"tile\": 50,\n     *             \"tileh\": 40,\n     *             \"map\": { \"ladybug\": [0,0], \"lazycat\": [0,1], \"ferociousdog\": [0,2] }\n     *             \"paddingX\": 5,\n     *             \"paddingY\": 5,\n     *             \"paddingAroundBorder\": 10\n     *         },\n     *         \"vehicles.png\": {\n     *             \"tile\": 150,\n     *             \"tileh\": 75,\n     *             \"map\": { \"car\": [0,0], \"truck\": [0,1] }\n     *         }\n     *     },\n     * };\n     *\n     * Qrafty.load(assetsObj, // preload assets\n     *     function() { //when loaded\n     *         Qrafty.scene(\"main\"); //go to main scene\n     *         Qrafty.audio.play(\"boop\"); //Play the audio file\n     *         Qrafty.e('2D, DOM, lazycat'); // create entity with sprite\n     *     },\n     *\n     *     function(e) { //progress\n     *     },\n     *\n     *     function(e) { //uh oh, error loading\n     *     }\n     * );\n     * ~~~\n     *\n     * @see Qrafty.paths\n     * @see Qrafty.assets\n     * @see Qrafty.imageWhitelist\n     * @see Qrafty.removeAssets\n     */\n\tload: function (data, oncomplete, onprogress, onerror) {\n\n\t\tif (Array.isArray(data)) {\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.log(\"Calling Qrafty.load with an array of assets no longer works; see the docs for more details.\");\n\t\t\treturn;\n\t\t}\n\n\t\tdata = (typeof data === \"string\" ? JSON.parse(data) : data);\n\n\t\tvar j = 0,\n\t\t\ttotal = (data.audio ? Object.keys(data.audio).length : 0) +\n                (data.images ? Object.keys(data.images).length : 0) +\n                (data.sprites ? Object.keys(data.sprites).length : 0),\n\t\t\tcurrent, fileUrl, obj, type, asset,\n\t\t\tpaths = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.paths(),\n\t\t\tgetExt = function(f) {\n\t\t\t\treturn f.substr(f.lastIndexOf(\".\") + 1).toLowerCase();\n\t\t\t},\n\t\t\tgetFilePath = function(type,f) {\n\t\t\t\treturn (f.search(\"://\") === -1 ? (type === \"audio\" ? paths.audio + f : paths.images + f) : f);\n\t\t\t},\n\t\t\t// returns null if 'a' is not already a loaded asset, obj otherwise\n\t\t\tisAsset = function(a) {\n\t\t\t\treturn _core_core__WEBPACK_IMPORTED_MODULE_0__.default.asset(a) || null;\n\t\t\t},\n\t\t\tisSupportedAudio = function(f) {\n\t\t\t\treturn _core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.audio && _core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.supports(getExt(f));\n\t\t\t},\n\t\t\tisValidImage = function(f) {\n\t\t\t\treturn _core_core__WEBPACK_IMPORTED_MODULE_0__.default.imageWhitelist.indexOf(getExt(f)) !== -1;\n\t\t\t},\n\t\t\tonImgLoad = function(obj,url) {\n\t\t\t\tobj.onload = pro;\n\t\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.prefix === \"webkit\")\n\t\t\t\t\tobj.src = \"\"; // workaround for webkit bug\n\t\t\t\tobj.src = url;\n\t\t\t};\n\n\t\t//Progress function\n\n\t\tfunction pro() {\n\t\t\tvar src = this.src;\n\n\t\t\t//Remove events cause audio trigger this event more than once(depends on browser)\n\t\t\tif (this.removeEventListener)\n\t\t\t\tthis.removeEventListener(\"canplaythrough\", pro, false);\n\n\t\t\tj++;\n\t\t\t//if progress callback, give information of assets loaded, total and percent\n\t\t\tif (onprogress)\n\t\t\t\tonprogress({\n\t\t\t\t\tloaded: j,\n\t\t\t\t\ttotal: total,\n\t\t\t\t\tpercent: (j / total * 100),\n\t\t\t\t\tsrc: src\n\t\t\t\t});\n\n\t\t\tif (j === total && oncomplete) oncomplete();\n\t\t}\n\t\t//Error function\n\n\t\tfunction err() {\n\t\t\tvar src = this.src;\n\t\t\tif (onerror)\n\t\t\t\tonerror({\n\t\t\t\t\tloaded: j,\n\t\t\t\t\ttotal: total,\n\t\t\t\t\tpercent: (j / total * 100),\n\t\t\t\t\tsrc: src\n\t\t\t\t});\n\n\t\t\tj++;\n\t\t\tif (j === total && oncomplete) oncomplete();\n\t\t}\n\n\t\tfor (type in data) {\n\t\t\tfor(asset in data[type]) {\n\t\t\t\tif (!data[type].hasOwnProperty(asset))\n\t\t\t\t\tcontinue; // maintain compatibility to other frameworks while iterating array\n\n\t\t\t\tcurrent = data[type][asset];\n\t\t\t\tobj = null;\n\n\t\t\t\tif (type === \"audio\") {\n\t\t\t\t\tif (typeof current === \"object\") {\n\t\t\t\t\t\tvar files = [];\n\t\t\t\t\t\tfor (var i in current) {\n\t\t\t\t\t\t\tfileUrl = getFilePath(type, current[i]);\n\t\t\t\t\t\t\tif (!isAsset(fileUrl) && isSupportedAudio(current[i]) && !_core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.sounds[asset])\n\t\t\t\t\t\t\t\tfiles.push(fileUrl);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (files.length > 0)\n\t\t\t\t\t\t\tobj = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.add(asset, files);\n\t\t\t\t\t} else if (typeof current === \"string\") {\n\t\t\t\t\t\tfileUrl = getFilePath(type, current);\n\t\t\t\t\t\tif (!isAsset(fileUrl) && isSupportedAudio(current) && !_core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.sounds[asset])\n\t\t\t\t\t\t\tobj = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.add(asset, fileUrl);\n\t\t\t\t\t}\n\t\t\t\t\t//extract actual audio obj if audio creation was successfull\n\t\t\t\t\tif (obj)\n\t\t\t\t\t\tobj = obj.obj;\n\n\t\t\t\t\t//addEventListener is supported on IE9 , Audio as well\n\t\t\t\t\tif (obj && obj.addEventListener)\n\t\t\t\t\t\tobj.addEventListener(\"canplaythrough\", pro, false);\n\t\t\t\t} else {\n\t\t\t\t\tasset = (type === \"sprites\" ? asset : current);\n\t\t\t\t\tfileUrl = getFilePath(type, asset);\n\t\t\t\t\tif (!isAsset(fileUrl) && isValidImage(asset)) {\n\t\t\t\t\t\tobj = new Image();\n\t\t\t\t\t\tif (type === \"sprites\")\n\t\t\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.sprite(current.tile, current.tileh, fileUrl, current.map,\n\t\t\t\t\t\t\t\tcurrent.paddingX, current.paddingY, current.paddingAroundBorder);\n\t\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.asset(fileUrl, obj);\n\t\t\t\t\t\tonImgLoad(obj, fileUrl);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (obj) {\n\t\t\t\t\tobj.onerror = err;\n\t\t\t\t} else {\n\t\t\t\t\terr.call({src: fileUrl});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we aren't trying to handle *any* of the files, that's as complete as it gets!\n\t\tif (total === 0 && oncomplete) oncomplete();\n\n\t},\n\t/**@\n     * #Qrafty.removeAssets\n     * @category Assets\n     * @kind Method\n     *\n     * @sign public void Qrafty.removeAssets(Object assets)\n     * @param data - Object JSON formatted (or JSON string), with assets to remove (accepts sounds, images and sprites)\n     *\n     * Removes assets (audio, images, sprites - and related sprite components) in order to allow the browser\n     * to free memory.\n     *\n     * Recieves a JSON fomatted object (or JSON string) containing 'audio', 'images' and/or 'sprites'\n     * properties with assets to be deleted. Follows a similar format as Qrafty.load 'data' argument. If\n     * you pass the exact same object passed to Qrafty.load, that will delete everything loaded that way.\n     * For sprites, if you want to keep some specific component, just don't pass that component's name in\n     * the sprite 'map'.\n     *\n     * Note that in order to remove the sprite components related to a given sprite, it's required to\n     * pass the 'map' property of that sprite, and although its own properties's values (the properties refer\n     * to sprite components) are not used in the removing process, omitting them will cause an error (since\n     * 'map' is an object, thus it's properties can NOT omitted - however, they can be null, or undefined).\n     * It will work as long as the 'map' objects' properties have any value. Or if you define 'map' itself\n     * as an array, like:\n     * \"map\": [ \"car\", \"truck\" ] instead of \"map\": { \"car\": [0,0], \"truck\": [0,1] }.\n     * This is examplified below (\"animals.png\" VS. \"vehicles.png\" sprites).\n     *\n     * @example\n     * ~~~\n     * var assetsToRemoveObj = {\n     *     \"audio\": {\n     *         \"beep\": [\"beep.wav\", \"beep.mp3\", \"beep.ogg\"],\n     *         \"boop\": \"boop.wav\"\n     *     },\n     *     \"images\": [\"badguy.bmp\", \"goodguy.png\"],\n     *     \"sprites\": {\n     *         \"animals.png\": {\n     *             \"map\": { \"ladybug\": [0,0], \"lazycat\": [0,1] },\n     *         },\n     *         \"vehicles.png\": {\n     *             \"map\": [ \"car\", \"truck\" ]\n     *         }\n     *     }\n     * }\n     *\n     * Qrafty.removeAssets(assetsToRemoveObj);\n     * ~~~\n     *\n     * @see Qrafty.load\n     */\n\tremoveAssets: function(data) {\n\n\t\tdata = (typeof data === \"string\" ? JSON.parse(data) : data);\n\n\t\tvar current, fileUrl, type, asset,\n\t\t\tpaths = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.paths(),\n\t\t\tgetFilePath = function(type,f) {\n\t\t\t\treturn (f.search(\"://\") === -1 ? (type === \"audio\" ? paths.audio + f : paths.images + f) : f);\n\t\t\t};\n\n\t\tfor (type in data) {\n\t\t\tfor (asset in data[type]) {\n\t\t\t\tif (!data[type].hasOwnProperty(asset))\n\t\t\t\t\tcontinue; // maintain compatibility to other frameworks while iterating array\n\n\t\t\t\tcurrent = data[type][asset];\n\n\t\t\t\tif (type === \"audio\") {\n\t\t\t\t\tif (typeof current === \"object\") {\n\t\t\t\t\t\tfor (var i in current) {\n\t\t\t\t\t\t\tfileUrl = getFilePath(type, current[i]);\n\t\t\t\t\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.asset(fileUrl))\n\t\t\t\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.remove(asset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (typeof current === \"string\") {\n\t\t\t\t\t\tfileUrl = getFilePath(type, current);\n\t\t\t\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.asset(fileUrl))\n\t\t\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.remove(asset);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tasset = (type === \"sprites\" ? asset : current);\n\t\t\t\t\tfileUrl = getFilePath(type, asset);\n\t\t\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.asset(fileUrl)) {\n\t\t\t\t\t\tif (type === \"sprites\")\n\t\t\t\t\t\t\tfor (var comp in current.map)\n\t\t\t\t\t\t\t\tdelete _core_core__WEBPACK_IMPORTED_MODULE_0__.default.components()[comp];\n\t\t\t\t\t\tdelete _core_core__WEBPACK_IMPORTED_MODULE_0__.default.assets[fileUrl];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/core/loader.js?");

/***/ }),

/***/ "./src/core/model.js":
/*!***************************!*\
  !*** ./src/core/model.js ***!
  \***************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #Model\n * @category Model\n * @kind Component\n * \n * Model is a component that offers new features for isolating business\n * logic in your application. It offers default values, dirty values,\n * and deep events on your data.\n *\n * All data should be accessed via the appropriate methods `.get`, `.set`,\n * and `.data` for the proper events to be triggered. It is not encouraged\n * to access them directly.\n *\n * Dirty values make it simple to inspect a model and see what values have changed.\n *\n * Deep events allow you to bind to specific fields, like `name` or even deep fields\n * like `contact.email` and get notified when those specific fields are updated.\n *\n * @trigger Change - When any data on the model has changed.\n * @trigger Change[key] - When the specific key on the model has changed.\n * @trigger Change[key.key] - The nested key value has changed.\n * @example\n * ~~~\n * Qrafty.c('Person', {\n *   name: 'Fox',\n *   init: function() { this.requires('Model'); }\n * });\n * person = Qrafty.e('Person').attr({name: 'blaine'});\n * person.bind('Change[name]', function() {\n *   Qrafty.log('name changed!');\n * });\n * person.attr('name', 'blainesch'); // Triggers event\n * person.is_dirty('name'); // true\n * person.changed // name\n * ~~~\n */\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Model\", {\n\tinit: function() {\n\t\tthis.changed = [];\n\t\tthis.bind(\"Change\", this._changed_attributes);\n\t\tthis.bind(\"Change\", this._changed_triggers);\n\t},\n\n\t/**\n   * Fires more specific `Change` events.\n   *\n   * For instance a `Change[name]` may get fired when you\n   * update the name data attribute on the model.\n   */\n\t_changed_triggers: function(data, options) {\n\t\tvar key;\n\t\toptions = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call({pre: \"\"}, options);\n\t\tfor (key in data) {\n\t\t\tthis.trigger(\"Change[\" + options.pre + key + \"]\", data[key]);\n\t\t\tif (data[key].constructor === Object) {\n\t\t\t\tthis._changed_triggers(data[key], {\n\t\t\t\t\tpre: options.pre + key + \".\"\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n   * Pushes all top-levle changed attribute names to the\n   * changed array.\n   */\n\t_changed_attributes: function(data) {\n\t\tvar key;\n\t\tfor (key in data) {\n\t\t\tthis.changed.push(key);\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**@\n   * #.is_dirty\n   * @comp Model\n   * @kind Method\n   * \n   * Helps determine when data or the entire component is \"dirty\" or has changed attributes.\n   *\n   * @example\n   * ~~~\n   * person = Qrafty.e('Person').attr({name: 'Fox', age: 24})\n   * person.is_dirty() // false\n   * person.is_dirty('name') // false\n   *\n   * person.attr('name', 'Lucky');\n   * person.is_dirty(); // true\n   * person.is_dirty('name'); // true\n   * person.is_dirty('age'); // false\n   * person.changed; // ['name']\n   * ~~~\n   */\n\tis_dirty: function(key) {\n\t\tif (arguments.length === 0) {\n\t\t\treturn !!this.changed.length;\n\t\t} else {\n\t\t\treturn this.changed.indexOf(key) > -1;\n\t\t}\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/core/model.js?");

/***/ }),

/***/ "./src/core/resolver/components.js":
/*!*****************************************!*\
  !*** ./src/core/resolver/components.js ***!
  \*****************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* export default binding */ __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core */ \"./src/core/core.js\");\n;\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(args = [], actual = false) {\n\t\n\tlet components = [...args];\n\tif (args.length === 1 && args[0].indexOf(\",\") !== -1) {\n\t\tcomponents = args[0].split(/\\s*,\\s*/);\n\t}\n\t\n\tif (actual) return components.map(name => _core__WEBPACK_IMPORTED_MODULE_0__.default.c(name));\n\treturn components;\n}\n\n\n//# sourceURL=webpack://qrafty-v2/./src/core/resolver/components.js?");

/***/ }),

/***/ "./src/core/resolver/index.js":
/*!************************************!*\
  !*** ./src/core/resolver/index.js ***!
  \************************************/
/*! namespace exports */
/*! export components [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"components\": () => /* binding */ components\n/* harmony export */ });\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components */ \"./src/core/resolver/components.js\");\n;\n\nconst components = Object.freeze(_components__WEBPACK_IMPORTED_MODULE_0__.default);\n\n//# sourceURL=webpack://qrafty-v2/./src/core/resolver/index.js?");

/***/ }),

/***/ "./src/core/scenes.js":
/*!****************************!*\
  !*** ./src/core/scenes.js ***!
  \****************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.defaultOptions.settings, {\n\tfindScenes: false\n});\t\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t_scenes: new Map(),\n\t_current: null,\n     \n\tcleanupScene: async function () {\n\t\tif (this._current === null) return;\n          \n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"SceneDestroy\", {newScene: name});\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.reset();\n\n\t\t(0,_core_core__WEBPACK_IMPORTED_MODULE_0__.default)(\"2D\").each(function () {\n\t\t\tif (!this.has(\"Persist\")) this.destroy();\n\t\t});\n          \n\t\tconst scene = await this.findScene(this._current, false);\n\t\tif ({}.hasOwnProperty.call(scene, \"uninitialize\")) {\n\t\t\tscene[\"uninitialize\"].call(this);\n\t\t}\n\t},\n\n\tscene: async function () {\n\t\tif (arguments.length === 1) return _core_core__WEBPACK_IMPORTED_MODULE_0__.default.enterScene(arguments[0], arguments[1]);\n\t\treturn this.defineScene.apply(this, arguments);\n\t},\n\n\tdefineScene: async function (name, scene){\n\t\tlet {initialize, uninitialize} = scene;\n\n\t\t// support for old variant of arguments.\n\t\t// -> defineScene(name, initialize, uninitialize)\n\t\tif (typeof scene === \"function\") initialize = scene;\n\t\tif (typeof arguments[2] === \"function\") uninitialize = arguments[2];\n\n\t\t// throw errors for cases where arguments aren't what they should be.\n\t\tif (!name || !scene) throw new Error(\"scene name or definition cannot be undefined\");\n\t\tif (typeof initialize !== \"function\") throw new Error(\"scene initialize function is the wrong type\");\n\t\tif (uninitialize && typeof uninitialize !== \"function\") throw new Error(\"scene uninitialize function is the wrong type\");\n\n\t\tthis.debug(`defineScene: \"${name}\"`, scene);\n\t\tthis._scenes.set(name, scene);\n\t},\n\n\tenterScene: async function (name, data){\n\t\tif (typeof data === \"function\") throw new Error(\"scene data cannot be a function\");\n            \n\t\tthis.cleanupScene();\n\t\tlet oldScene = this._current;\n\t\tthis._current = name;\n               \n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"SceneChange\", {oldScene: oldScene, newScene: name});\n\t\tthis.debug(`enterScene: \"${name}\"`, data);\n\t\treturn (await this.findScene(name))[\"initialize\"].call(this, data);\n\t},\n\n\tfindScene: async function (name, lookup = true) {\n\t\tif (lookup && !this._scenes.has(name)) {\n\t\t\tconst findDynamicObject = this.functions.get(\"findDynamicObject\");\n\t\t\tif (this.settings.get(\"findScenes\") && findDynamicObject) {\n\t\t\t\tlet scene = await findDynamicObject({name, type: \"scene\"}).catch((e) => {\n\t\t\t\t\tthis.debug(\"findScene: findDynamicObject threw error:\", e);\n\t\t\t\t\tthrow new Error(`the scene \"${name}\" does not exist`);\n\t\t\t\t});\n\n\t\t\t\tthis.debug(`findScene: \"${name}\" (dynamically imported)`);\n\n\t\t\t\tscene.__dynamic = true;\n\t\t\t\tawait this.defineScene(name, scene);\n\t\t\t}\n\n\t\t\tif (!this._scenes.has(name)) throw new Error(`the scene \"${name}\" does not exist`);\n\t\t}\n\n\t\treturn this._scenes.get(name);\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/core/scenes.js?");

/***/ }),

/***/ "./src/core/storage.js":
/*!*****************************!*\
  !*** ./src/core/storage.js ***!
  \*****************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\nlet storage = localStorage;\n\n/**@\n * #Storage\n * @category Utilities\n * @kind Property\n * \n * Very simple way to get and set values, which will persist when the browser is closed also.\n * Storage wraps around HTML5 Web Storage, which is well-supported across browsers and platforms, but limited to 5MB total storage per domain.\n * Storage is also available for node, which is permanently persisted to the `./localStorage` folder - take care of removing entries. Note that multiple Qrafty instances use the same storage, so care has to be taken not to overwrite existing entries.\n */\n/**@\n * #Qrafty.storage\n * @comp Storage\n * @kind Method\n * \n * @sign Qrafty.storage(String key)\n * @param key - a key you would like to get from the storage. \n * @returns The stored value, or `null` if none saved under that key exists\n *\n * @sign Qrafty.storage(String key, String value)\n * @param key - the key you would like to save the data under.\n * @param value - the value you would like to save.\n *\n * @sign Qrafty.storage(String key, [Object value, Array value, Boolean value])\n * @param key - the key you would like to save the data under.\n * @param value - the value you would like to save, can be an Object or an Array.\n *\n * `Qrafty.storage` is used synchronously to either get or set values. \n *\n * You can store booleans, strings, objects and arrays.\n *\n * @note Because the underlying method is synchronous, it can cause slowdowns if used frequently during gameplay.\n * You should aim to load or save data at reasonable times such as on level load,\n * or in response to specific user actions.\n *\n * @note If used in a cross-domain context, the localStorage might not be accessible.\n *\n * @example\n * Get an already stored value\n * ~~~\n * var playername = Qrafty.storage('playername');\n * ~~~\n *\n * @example\n * Save a value\n * ~~~\n * Qrafty.storage('playername', 'Hero');\n * ~~~\n *\n * @example\n * Test to see if a value is already there.\n * ~~~\n * var heroname = Qrafty.storage('name');\n * if(!heroname){\n *   // Maybe ask the player what their name is here\n *   heroname = 'Guest';\n * }\n * // Do something with heroname\n * ~~~\n */\n\nvar store = function(key, value) {\n\tvar _value = value;\n\n\tif(!storage) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.error(\"Local storage is not accessible.  (Perhaps you are including crafty.js cross-domain?)\");\n\t\treturn false;\n\t}\n\n\tif(arguments.length === 1) {\n\t\ttry {\n\t\t\treturn JSON.parse(storage.getItem(key));\n\t\t}\n\t\tcatch (e) {\n\t\t\treturn storage.getItem(key);\n\t\t}\n\t} else {\n\t\tif(typeof value === \"object\") {\n\t\t\t_value = JSON.stringify(value);\n\t\t}\n\n\t\tstorage.setItem(key, _value);\n    \n\t}\n\n};\n/**@\n * #Qrafty.storage.remove\n * @comp Storage\n * @kind Method\n * \n * @sign Qrafty.storage.remove(String key)\n * @param key - a key where you will like to delete the value of.\n *\n * Generally you do not need to remove values from localStorage, but if you do\n * store large amount of text, or want to unset something you can do that with\n * this function.\n *\n * @example\n * Get an already stored value\n * ~~~\n * Qrafty.storage.remove('playername');\n * ~~~\n *\n */\nstore.remove = function(key) {\n\tif(!storage){\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.error(\"Local storage is not accessible.  (Perhaps you are including crafty.js cross-domain?)\");\n\t\treturn;\n\t}\n\tstorage.removeItem(key);\n};\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.storage = store;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (store);\n\n//# sourceURL=webpack://qrafty-v2/./src/core/storage.js?");

/***/ }),

/***/ "./src/core/systems.js":
/*!*****************************!*\
  !*** ./src/core/systems.js ***!
  \*****************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n\n// Dictionary of existing systems\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default._systems = {};\n\n/**@\n * #Qrafty.s\n * @category Core\n * @kind Method\n *\n * Registers a system.\n *\n * @trigger SystemLoaded - When the system has initialized itself - obj - system object\n * @trigger SystemDestroyed - Right before the system is destroyed - obj - system object\n *\n * @sign void Qrafty.s(String name, Obj template[, Obj options][, Boolean lazy])\n * Register a system\n * @param name - The name of the system\n * @param template - an object whose methods and properties will be copied to the new system\n * @param options - an object whose properties will be deep copied to the new system's options property\n * @param lazy - a flag that indicates whether the system should be initialized right away or the first time it is referenced\n *\n * @sign System Qrafty.s(String name)\n * Access the named system\n * @param name - The system to return\n * @returns The referenced system.  If the system has not been initialized, it will be before it is returned.\n *\n * Objects which handle entities might want to subscribe to the event system without being entities themselves.\n * When you declare a system with a template object, all the methods and properties of that template are copied to a new object.\n * This new system will automatically have the following event related methods, which function like those of components:\n * `.bind()`, `unbind()`, `trigger()`, `one()`, `uniqueBind()`, `destroy()`.\n * Much like components, you can also provide `init()` and `remove()` methods,\n * a `properties` dictionary which will be used to define properties with Object.defineProperty,\n * as well as an `events` parameter for automatically binding to events.\n *\n * @note The `init()` method is for setting up the internal state of the system,\n * if you create entities in it that then reference the system, that'll create an infinite loop.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s = function(name, obj, options, lazy) {\n\tif (obj) {\n\t\tif (typeof options === \"boolean\") {\n\t\t\tlazy = options;\n\t\t\toptions = null;\n\t\t}\n\t\tif (lazy === false) {\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default._systems[name] = new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.QraftySystem(name, obj, options);\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"SystemLoaded\", name);\n\t\t} else {\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default._registerLazySystem(name, obj, options);\n\t\t}\n\t} else {\n\t\treturn _core_core__WEBPACK_IMPORTED_MODULE_0__.default._systems[name];\n\t}\n};\n\nfunction optionMerge(defaults, specific){\n\tvar options = {};\n\t// Copy all the specified keys, then all the default keys that aren't specified\n\tfor (var key in specific) {\n\t\toptions[key] = specific[key];\n\t}\n\tfor (key in defaults) {\n\t\tif (!(key in specific)) {\n\t\t\toptions[key] = defaults[key];\n\t\t}\n\t} \n\treturn options;\n}\n\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default._registerLazySystem = function(name, obj, options) {\n\t// This is a bit of magic to only init a system if it's requested at least once.\n\t// We define a getter for _systems[name] that will first initialize the system, \n\t// and then redefine _systems[name] to remove that getter.\n\tObject.defineProperty(_core_core__WEBPACK_IMPORTED_MODULE_0__.default._systems, name, {\n\t\tget: function() {\n\t\t\tObject.defineProperty(_core_core__WEBPACK_IMPORTED_MODULE_0__.default._systems, name, {\n\t\t\t\tvalue: new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.QraftySystem(name, obj, options),\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true\n\t\t\t});\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"SystemLoaded\", name);\n\t\t\treturn _core_core__WEBPACK_IMPORTED_MODULE_0__.default._systems[name];\n\t\t},\n\t\tconfigurable: true\n\t});\n\n};\n\n// Each system has its properties and methods copied onto an object of this type\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.QraftySystem = (function() {\n\tvar systemID = 1;\n\treturn function(name, template, options) {\n\t\tthis.name = name;\n\t\tif (!template) return this;\n\t\tthis._systemTemplate = template;\n\t\tthis.extend(template);\n        \n\t\t// Overwrite any default options with the passed options object\n\t\t// This does a deep copy on the objects, and treats null as a specified value\n\t\tthis.options = optionMerge(this.options, options);\n\n\t\t// Add the \"low leveL\" callback methods\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default._addCallbackMethods(this);\n\n\t\t// Give this object a global ID.  Used for event handlers.\n\t\tthis[0] = \"system\" + (systemID++);\n\n\t\t// Define properties\n\t\tif (\"properties\" in template) {\n\t\t\tvar props = template.properties;\n\t\t\tfor (var propertyName in props) {\n\t\t\t\tObject.defineProperty(this, propertyName, props[propertyName]);\n\t\t\t}\n\t\t}\n\t\t// If an events object is provided, bind the listed event handlers\n\t\tif (\"events\" in template) {\n\t\t\tvar auto = template.events;\n\t\t\tfor (var eventName in auto) {\n\t\t\t\tvar fn = typeof auto[eventName] === \"function\" ? auto[eventName] : template[auto[eventName]];\n\t\t\t\tthis.bind(eventName, fn);\n\t\t\t}\n\t\t}\n\t\t// Run any instantiation code\n\t\tif (typeof this.init === \"function\") {\n\t\t\tthis.init(name);\n\t\t}\n\t};\n})();\n\n\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.QraftySystem.prototype = {\n\textend: function(obj) {\n\t\t// Copy properties and methods of obj\n\t\tfor (var key in obj) {\n\t\t\tif (typeof this[key] === \"undefined\") {\n\t\t\t\tthis[key] = obj[key];\n\t\t\t}\n\t\t}\n\t},\n\n\t// Event methods\n\tbind: function(event, callback) {\n\t\tthis._bindCallback(event, callback);\n\t\treturn this;\n\t},\n\n\ttrigger: function(event, data) {\n\t\tthis._runCallbacks(event, data);\n\t\treturn this;\n\t},\n\n\tunbind: function(event, callback) {\n\t\tthis._unbindCallbacks(event, callback);\n\t\treturn this;\n\t},\n\n\tone: function(event, callback) {\n\t\tvar self = this;\n\t\tvar oneHandler = function(data) {\n\t\t\tcallback.call(self, data);\n\t\t\tself.unbind(event, oneHandler);\n\t\t};\n\t\treturn self.bind(event, oneHandler);\n\t},\n\n\tuniqueBind: function(event, callback) {\n\t\tthis.unbind(event, callback);\n\t\treturn this.bind(event, callback);\n\t},\n\n\tdestroy: function() {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"SystemDestroyed\", this);\n\t\t// Check the template itself\n\t\tif (typeof this.remove === \"function\") {\n\t\t\tthis.remove();\n\t\t}\n\t\tthis._unbindAll();\n\t\tdelete _core_core__WEBPACK_IMPORTED_MODULE_0__.default._systems[this.name];\n\t}\n\n};\n\n//# sourceURL=webpack://qrafty-v2/./src/core/systems.js?");

/***/ }),

/***/ "./src/core/time.js":
/*!**************************!*\
  !*** ./src/core/time.js ***!
  \**************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core */ \"./src/core/core.js\");\n;\n\n/**@\n * #Delay\n * @category Utilities\n * @kind Component\n *\n * A component for triggering functions after a given amount of time.\n *\n * This syncs with Qrafty's internal clock, and so should generally be preferred to using methods such as `setTimeout`.\n */\n_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Delay\", {\n\t/**@\n     * #.delaySpeed\n     * @comp Delay\n     *\n     * The rate of the delay. This property defaults to 1.\n     * When setting delaySpeed to 0.5, delays will take twice as long,\n     * setting it to 2.0 will make them twice as short\n     */\n\tdelaySpeed: 1,\n\n\tinit: function () {\n\t\tthis._delays = [];\n\t\tthis._delaysPaused = false;\n\t\tthis.bind(\"UpdateFrame\", function (frameData) {\n\t\t\tif (this._delaysPaused) return;\n\t\t\tvar index = this._delays.length;\n\t\t\twhile (--index >= 0) {\n\t\t\t\tvar item = this._delays[index];\n\t\t\t\tif (item === false) {\n\t\t\t\t\t// remove canceled item from array\n\t\t\t\t\tthis._delays.splice(index, 1);\n\t\t\t\t} else {\n\t\t\t\t\titem.accumulator += frameData.dt * this.delaySpeed;\n\t\t\t\t\t// The while loop handles the (pathological) case where dt>delay\n\t\t\t\t\twhile(item.accumulator >= item.delay && item.repeat >= 0){\n\t\t\t\t\t\titem.accumulator -= item.delay;\n\t\t\t\t\t\titem.repeat--;\n\t\t\t\t\t\titem.callback.call(this);\n\t\t\t\t\t}\n\t\t\t\t\t// remove finished item from array\n\t\t\t\t\tif (item.repeat<0){\n\t\t\t\t\t\tthis._delays.splice(index, 1);\n\t\t\t\t\t\tif(typeof item.callbackOff === \"function\")\n\t\t\t\t\t\t\titem.callbackOff.call(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t},\n\t/**@\n     * #.delay\n     * @comp Delay\n     * @kind Method\n     * @sign public this.delay(Function callback, Number delay[, Number repeat[, Function callbackOff]])\n     * @param callback - Method to execute after given amount of milliseconds. If reference of a\n     * method is passed, there's possibility to cancel the delay.\n     * @param delay - Amount of milliseconds to execute the method.\n     * @param repeat - (optional) How often to repeat the delayed function. A value of 0 triggers the delayed\n     * function exactly once. A value n > 0 triggers the delayed function exactly n+1 times. A\n     * value of -1 triggers the delayed function indefinitely. Defaults to one execution.\n     * @param callbackOff - (optional) Method to execute after delay ends(after all iterations are executed). \n     * If repeat value equals -1, callbackOff will never be triggered.\n     *\n     * The delay method will execute a function after a given amount of time in milliseconds.\n     *\n     * It is not a wrapper for `setTimeout`.\n     *\n     * If Qrafty is paused, the delay is interrupted with the pause and then resume when unpaused\n     *\n     * If the entity is destroyed, the delay is also destroyed and will not have effect.\n     *\n     * @example\n     *\n     * The simplest delay\n     * ~~~\n     * Qrafty.log(\"start\");\n     * Qrafty.e(\"Delay\").delay(function() {\n     *   Qrafty.log(\"100ms later\");\n     * }, 100, 0);\n     * ~~~\n     *\n     * Delay with callbackOff to be executed after all delay iterations\n     * ~~~\n     * Qrafty.log(\"start\");\n     * Qrafty.e(\"Delay\").delay(function() {\n     *   Qrafty.log(\"100ms later\");\n     * }, 100, 3, function() {\n     *   Qrafty.log(\"delay finished\");\n     * });\n     * ~~~\n     *\n     */\n\tdelay: function (callback, delay, repeat, callbackOff) {\n\t\tthis._delays.push({\n\t\t\taccumulator: 0,\n\t\t\tcallback: callback,\n\t\t\tcallbackOff: callbackOff,\n\t\t\tdelay: delay,\n\t\t\trepeat: (repeat < 0 ? Infinity : repeat) || 0,\n\t\t});\n\t\treturn this;\n\t},\n\t/**@\n     * #.cancelDelay\n     * @comp Delay\n     * @kind Method\n     * \n     * @sign public this.cancelDelay(Function callback)\n     * @param callback - Method reference passed to .delay\n     *\n     * The cancelDelay method will cancel a delay set previously.\n     *\n     * @example\n     * ~~~\n     * var doSomething = function(){\n     *   Qrafty.log(\"doing something\");\n     * };\n     *\n     * // execute doSomething each 100 miliseconds indefinetely\n     * var ent = Qrafty.e(\"Delay\").delay(doSomething, 100, -1);\n     *\n     * // and some time later, cancel further execution of doSomething\n     * ent.cancelDelay(doSomething);\n     * ~~~\n     */\n\tcancelDelay: function (callback) {\n\t\tvar index = this._delays.length;\n\t\twhile (--index >= 0) {\n\t\t\tvar item = this._delays[index];\n\t\t\tif(item && item.callback === callback){\n\t\t\t\tthis._delays[index] = false;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\t/**@\n     * #.pauseDelays\n     * @comp Delay\n     * @kind Method\n     * \n     * @sign public this.pauseDelays()\n     *\n     * The pauseDelays method will pause all delays of this\n     * entity until resumed.\n     *\n     * @example\n     * ~~~\n     * var doSomething = function(){\n     *   Qrafty.log(\"doing something\");\n     * };\n     *\n     * // execute doSomething each 100 miliseconds indefinetely\n     * var ent = Qrafty.e(\"Delay\").delay(doSomething, 100, -1);\n     *\n     * // and some time later, the gameplay is paused\n     * ent.pauseDelays();\n     * ~~~\n     */\n\tpauseDelays: function() {\n\t\tthis._delaysPaused = true;\n\t},\n\t/**@\n     * #.resumeDelays\n     * @comp Delay\n     * @kind Method\n     * \n     * @sign public this.resumeDelays()\n     *\n     * The resumeDelays method will resume earlier paused delays for this\n     * entity\n     *\n     * @example\n     * ~~~\n     * var doSomething = function(){\n     *   Qrafty.log(\"doing something\");\n     * };\n     *\n     * // execute doSomething each 100 miliseconds indefinetely\n     * var ent = Qrafty.e(\"Delay\").delay(doSomething, 100, -1);\n     *\n     * // and some time later, the gameplay is paused (or only\n     * // a part of it is frozen)\n     * ent.pauseDelays();\n     *\n     * // the player resumes gameplay\n     * ent.resumeDelays();\n     * ~~~\n     */\n\tresumeDelays: function() {\n\t\tthis._delaysPaused = false;\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/core/time.js?");

/***/ }),

/***/ "./src/core/tween.js":
/*!***************************!*\
  !*** ./src/core/tween.js ***!
  \***************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #Tween\n * @category Animation\n * @kind Component\n * \n * @trigger TweenEnd - when a tween finishes - Object - an object containing the properties that finished tweening\n *\n * Component to animate the change in 2D properties over time.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Tween\", {\n\n\t/**@\n   * #.tweenSpeed\n   * @comp Tween\n   *\n   * The rate of the tween. This property defaults to 1.\n   * When setting tweenSpeed to 0.5, tweens will take twice as long,\n   * setting it to 2.0 will make them twice as short\n   */\n\ttweenSpeed: 1,\n\n\tinit: function(){\n\t\tthis.tweenGroup = {};\n\t\tthis.tweenStart = {};\n\t\tthis.tweens = [];\n\t\tthis.uniqueBind(\"UpdateFrame\", this._tweenTick);\n\n\t},\n\n\t_tweenTick: function(frameData){\n\t\tvar tween, v, i;\n\t\tfor ( i = this.tweens.length-1; i>=0; i--){\n\t\t\ttween = this.tweens[i];\n\t\t\ttween.easing.tick(frameData.dt * this.tweenSpeed);\n\t\t\tv  = tween.easing.value();\n\t\t\tthis._doTween(tween.props, v);\n\t\t\tif (tween.easing.complete) {\n\t\t\t\tthis.tweens.splice(i, 1);\n\t\t\t\tthis._endTween(tween.props);\n\t\t\t}\n\t\t}\n\t},\n\n\t_doTween: function(props, v){\n\t\tfor (var name in props)\n\t\t\tthis[name] = (1-v) * this.tweenStart[name] + v * props[name];\n\n\t},\n\n\n\n\t/**@\n  * #.tween\n  * @comp Tween\n  * @kind Method\n  *\n  * @sign public this .tween(Object properties, Number duration[, String|function easingFn])\n  * @param properties - Object of numeric properties and what they should animate to\n  * @param duration - Duration to animate the properties over, in milliseconds.\n  * @param easingFn - A string or custom function specifying an easing.  (Defaults to linear behavior.)  See Qrafty.easing for more information.\n  *\n  * This method will animate numeric properties over the specified duration.\n  * These include `x`, `y`, `w`, `h`, `alpha` and `rotation`.\n  *\n  * The object passed should have the properties as keys and the value should be the resulting\n  * values of the properties.  The passed object might be modified if later calls to tween animate the same properties.\n  *\n  * @example\n  * Move an object to 100,100 and fade out over 200 ms.\n  * ~~~\n  * Qrafty.e(\"2D, Tween\")\n  *    .attr({alpha: 1.0, x: 0, y: 0})\n  *    .tween({alpha: 0.0, x: 100, y: 100}, 200)\n  * ~~~\n  * @example\n  * Rotate an object over 2 seconds, using the \"smootherStep\" easing function.\n  * ~~~\n  * Qrafty.e(\"2D, Tween\")\n  *    .attr({rotation:0})\n  *    .tween({rotation:180}, 2000, \"smootherStep\")\n  * ~~~\n  *\n  * @see Qrafty.easing\n  *\n  */\n\ttween: function (props, duration, easingFn) {\n\n\t\tvar tween = {\n\t\t\tprops: props,\n\t\t\teasing: new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.easing(duration, easingFn)\n\t\t};\n\n\t\t// Tweens are grouped together by the original function call.\n\t\t// Individual properties must belong to only a single group\n\t\t// When a new tween starts, if it already belongs to a group, move it to the new one\n\t\t// Record the group it currently belongs to, as well as its starting coordinate.\n\t\tfor (var propname in props){\n\t\t\tif (typeof this.tweenGroup[propname] !== \"undefined\")\n\t\t\t\tthis.cancelTween(propname);\n\t\t\tthis.tweenStart[propname] = this[propname];\n\t\t\tthis.tweenGroup[propname] = props;\n\t\t}\n\t\tthis.tweens.push(tween);\n\n\t\treturn this;\n\n\t},\n\n\t/**@\n  * #.cancelTween\n  * @comp Tween\n  * @kind Method\n  *\n  * @sign public this .cancelTween(String target)\n  * @param target - The property to cancel\n  *\n  * @sign public this .cancelTween(Object target)\n  * @param target - An object containing the properties to cancel.\n  *\n  * Stops tweening the specified property or properties.\n  * Passing the object used to start the tween might be a typical use of the second signature.\n  */\n\tcancelTween: function(target){\n\t\tif (typeof target === \"string\"){\n\t\t\tif (typeof this.tweenGroup[target] === \"object\" )\n\t\t\t\tdelete this.tweenGroup[target][target];\n\t\t} else if (typeof target === \"object\") {\n\t\t\tfor (var propname in target)\n\t\t\t\tthis.cancelTween(propname);\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t/**@\n  * #.pauseTweens\n  * @comp Tween\n  * @kind Method\n  *\n  * @sign public this .pauseTweens()\n  *\n  * Pauses all tweens associated with the entity\n  */\n\tpauseTweens: function(){\n\t\tthis.tweens.map(function(e){e.easing.pause();});\n\t},\n\n\t/**@\n  * #.resumeTweens\n  * @comp Tween\n  * @kind Method\n  *\n  * @sign public this .resumeTweens()\n  *\n  * Resumes all paused tweens associated with the entity\n  */\n\tresumeTweens: function(){\n\t\tthis.tweens.map(function(e){e.easing.resume();});\n\t},\n\n\t/*\n  * Stops tweening the specified group of properties, and fires the \"TweenEnd\" event.\n  */\n\t_endTween: function(properties){\n\t\tvar notEmpty = false;\n\t\tfor (var propname in properties){\n\t\t\tnotEmpty = true;\n\t\t\tdelete this.tweenGroup[propname];\n\t\t}\n\t\tif (notEmpty) this.trigger(\"TweenEnd\", properties);\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/core/tween.js?");

/***/ }),

/***/ "./src/core/version.js":
/*!*****************************!*\
  !*** ./src/core/version.js ***!
  \*****************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"4\");\n\n//# sourceURL=webpack://qrafty-v2/./src/core/version.js?");

/***/ }),

/***/ "./src/debug/debug-layer.js":
/*!**********************************!*\
  !*** ./src/debug/debug-layer.js ***!
  \**********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\nconst document = window.document;\n\n/**@\n * #DebugCanvas\n * @category Debug\n * @kind Component\n * \n * @trigger DebugDraw - when the entity is ready to be drawn to the stage\n * @trigger NoCanvas - if the browser does not support canvas\n *\n * When this component is added to an entity it will be drawn by the DebugCanvas layer.\n *\n * Qrafty.debugCanvas.init() will be automatically called if it is not called already to initialize the canvas element.\n *\n * To visualise an object's MBR, use \"WiredMBR\" or \"SolidMBR\".\n * To visualise a \"Collision\" object's hitbox, use \"WiredHitBox\" or \"SolidHitBox\".\n * To visualize an entity's click area, use \"WiredAreaMap\" or \"SolidAreaMap\".\n *\n * @see DebugPolygon,  DebugRectangle\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"DebugCanvas\", {\n\tinit: function () {\n\t\tthis.requires(\"2D\");\n\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas.context)\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas.init();\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas.add(this);\n\t\tthis._debug = {\n\t\t\talpha: 1.0,\n\t\t\tlineWidth: 1\n\t\t};\n\t\tthis.bind(\"RemoveComponent\", this.onDebugRemove);\n\t\tthis.bind(\"Remove\", this.onDebugDestroy);\n\t},\n\n\t// When component is removed\n\tonDebugRemove: function (id) {\n\t\tif (id === \"DebugCanvas\") {\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas.remove(this);\n\t\t}\n\t},\n\n\t//When entity is destroyed\n\tonDebugDestroy: function (id) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas.remove(this);\n\t},\n\n\t/**@\n     * #.debugAlpha\n     * @comp DebugCanvas\n     * @kind Method\n     * \n     * @sign public  .debugAlpha(Number alpha)\n     * @param alpha - The alpha level the component will be drawn with\n     */\n\tdebugAlpha: function (alpha) {\n\t\tthis._debug.alpha = alpha;\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.debugFill\n     * @comp DebugCanvas\n     * @kind Method\n     * \n     * @sign public  .debugFill([String fillStyle])\n     * @param fillStyle - The color the component will be filled with.  Defaults to \"red\". Pass the boolean false to turn off filling.\n     * @example\n     * ~~~\n     * var myEntity = Qrafty.e(\"2D, Collision, SolidHitBox \").debugFill(\"purple\")\n     * ~~~\n     */\n\tdebugFill: function (fillStyle) {\n\t\tif (typeof fillStyle === \"undefined\")\n\t\t\tfillStyle = \"red\";\n\t\tthis._debug.fillStyle = fillStyle;\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.debugStroke\n     * @comp DebugCanvas\n     * @kind Method\n     * \n     * @sign public  .debugStroke([String strokeStyle])\n     * @param strokeStyle - The color the component will be outlined with.  Defaults to \"red\".  Pass the boolean false to turn this off.\n     * @example\n     * ~~~\n     * var myEntity = Qrafty.e(\"2D, Collision, WiredHitBox \").debugStroke(\"white\")\n     * ~~~\n     */\n\tdebugStroke: function (strokeStyle) {\n\t\tif (typeof strokeStyle === \"undefined\")\n\t\t\tstrokeStyle = \"red\";\n\t\tthis._debug.strokeStyle = strokeStyle;\n\t\treturn this;\n\t},\n\n\tdebugDraw: function (ctx) {\n\t\tvar ga = ctx.globalAlpha;\n\t\tvar props = this._debug;\n\n\t\tif (props.alpha)\n\t\t\tctx.globalAlpha = this._debug.alpha;\n\n\t\tif (props.strokeStyle)\n\t\t\tctx.strokeStyle = props.strokeStyle;\n\n\t\tif (props.lineWidth)\n\t\t\tctx.lineWidth = props.lineWidth;\n\n\t\tif (props.fillStyle)\n\t\t\tctx.fillStyle = props.fillStyle;\n\n\t\tthis.trigger(\"DebugDraw\", ctx);\n\n\t\tctx.globalAlpha = ga;\n\n\t}\n\n\n});\n\n\n\n/**@\n * #DebugRectangle\n * @category Debug\n * @kind Component\n *\n * A component for rendering an object with a position and dimensions to the debug canvas.\n *\n *\n * ~~~\n * var myEntity = Qrafty.e(\"2D, DebugRectangle\")\n *                      .attr({x: 13, y: 37, w: 42, h: 42})\n *                      .debugStroke(\"green\");\n * myEntity.debugRectangle(myEntity)\n *~~~\n * @see DebugCanvas\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"DebugRectangle\", {\n\tinit: function () {\n\t\tthis.requires(\"2D, DebugCanvas\");\n\t},\n\n\t/**@\n     * #.debugRectangle\n     * @comp DebugRectangle\n     * @kind Method\n     * \n     * @sign public  .debugRectangle(Object rect)\n     * @param rect - an object with _x, _y, _w, and _h to draw\n     *\n     * Sets the rectangle that this component draws to the debug canvas.\n     *\n     */\n\tdebugRectangle: function (rect) {\n\t\tthis.debugRect = rect;\n\t\tthis.unbind(\"DebugDraw\", this.drawDebugRect);\n\t\tthis.bind(\"DebugDraw\", this.drawDebugRect);\n\t\treturn this;\n\n\t},\n\n\tdrawDebugRect: function (ctx) {\n\n\t\tvar rect = this.debugRect;\n\t\tif (rect === null || rect === undefined)\n\t\t\treturn;\n\t\tif (rect._h && rect._w) {\n\t\t\tif (this._debug.fillStyle)\n\t\t\t\tctx.fillRect(rect._x, rect._y, rect._w, rect._h);\n\t\t\tif (this._debug.strokeStyle)\n\t\t\t\tctx.strokeRect(rect._x, rect._y, rect._w, rect._h);\n\t\t}\n\n\t}\n\n\n\n});\n\n\n/**@\n * #WiredMBR\n * @category Debug\n * @kind Component\n *\n * Adding this component to an entity will cause its MBR to be drawn to the debug canvas as an outline.\n *\n * The methods of DebugCanvas can be used to control this component's appearance.\n *\n * @see 2D, DebugRectangle, DebugCanvas\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"WiredMBR\", {\n\tinit: function () {\n\t\tthis.requires(\"DebugRectangle\")\n\t\t\t.debugStroke(\"purple\");\n\t},\n\n\tevents: {\n\t\t\"PreRender\": function () {\n\t\t\t// Internal method for updating the MBR drawn.\n\t\t\tthis.debugRectangle(this._mbr || this);\n\t\t}\n\t}\n});\n\n\n/**@\n * #SolidMBR\n * @category Debug\n * @kind Component\n *\n * Adding this component to an entity will cause its MBR to be drawn to the debug canvas.\n *\n * The methods of DebugCanvas can be used to control this component's appearance.\n *\n * @see 2D, DebugRectangle, DebugCanvas\n */\nvar solidMBR = {\n\tinit: function () {\n\t\tthis.requires(\"DebugRectangle\")\n\t\t\t.debugFill(\"pink\");\n\t},\n\n\tevents: {\n\t\t\"PreRender\": function () {\n\t\t\t// Internal method for updating the MBR drawn.\n\t\t\tthis.debugRectangle(this._mbr || this);\n\t\t}\n\t}\n};\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"SolidMBR\", solidMBR);\n// DEPRECATED: remove this in an upcoming release\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"VisibleMBR\", solidMBR);\n\n\n/**@\n * #DebugPolygon\n * @category Debug\n * @kind Component\n *\n * For drawing a polygon to the debug canvas\n *\n * The methods of DebugCanvas can be used to control this component's appearance -- by default it is neither filled nor outlined\n *\n * @see DebugCanvas\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"DebugPolygon\", {\n\tinit: function () {\n\t\tthis.requires(\"2D, DebugCanvas\");\n\t},\n\n\n\t/**@\n     * #.debugPolygon\n     * @comp DebugPolygon\n     * @kind Method\n     * \n     * @sign public  .debugPolygon(Polygon poly)\n     * @param poly - a polygon to render\n     *\n     * Sets the polygon that this component renders to the debug canvas.\n     *\n     */\n\tdebugPolygon: function (poly) {\n\t\tthis.polygon = poly;\n\t\tthis.unbind(\"DebugDraw\", this.drawDebugPolygon);\n\t\tthis.bind(\"DebugDraw\", this.drawDebugPolygon);\n\t\treturn this;\n\t},\n\n\tdrawDebugPolygon: function (ctx) {\n\t\tif (typeof this.polygon === \"undefined\")\n\t\t\treturn;\n\n\t\tctx.beginPath();\n\t\tvar p = this.polygon.points, l = p.length;\n\t\tfor (var i=0; i<l; i+=2){\n\t\t\tctx.lineTo(p[i], p[i+1]);\n\t\t}\n\t\tctx.closePath();\n\n\t\tif (this._debug.fillStyle)\n\t\t\tctx.fill();\n\t\tif (this._debug.strokeStyle)\n\t\t\tctx.stroke();\n\t}\n});\n\n\n/**@\n * #WiredHitBox\n * @category Debug\n * @kind Component\n *\n * Adding this component to an entity with a Collision component will cause its collision polygon to be drawn to the debug canvas as an outline\n *\n * The methods of DebugCanvas can be used to control this component's appearance.\n * @see DebugPolygon, DebugCanvas\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"WiredHitBox\", {\n\tinit: function () {\n\t\tthis.requires(\"DebugPolygon\")\n\t\t\t.debugStroke(\"red\")\n\t\t\t.matchHitBox();\n\t\tthis.bind(\"NewHitbox\", this.matchHitBox);\n\t},\n\tmatchHitBox: function () {\n\t\tthis.debugPolygon(this.map);\n\t}\n});\n\n/**@\n * #SolidHitBox\n * @category Debug\n * @kind Component\n *\n * Adding this component to an entity with a Collision component will cause its collision polygon to be drawn to the debug canvas, with a default alpha level of 0.7.\n *\n * The methods of DebugCanvas can be used to control this component's appearance.\n * @see DebugPolygon, DebugCanvas\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"SolidHitBox\", {\n\tinit: function () {\n\t\tthis.requires(\"Collision, DebugPolygon\")\n\t\t\t.debugFill(\"orange\").debugAlpha(0.7)\n\t\t\t.matchHitBox();\n\t\tthis.bind(\"NewHitbox\", this.matchHitBox);\n\t},\n\tmatchHitBox: function () {\n\t\tthis.debugPolygon(this.map);\n\t}\n});\n\n/**@\n * #WiredAreaMap\n * @category Debug\n * @kind Component\n *\n * Adding this component to an entity with an AreaMap component will cause its click polygon to be drawn to the debug canvas as an outline.\n * Following click areas exist for an entity (in decreasing order of priority): AreaMap, Hitbox, MBR. Use the appropriate debug components to display them.\n *\n * The methods of DebugCanvas can be used to control this component's appearance.\n * @see DebugPolygon, DebugCanvas\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"WiredAreaMap\", {\n\tinit: function () {\n\t\tthis.requires(\"DebugPolygon\")\n\t\t\t.debugStroke(\"green\")\n\t\t\t.matchAreaMap();\n\t\tthis.bind(\"NewAreaMap\", this.matchAreaMap);\n\t},\n\tmatchAreaMap: function () {\n\t\tthis.debugPolygon(this.mapArea);\n\t}\n});\n\n/**@\n * #SolidAreaMap\n * @category Debug\n * @kind Component\n *\n * Adding this component to an entity with an AreaMap component will cause its click polygon to be drawn to the debug canvas, with a default alpha level of 0.7.\n * Following click areas exist for an entity (in decreasing order of priority): AreaMap, Hitbox, MBR. Use the appropriate debug components to display them.\n *\n * The methods of DebugCanvas can be used to control this component's appearance.\n * @see DebugPolygon, DebugCanvas\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"SolidAreaMap\", {\n\tinit: function () {\n\t\tthis.requires(\"DebugPolygon\")\n\t\t\t.debugFill(\"lime\").debugAlpha(0.7)\n\t\t\t.matchAreaMap();\n\t\tthis.bind(\"NewAreaMap\", this.matchAreaMap);\n\t},\n\tmatchAreaMap: function () {\n\t\tthis.debugPolygon(this.mapArea);\n\t}\n});\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas = {\n\tcontext: null,\n\tentities: [],\n\tonetimeEntities: [],\n\tadd: function (ent) {\n\t\tthis.entities.push(ent);\n\t},\n\n\tremove: function (ent) {\n\t\tvar list = this.entities;\n\t\tfor (var i = list.length - 1; i >= 0; i--)\n\t\t\tif (list[i] === ent)\n\t\t\t\tlist.splice(i, 1);\n\n\t},\n\n\t// Mostly copied from canvas.init()\n\t// Called the first time a \"DebugCanvas\" component is added to an entity\n\t// We should consider how to abstract the idea of multiple canvases\n\tinit: function () {\n\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas.context) {\n\t\t\t//check if canvas is supported\n\t\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.canvas) {\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"NoCanvas\");\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stop();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//create an empty canvas element\n\t\t\tvar c;\n\t\t\tc = document.createElement(\"canvas\");\n\t\t\tc.width = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width;\n\t\t\tc.height = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height;\n\t\t\tc.style.position = \"absolute\";\n\t\t\tc.style.left = \"0px\";\n\t\t\tc.style.top = \"0px\";\n\t\t\tc.id = \"debug-canvas\";\n\t\t\t// The debug canvas should be on the very top; the highest a regular zindex can get is ~10000\n\t\t\tc.style.zIndex = 100000;\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem.appendChild(c);\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas.context = c.getContext(\"2d\");\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas._canvas = c;\n\n\n\n\t\t}\n\t\t//Bind rendering of canvas context (see drawing.js)\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.unbind(\"RenderScene\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas.renderScene);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.bind(\"RenderScene\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas.renderScene);\n\n\t},\n\n\n\t// copied from drawAll()\n\trenderScene: function (rect) {\n\t\trect = rect || _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.rect();\n\t\tvar q = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas.entities,\n\t\t\ti = 0,\n\t\t\tl = q.length,\n\t\t\tctx = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.DebugCanvas.context,\n\t\t\tcurrent;\n\n\t\tvar view = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport;\n\t\tctx.setTransform(view._scale, 0, 0, view._scale, Math.round(view._x*view._scale), Math.round(view._y*view._scale));\n\n\t\tctx.clearRect(rect._x, rect._y, rect._w, rect._h);\n\n\t\tvar lastLayer = null;\n\t\tfor (; i < l; i++) {\n\t\t\tcurrent = q[i];\n\n\t\t\t// If necessary, update the view transform to match the current entities layer\n\t\t\t// If the current entity has no layer, switch back to the viewport's transform\n\t\t\tif (lastLayer !== current._drawLayer){\n\t\t\t\tif (current._drawLayer) {\n\t\t\t\t\tview = current._drawLayer._viewportRect();\n\t\t\t\t\tctx.setTransform(view._scale, 0, 0, view._scale, Math.round(-view._x*view._scale), Math.round(-view._y*view._scale));\n\t\t\t\t} else {\n\t\t\t\t\tview = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport;\n\t\t\t\t\tctx.setTransform(view._scale, 0, 0, view._scale, Math.round(view._x*view._scale), Math.round(view._y*view._scale));\n\t\t\t\t}\n\t\t\t\tlastLayer = current._drawLayer;\n\t\t\t}\n\t\t\tcurrent.debugDraw(ctx);\n\t\t}\n\n\t}\n\n};\n\n\n//# sourceURL=webpack://qrafty-v2/./src/debug/debug-layer.js?");

/***/ }),

/***/ "./src/debug/logging.js":
/*!******************************!*\
  !*** ./src/debug/logging.js ***!
  \******************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\tloggingEnabled: true,\n\tdebugLoggingEnabled: \"true\" === \"true\",\n\tdebugLoggingTrace: false,\n\n\tlog: function () {\n\t\tif (!this.loggingEnabled) return;\n\t\tconsole.log.apply(console, arguments);\n\t},\n\n\twarn: function () {\n\t\tif (!this.loggingEnabled) return;\n\t\tconsole.warn.apply(console, arguments);\n\t},\n\n\terror: function () {\n\t\tif (!this.loggingEnabled) return;\n\t\tconsole.error.apply(console, arguments);\n\t},\n\n\tdebug: function () {\n\t\tif (!this.loggingEnabled || !this.debugLoggingEnabled) return;\n\t\t(this.debugLoggingTrace ? console.trace : console.debug).apply(console, arguments);\n\t},\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/debug/logging.js?");

/***/ }),

/***/ "./src/graphics/canvas-layer.js":
/*!**************************************!*\
  !*** ./src/graphics/canvas-layer.js ***!
  \**************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #CanvasLayer\n * @category Graphics\n * @kind System\n *\n * An object for creating the canvas layer system.\n *\n * Mostly contains private methods to draw entities on a canvas element.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default._registerLayerTemplate(\"Canvas\", {\n\ttype: \"Canvas\",\n    \n\tlayerCount: 0,\n\t_changedObjs: null,\n\n\t_dirtyRects: null,\n\t_dirtyCells: null,\n\t_viewKeys: null,\n\t__tempRect: null,\n\t__tempSearchRect: null,\n\t__tempScreenRect: null,\n\n\n\t/**@\n     * #.dirty\n     * @comp CanvasLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .dirty(ent)\n     * @param ent - The entity to add\n     *\n     * Add an entity to the list of Canvas objects that need redrawing\n     */\n\tdirty: function dirty(ent) {\n\t\tthis._changedObjs.push(ent);\n\t},\n    \n\t/**@\n     * #.attach\n     * @comp CanvasLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .attach(ent)\n     * @param ent - The entity to add\n     *\n     * Sets the entity's draw context to this layer\n     */\n\tattach: function attach(ent) {\n\t\tent._drawContext = this.context;\n\t\t//increment the number of canvas objs\n\t\tthis.layerCount++;\n\t},\n    \n\t/**@\n     * #.detach\n     * @comp CanvasLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .detach(ent)\n     * @param ent - The entity to detach\n     *\n     * Removes an entity to the list of Canvas objects to draw\n     */\n\tdetach: function detach(ent) {\n\t\tthis.dirty(ent);\n\t\tent._drawContext = null;\n\t\t//decrement the number of canvas objs\n\t\tthis.layerCount--;\n\t},\n    \n\n\t/**@\n     * #.context\n     * @comp CanvasLayer\n     * @kind Property\n     *\n     * This will return the 2D context associated with the canvas layer's canvas element.\n     */\n\tcontext: null,\n\n\t/**@\n     * #._canvas\n     * @comp CanvasLayer\n     * @kind Property\n     * @private\n     *\n     * The canvas element associated with the canvas layer.\n     */\n\t_canvas: null,\n\n\tevents: {\n\t\t// Respond to init & remove events\n\t\t\"LayerInit\": \"layerInit\",\n\t\t\"LayerRemove\": \"layerRemove\",\n\t\t// Bind scene rendering (see drawing.js)\n\t\t\"RenderScene\": \"_render\",\n\t\t// Listen for pixelart changes\n\t\t\"PixelartSet\": \"_setPixelart\",\n\t\t// Handle viewport modifications\n\t\t\"ViewportResize\": \"_resize\"\n\t},\n\n\t// When the system is first created, create the necessary canvas element and initial state\n\t// Bind to the necessary events\n\tlayerInit: function () {\n\t\t//check if canvas is supported\n\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.canvas) {\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"NoCanvas\");\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stop();\n\t\t\treturn;\n\t\t}\n\n\t\t// set referenced objects to initial values -- necessary to avoid shared state between systems\n\t\tthis._changedObjs = [];\n\t\tthis._dirtyRects = [];\n\t\tthis._dirtyCells = {};\n\t\tthis._viewKeys = { x1: 0, y1: 0, x2: 0, y2: 0 };\n\t\tthis.__tempRect = { _x: 0, _y: 0, _w: 0, _h: 0 };\n\t\tthis.__tempSearchRect = { _x: 0, _y: 0, _w: 0, _h: 0 };\n\t\tthis.__tempScreenRect = { _x: 0, _y: 0, _w: 0, _h: 0 };\n\n\t\t//create an empty canvas element\n\t\tvar c;\n\t\tc = document.createElement(\"canvas\");\n\t\tc.width = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width;\n\t\tc.height = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height;\n\t\tc.style.position = \"absolute\";\n\t\tc.style.left = \"0px\";\n\t\tc.style.top = \"0px\";\n\t\tc.style.zIndex = this.options.z;\n\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem.appendChild(c);\n\t\tthis.context = c.getContext(\"2d\");\n\t\tthis._canvas = c;\n\n\t\t//Set any existing transformations\n\t\tvar zoom = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._scale;\n\t\tif (zoom !== 1)\n\t\t\tthis.context.scale(zoom, zoom);\n\t},\n\n\t// When the system is destroyed, remove related resources\n\tlayerRemove: function() {\n\t\tthis._canvas.parentNode.removeChild(this._canvas);\n\t},\n\n\t_render: function() {\n\t\tvar dirtyViewport = this._dirtyViewport,\n\t\t\tl = this._changedObjs.length,\n\t\t\tctx = this.context;\n\t\tif (!l && !dirtyViewport) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Set the camera transforms from the combination of the current viewport parameters and this layers \n\t\tvar cameraOptions = this.options;\n\t\tif (dirtyViewport && cameraOptions) {\n\t\t\tvar view = this._viewportRect();\n\t\t\tvar scale = view._scale; \n\t\t\tvar dx = -view._x * scale;\n\t\t\tvar dy = -view._y * scale;\n\t\t\tctx.setTransform(scale, 0, 0, scale, Math.round(dx), Math.round(dy) );\n\t\t}\n\n\t\t// TODO: check if these conditions really make that much sense!\n\t\t// if the amount of changed objects is over 60% of the total objects, do the naive method redrawing\n\t\tif (l / this.layerCount > 0.6 || dirtyViewport) {\n\t\t\tthis._drawAll();\n\t\t\t// otherwise draw dirty cell grid regions\n\t\t} else {\n\t\t\tthis._drawDirtyCells();\n\t\t}\n\n\t\t//Clean up lists etc\n\t\tthis._clean();\n\t},\n\n\t/**@\n     * #._drawDirtyCells\n     * @comp CanvasLayer\n     * @kind Method\n     * @private\n     *\n     * @sign public ._drawDirtyCells([Object rect])\n     * @param rect - a rectangular region {_x: x_val, _y: y_val, _w: w_val, _h: h_val}\n     *\n     * - If rect is omitted, redraw within the viewport\n     * - If rect is provided, redraw within the rect.\n     *\n     * - Triggered by the \"RenderScene\" event\n     * - This method is invoked if the number of rects is under 60% of the total number of objects\n     *  and the total number of objects is greater than 16.\n     * - Clear the dirty spatial grid cells, and redraw entities overlapping the dirty spatial grid cells.\n     *\n     * @see Canvas#.draw\n     */\n\t_drawDirtyCells: function (view) {\n\t\tvar viewportRect = this._viewportRect(), // this updates the viewportRect for later cached use\n\t\t\trect = this.__tempRect,\n\t\t\tdirtyRects = this._dirtyRects,\n\t\t\tintegerBounds = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.rectManager.integerBounds,\n\t\t\tctx = this.context;\n\t\tvar i, l;\n\n\t\t// Canvas works better with integral coordinates where possible\n\t\tview = integerBounds(view || viewportRect);\n\n\t\t// Calculate dirty spatial map cells from all changed objects\n\t\t// Don't include cells outside rect to be drawn (e.g. viewport)\n\t\tthis._createDirtyCells(view);\n\t\t// Afterwards, calculate dirty rectangles from dirty spatial map cells\n\t\tthis._createDirtyRects();\n\n\t\t// For each dirty rectangle, find entities near it, and draw the overlapping ones\n\t\tfor (i = 0, l = dirtyRects.length; i < l; i += 4) { //loop over every dirty rect\n\t\t\trect._x = dirtyRects[i + 0];\n\t\t\trect._y = dirtyRects[i + 1];\n\t\t\trect._w = dirtyRects[i + 2];\n\t\t\trect._h = dirtyRects[i + 3];\n\n\t\t\t// Draw the rectangle\n\t\t\tthis._drawRect(rect);\n\t\t}\n\n\t\t// Draw dirty rectangles for debugging, if that flag is set\n\t\tif (this.debugDirty === true) {\n\t\t\tvar frame = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.frame(),\n\t\t\t\tr = (6 * frame + 0) % 255,\n\t\t\t\tg = (6 * frame + 85) % 255,\n\t\t\t\tb = (6 * frame + 170) % 255;\n\t\t\tctx.strokeStyle = \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n\t\t\tfor (i = 0, l = dirtyRects.length; i < l; i += 4) {\n\t\t\t\tctx.strokeRect(dirtyRects[i + 0], dirtyRects[i + 1], dirtyRects[i + 2], dirtyRects[i + 3]);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**@\n     * #._drawAll\n     * @comp CanvasLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public ._drawAll([Object rect])\n     * @param rect - a rectangular region {_x: x_val, _y: y_val, _w: w_val, _h: h_val}\n     *\n     * - If rect is omitted, redraw within the viewport\n     * - If rect is provided, redraw within the rect.\n     *\n     * - Triggered by the \"RenderScene\" event\n     * - This method is invoked if the number of rects is over 60% of the total number of objects.\n     * - Clear the whole viewport, and redraw entities overlapping it by default.\n     *\n     * @see Canvas#.draw\n     */\n\t_drawAll: function (view) {\n\t\tvar viewportRect = this._viewportRect(); // this updates the viewportRect for later cached use\n\n\t\t// Draw the whole layer rectangle\n\t\tthis._drawRect(view || viewportRect);\n\t},\n\n\t_drawRect: function(rect) {\n\t\tvar i, l, q, obj, previousGlobalZ,\n\t\t\tintegerBounds = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.rectManager.integerBounds,\n\t\t\tctx = this.context,\n\t\t\tsearchRect = this.__tempSearchRect,\n\t\t\tscreenRect = this.__tempScreenRect;\n\n\t\t// Compute the final screen coordinates for the rectangle\n\t\tscreenRect = this._viewTransformRect(rect, screenRect, true); // use cached viewportRect\n\t\t// Find the smallest rectangle with integer coordinates that encloses screenRect\n\t\tscreenRect = integerBounds(screenRect);\n\n\t\t// Find the smallest rectangle with integer coordinates that encloses rect\n\t\trect = integerBounds(rect);\n\n\t\t// Search for ents under dirty rect.\n\t\t//\n\t\t// Don't need to search for full entity dimensions!\n\t\t// If coordinates are integers, the search area with default _w and _h is (1 px - Number.Epsilon px) too big.\n\t\t// Thus trim the search area accordingly.\n\t\t// Otherwise unecessary neighboring grid cells would be searched for entities,\n\t\t// these additional entities would later be removed because of failing condition rectManager.overlap\n\t\t// This is a performance optimization for dirty cell drawing, to only search one grid cell for each rect,\n\t\t// else three additional cells would be searched unnecessarily.\n\t\tsearchRect._x = rect._x;\n\t\tsearchRect._y = rect._y;\n\t\tsearchRect._w = rect._w - 1;\n\t\tsearchRect._h = rect._h - 1;\n\t\tq = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.map.search(searchRect);\n\t\t// Sort objects by z level, duplicate objs will be ordered next to each other due to same _globalZ\n\t\tq.sort(this._sort);\n\n\n\t\t// save context before drawing, saves e.g. infinite clip region\n\t\tctx.save();\n\n\t\t// Clip and clear works best with default identity transform,\n\t\t// but do the actual clipping after restoring viewport transform,\n\t\t// as the clipping region would be disgarded otherwise\n\t\tctx.save();\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\t// Clip drawing region to dirty rectangle\n\t\tctx.beginPath();\n\t\tctx.rect(screenRect._x, screenRect._y, screenRect._w, screenRect._h);\n\t\t// Clear the rect from the main canvas\n\t\tctx.clearRect(screenRect._x, screenRect._y, screenRect._w, screenRect._h);\n\t\tctx.restore();\n\t\tctx.clip();\n\n\t\t// Then draw each visible canvas object from this layer in that order, avoiding duplicates\n\t\t// No need to check for overlap with drawing area, as it's a single grid cell or the entire viewport\n\t\t// -> in both cases all entities returned from collision search overlap that drawing area\n\t\tpreviousGlobalZ = -Infinity;\n\t\tfor (i = 0, l = q.length; i < l; ++i) {\n\t\t\tobj = q[i];\n\n\t\t\tif (obj._globalZ > previousGlobalZ && obj._visible && obj._drawLayer === this) {\n\t\t\t\tobj.draw(ctx);\n\t\t\t\tobj._changed = false;\n\n\t\t\t\tpreviousGlobalZ = obj._globalZ;\n\t\t\t}\n\t\t}\n\n\t\t// restore context after drawing, restores e.g. clip regions\n\t\tctx.restore();\n\t},\n\n\tdebug: function() {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.log(this._changedObjs);\n\t},\n\n\t/** cleans up current dirty state, stores stale state for future passes */\n\t_clean: function () {\n\t\tvar dirtyKeys, staleKeys, obj, i, l;\n\n\t\tvar changed = this._changedObjs;\n\t\tfor (i = 0, l = changed.length; i < l; i++) {\n\t\t\tobj = changed[i];\n\n\t\t\t// we need to keep track of all stale states, because drawing method can change dynamically\n\t\t\t// track stale grid cell keys for dirty grid cell drawing\n\t\t\tdirtyKeys = obj._entry.keys; // cached computation of Qrafty.HashMap.key(obj)\n\t\t\tstaleKeys = obj.staleKeys;\n\t\t\tif (staleKeys === undefined) obj.staleKeys = staleKeys = { x1: 0, y1: 0, x2: 0, y2: 0 };\n\t\t\tstaleKeys.x1 = dirtyKeys.x1;\n\t\t\tstaleKeys.y1 = dirtyKeys.y1;\n\t\t\tstaleKeys.x2 = dirtyKeys.x2;\n\t\t\tstaleKeys.y2 = dirtyKeys.y2;\n\n\t\t\tobj._changed = false;\n\t\t}\n\t\tchanged.length = 0;\n\n\t\tthis._dirtyCells = {};\n\t\tthis._dirtyRects.length = 0;\n\n\t\tthis._dirtyViewport = false;\n\t},\n\n\t// Takes the current and previous position of changed objects and\n\t// adds the dirty spatial map cells they are contained in to a set.\n\t//\n\t// If a dirty cell doesn't overlap with the area to be drawn (e.g. viewport),\n\t// don't include it\n\t//\n\t_createDirtyCells: function (view) {\n\t\tvar changed = this._changedObjs,\n\t\t\tdirtyCells = this._dirtyCells;\n\t\tvar viewKeys = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.HashMap.key(view, this._viewKeys);\n\n\t\tvar i, l, j, k, obj, keys;\n\t\tfor (i = 0, l = changed.length; i < l; i++) {\n\t\t\tobj = changed[i];\n\n\t\t\t// if object was previously drawn it's old position needs to be redrawn (cleared)\n\t\t\tif ((keys = obj.staleKeys)) { // cached computation of stale keys\n\t\t\t\tfor (j = keys.x1; j <= keys.x2; j++) {\n\t\t\t\t\tfor (k = keys.y1; k <= keys.y2; k++) {\n\t\t\t\t\t\t// if stale cell is inside area to be drawn\n\t\t\t\t\t\tif (viewKeys.x1 <= j && j <= viewKeys.x2 &&\n                            viewKeys.y1 <= k && k <= viewKeys.y2) {\n\n\t\t\t\t\t\t\t// combine two 16 bit unsigned numbers into a unique 32 bit unsigned number\n\t\t\t\t\t\t\tdirtyCells[(j << 16) ^ k] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tkeys = obj._entry.keys; // cached computation of Qrafty.HashMap.key(obj)\n\t\t\tfor (j = keys.x1; j <= keys.x2; j++) {\n\t\t\t\tfor (k = keys.y1; k <= keys.y2; k++) {\n\t\t\t\t\t// if dirty cell is inside area to be drawn\n\t\t\t\t\tif (viewKeys.x1 <= j && j <= viewKeys.x2 &&\n                        viewKeys.y1 <= k && k <= viewKeys.y2) {\n\n\t\t\t\t\t\t// combine two 16 bit unsigned numbers into a unique 32 bit unsigned number\n\t\t\t\t\t\tdirtyCells[(j << 16) ^ k] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Takes all dirty spatial map cells and\n\t// pushes the corresponding dirty rectangles onto the stack.\n\t//\n\t_createDirtyRects: function() {\n\t\tvar cellsize = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.HashMap.cellsize(),\n\t\t\tdirtyCells = this._dirtyCells,\n\t\t\tdirtyRects = this._dirtyRects;\n\n\t\tvar hash, j, k;\n\t\tfor (var strHash in dirtyCells) {\n\t\t\thash = +strHash;\n\t\t\t// deconstruct a 32 bit unsigned number into a unique pair of 16 bit unsigned numbers\n\t\t\tk = (hash << 16) >> 16;\n\t\t\tj = (k < 0) ? ~(hash >> 16) : hash >> 16;\n\t\t\tdirtyRects.push(j * cellsize, k * cellsize, cellsize, cellsize);\n\t\t}\n\t},\n\n\n\t// Resize the canvas element to the current viewport\n\t_resize: function() {\n\t\tvar c = this._canvas;\n\t\tc.width = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width;\n\t\tc.height = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height;\n\n\t},\n\n\t_setPixelart: function(enabled) {\n\t\tvar context = this.context;\n\t\tcontext.imageSmoothingEnabled = !enabled;\n\t\tcontext.mozImageSmoothingEnabled = !enabled;\n\t\tcontext.webkitImageSmoothingEnabled = !enabled;\n\t\tcontext.oImageSmoothingEnabled = !enabled;\n\t\tcontext.msImageSmoothingEnabled = !enabled;\n\t}\n\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/canvas-layer.js?");

/***/ }),

/***/ "./src/graphics/canvas.js":
/*!********************************!*\
  !*** ./src/graphics/canvas.js ***!
  \********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #Canvas\n * @category Graphics\n * @kind Component\n * \n * @trigger Draw - when the entity is ready to be drawn to the stage - {type: \"canvas\", pos, co, ctx}\n * @trigger NoCanvas - if the browser does not support canvas\n *\n * When this component is added to an entity it will be drawn to the global canvas element. The canvas element (and hence all Canvas entities) is always rendered below any DOM entities.\n *\n * The canvas layer will be automatically initialized if it has not been created yet.\n *\n * Create a canvas entity like this\n * ~~~\n * var myEntity = Qrafty.e(\"2D, Canvas, Color\")\n *      .color(\"green\")\n *      .attr({x: 13, y: 37, w: 42, h: 42});\n *~~~\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Canvas\", {\n\n\tinit: async function () {\n\t\tawait this.requires(\"Renderable\");\n        \n\t\t//Allocate an object to hold this components current region\n\t\tthis.currentRect = {};\n        \n\t\t// Add the default canvas layer if we aren't attached to a custom one\n\t\tif (!this._customLayer){\n\t\t\tthis._attachToLayer( _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"DefaultCanvasLayer\"));\n\t\t}\n        \n\t},\n\n\tremove: function() {\n\t\tthis._detachFromLayer();\n\t},\n\n\t/**@\n     * #.draw\n     * @comp Canvas\n     * @kind Method\n     * \n     * @sign public this .draw([Context ctx, Number x, Number y, Number w, Number h])\n     * @param ctx - Canvas 2D context if drawing on another canvas is required\n     * @param x - X offset for drawing a segment\n     * @param y - Y offset for drawing a segment\n     * @param w - Width of the segment to draw\n     * @param h - Height of the segment to draw\n     *\n     * Method to draw the entity on the canvas element. Can pass rect values for redrawing a segment of the entity.\n     */\n\n\t// Cache the various objects and arrays used in draw:\n\tdrawVars: {\n\t\ttype: \"canvas\",\n\t\tpos: {},\n\t\tctx: null,\n\t\tcoord: [0, 0, 0, 0],\n\t\tco: {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tw: 0,\n\t\t\th: 0\n\t\t}\n\t},\n\n\tdraw: function (ctx, x, y, w, h) {\n\t\tif (!this.ready) return;\n\n\t\tvar pos = this.drawVars.pos;\n\t\tpos._x = (this._x + (x || 0));\n\t\tpos._y = (this._y + (y || 0));\n\t\tpos._w = (w || this._w);\n\t\tpos._h = (h || this._h);\n\n\n\t\tvar context = ctx || this._drawContext;\n\t\tvar coord = this.__coord || [0, 0, 0, 0];\n\t\tvar co = this.drawVars.co;\n\t\tco.x = coord[0] + (x || 0);\n\t\tco.y = coord[1] + (y || 0);\n\t\tco.w = w || coord[2];\n\t\tco.h = h || coord[3];\n\n\t\t// If we are going to perform any entity-specific changes to the current context, save the current state\n\t\tif (this._flipX || (this._flipY || this._rotation)) {\n\t\t\tcontext.save();\n\t\t}\n\n\t\t// rotate the context about this entity's origin\n\t\tif (this._rotation !== 0) {\n\t\t\tcontext.translate(this._origin.x + this._x, this._origin.y + this._y);\n\t\t\tpos._x = -this._origin.x;\n\t\t\tpos._y = -this._origin.y;\n\t\t\tcontext.rotate((this._rotation % 360) * (Math.PI / 180));\n\t\t}\n\n\t\t// We realize a flipped entity by scaling the context in the opposite direction, then adjusting the position coordinates to match\n\t\tif (this._flipX || this._flipY) {\n\t\t\tcontext.scale((this._flipX ? -1 : 1), (this._flipY ? -1 : 1));\n\t\t\tif (this._flipX) {\n\t\t\t\tpos._x = -(pos._x + pos._w);\n\t\t\t}\n\t\t\tif (this._flipY) {\n\t\t\t\tpos._y = -(pos._y + pos._h);\n\t\t\t}\n\t\t}\n\n\t\tvar globalpha;\n\n\t\t//draw with alpha\n\t\tif (this._alpha < 1.0) {\n\t\t\tglobalpha = context.globalAlpha;\n\t\t\tcontext.globalAlpha = this._alpha;\n\t\t}\n\n\t\tthis.drawVars.ctx = context;\n\t\tthis.trigger(\"Draw\", this.drawVars);\n\n\t\t// If necessary, restore context\n\t\tif (this._rotation !== 0 || (this._flipX || this._flipY)) {\n\t\t\tcontext.restore();\n\t\t}\n\t\tif (globalpha) {\n\t\t\tcontext.globalAlpha = globalpha;\n\t\t}\n\t\treturn this;\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/canvas.js?");

/***/ }),

/***/ "./src/graphics/color.js":
/*!*******************************!*\
  !*** ./src/graphics/color.js ***!
  \*******************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\nconst document = window.document;\n\n\n\n\n/**@\n * #Qrafty.assignColor\n * @category Graphics\n * @kind Method\n * \n * Maps a wide vareity of color representations to a set of simple rgb(a) properties. \n * \n * @sign Qrafty.assignColor(color[, assignee])\n * @param color - a string represenation of the color to assign, in any valid HTML format\n * @param assignee - an object to use instead of creating one from scratch\n * @returns  An object with `_red`, `_green`, and `_blue` properties assigned.\n *           Potentially with `_strength` representing the alpha channel.\n *           If the assignee parameter is passed, that object will be assigned those values and returned.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\tassignColor: (function(){\n\n\t\t// Create phantom element to assess color\n\t\tvar element = document.createElement(\"div\");\n\t\telement.style.display = \"none\";\n\t\t// Can't attach it til later on, so we need a flag!\n\t\tvar element_attached = false;\n\t\tvar dictionary = {\n\t\t\t\"aqua\":     \"#00ffff\",\n\t\t\t\"black\":    \"#000000\",\n\t\t\t\"blue\":     \"#0000ff\",\n\t\t\t\"fuchsia\":  \"#ff00ff\",\n\t\t\t\"gray\":     \"#808080\",\n\t\t\t\"green\":    \"#00ff00\",\n\t\t\t\"lime\":     \"#00ff00\",\n\t\t\t\"maroon\":   \"#800000\",\n\t\t\t\"navy\":     \"#000080\",\n\t\t\t\"olive\":    \"#808000\",\n\t\t\t\"orange\":   \"#ffa500\",\n\t\t\t\"purple\":   \"#800080\",\n\t\t\t\"red\":      \"#ff0000\",\n\t\t\t\"silver\":   \"#c0c0c0\",\n\t\t\t\"teal\":     \"#008080\",\n\t\t\t\"white\":    \"#ffffff\",\n\t\t\t\"yellow\":   \"#ffff00\"\n\t\t};\n\n\t\tfunction default_value(c){\n\t\t\tc._red = c._blue = c._green = 0;\n\t\t\treturn c;\n\t\t}\n\n\t\tfunction hexComponent(component) {\n\t\t\tvar hex = component.toString(16);\n\t\t\tif (hex.length === 1)\n\t\t\t\thex = \"0\" + hex;\n\t\t\treturn hex;\n\t\t}\n\n\t\tfunction rgbToHex(r, g, b){\n\t\t\treturn \"#\" + hexComponent(r) + hexComponent(g) + hexComponent(b);\n\t\t}\n\n\t\tfunction parseHexString(hex, c) {\n\t\t\tvar r, g, b,\n\t\t\t\tl = hex.length;\n\n\t\t\tif (l === 7) {\n\t\t\t\tr = hex.substr(1, 2);\n\t\t\t\tg = hex.substr(3, 2);\n\t\t\t\tb = hex.substr(5, 2);\n\t\t\t} else if (l === 4) {\n\t\t\t\tr = hex.substr(1, 1); r += r;\n\t\t\t\tg = hex.substr(2, 1); g += g;\n\t\t\t\tb = hex.substr(3, 1); b += b;\n\t\t\t} else {\n\t\t\t\treturn default_value(c);\n\t\t\t}\n\t\t\tc._red = parseInt(r, 16);\n\t\t\tc._green = parseInt(g, 16);\n\t\t\tc._blue = parseInt(b, 16);\n\n\t\t\treturn c;\n\t\t}\n\n\t\tvar rgb_regex = /rgba?\\s*\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,?\\s*([0-9.]+)?\\)/;\n\n\t\tfunction parseRgbString(rgb, c) {\n\t\t\tvar values = rgb_regex.exec(rgb);\n\t\t\tif( values === null || (values.length !== 4 && values.length !== 5)) {\n\t\t\t\treturn default_value(c); // return bad result?\n\t\t\t}\n\t\t\tc._red = Math.round(parseFloat(values[1]));\n\t\t\tc._green = Math.round(parseFloat(values[2]));\n\t\t\tc._blue = Math.round(parseFloat(values[3]));\n\t\t\tif (values[4]) {\n\t\t\t\tc._strength = parseFloat(values[4]);\n\t\t\t}\n\t\t\treturn c;\n\t\t}\n\n\t\tfunction parseColorName(key, c){\n\t\t\tif (typeof dictionary[key] === \"undefined\"){\n\t\t\t\tif (element_attached === false){\n\t\t\t\t\twindow.document.body.appendChild(element);\n\t\t\t\t\telement_attached = true;\n\t\t\t\t}\n\t\t\t\telement.style.color = key;\n\t\t\t\tvar rgb = window.getComputedStyle(element).color;\n\t\t\t\tparseRgbString(rgb, c);\n\t\t\t\tdictionary[key] = rgbToHex(c._red, c._green, c._blue);\n\t\t\t\t//window.document.body.removeChild(element);\n\t\t\t} else {\n\t\t\t\tparseHexString(dictionary[key], c);\n\t\t\t}\n\t\t\treturn c;\n\t\t}\n\n\t\tfunction rgbaString(c){\n\t\t\treturn \"rgba(\" + c._red + \", \" + c._green + \", \" + c._blue + \", \" + c._strength + \")\";\n\t\t}\n\n\t\t// The actual assignColor function\n\t\treturn function(color, c){\n\t\t\tc = c || {};\n\t\t\tcolor = color.trim().toLowerCase();\n\t\t\tvar ret = null;\n\t\t\tif (color[0] === \"#\"){\n\t\t\t\tret = parseHexString(color, c);\n\t\t\t} else if (color[0] === \"r\" && color[1] === \"g\" && color[2] === \"b\"){\n\t\t\t\tret = parseRgbString(color, c);\n\t\t\t} else {\n\t\t\t\tret = parseColorName(color, c);\n\t\t\t}\n\t\t\tc._strength = c._strength || 1.0;\n\t\t\tc._color = rgbaString(c);\n\t\t};\n\n\t})()\n});\n\n\n\n\n\n// Define some variables required for webgl\n//var fs = require(\"fs\");\n\nconst shaders_color_vert = `attribute vec2 aPosition;\nattribute vec3 aOrientation;\nattribute vec2 aLayer;\nattribute vec4 aColor;\n\nvarying lowp vec4 vColor;\n\nuniform  vec4 uViewport;\n\nmat4 viewportScale = mat4(2.0 / uViewport.z, 0, 0, 0,    0, -2.0 / uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);\nvec4 viewportTranslation = vec4(uViewport.xy, 0, 0);\n\nvoid main() {\n  vec2 pos = aPosition;\n  vec2 entityOrigin = aOrientation.xy;\n  mat2 entityRotationMatrix = mat2(cos(aOrientation.z), sin(aOrientation.z), -sin(aOrientation.z), cos(aOrientation.z));\n\n  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin;\n  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0/(1.0+exp(aLayer.x) ), 1) );\n  vColor = vec4(aColor.rgb*aColor.a*aLayer.y, aColor.a*aLayer.y);\n}`;\n\nconst shaders_color_frag = `precision mediump float;\nvarying lowp vec4 vColor;\nvoid main(void) {\n\tgl_FragColor = vColor;\n}`;\n\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.defaultShader(\"Color\", new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.WebGLShader(\n\tshaders_color_vert,\n\tshaders_color_frag,\n\t[\n\t\t{ name: \"aPosition\",    width: 2 },\n\t\t{ name: \"aOrientation\", width: 3 },\n\t\t{ name: \"aLayer\",       width: 2 },\n\t\t{ name: \"aColor\",       width: 4 }\n\t],\n\tfunction(e, entity) {\n\t\te.program.writeVector(\"aColor\",\n\t\t\tentity._red/255,\n\t\t\tentity._green/255,\n\t\t\tentity._blue/255,\n\t\t\tentity._strength\n\t\t);\n\t}\n));\n\n/**@\n * #Color\n * @category Graphics\n * @kind Component\n * \n * Draw a colored rectangle.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Color\", {\n\t_red: 0,\n\t_green: 0,\n\t_blue: 0,\n\t_strength: 1.0,\n\t_color: \"\",\n\tready: true,\n\n\tinit: async function () {\n\t\t// Necessary for some rendering layers\n\t\tthis.__coord = this.__coord || [0, 0, 0, 0];\n        \n\t\tthis.bind(\"Draw\", this._drawColor);\n\t\tif (this._drawLayer) {\n\t\t\tthis._setupColor(this._drawLayer);\n\t\t}\n\t\tthis.trigger(\"Invalidate\");\n\t},\n\n\tevents: {\n\t\t\"LayerAttached\": \"_setupColor\"\n\t},\n\n\tremove: function(){\n\t\tthis.unbind(\"Draw\", this._drawColor);\n\t\tif (this.has(\"DOM\")){\n\t\t\tthis._element.style.backgroundColor = \"transparent\";\n\t\t}\n\t\tthis.trigger(\"Invalidate\");\n\t},\n\n\t_setupColor: function(layer) {\n\t\tif (layer.type === \"WebGL\") {\n\t\t\tthis._establishShader(\"Color\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.defaultShader(\"Color\"));\n\t\t}\n\t},\n\n\t// draw function for \"Color\"\n\t_drawColor: function(e){\n\t\tif (!this._color) { return; }\n\t\tif (e.type === \"DOM\") {\n\t\t\te.style.backgroundColor = this._color;\n\t\t\te.style.lineHeight = 0;\n\t\t} else if (e.type === \"canvas\") {\n\t\t\te.ctx.fillStyle = this._color;\n\t\t\te.ctx.fillRect(e.pos._x, e.pos._y, e.pos._w, e.pos._h);\n\t\t} else if (e.type === \"webgl\"){\n\t\t\te.program.draw(e, this);\n\t\t}\n\t},\n\n\t/**@\n     * #.color\n     * @comp Color\n     * @kind Method\n     * \n     * @trigger Invalidate - when the color changes\n     *\n     * Will assign the color and opacity, either through a string shorthand, or through explicit rgb values.\n     * @sign public this .color(String color[, Float strength])\n     * @param color - Color of the rectangle\n     * @param strength - the opacity of the rectangle\n     *\n     * @sign public this .color(r, g, b[, strength])\n     * @param r - value for the red channel\n     * @param g - value for the green channel\n     * @param b - value for the blue channel\n     * @param strength - the opacity of the rectangle\n     *\n     * @sign public String .color()\n     * @return A string representing the current color as a CSS property.\n     *\n     * @example\n     * ```\n     * var c = Qrafty.e(\"2D, DOM, Color\");\n     * c.color(\"#FF0000\");\n     * c.color(\"red\");\n     * c.color(255, 0, 0);\n     * c.color(\"rgb(255, 0, 0)\");\n     * ```\n     * Three different ways of assign the color red.\n     * ```\n     * var c = Qrafty.e(\"2D, DOM, Color\");\n     * c.color(\"#00FF00\", 0.5);\n     * c.color(\"rgba(0, 255, 0, 0.5)\");\n     * ```\n     * Two ways of assigning a transparent green color.\n     */\n\tcolor: function (color) {\n\t\tif (arguments.length === 0 ){\n\t\t\treturn this._color;\n\t\t} else if (arguments.length>=3){\n\t\t\tthis._red = arguments[0];\n\t\t\tthis._green = arguments[1];\n\t\t\tthis._blue = arguments[2];\n\t\t\tif (typeof arguments[3] === \"number\")\n\t\t\t\tthis._strength = arguments[3];\n\t\t} else {\n\t\t\t// First argument is color name\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.assignColor(color, this);\n\t\t\t// Second argument, if present, is strength of color\n\t\t\t// Note that assignColor will give a default strength of 1.0 if none exists.\n\t\t\tif (typeof arguments[1] === \"number\")\n\t\t\t\tthis._strength = arguments[1];\n\t\t}\n\t\tthis._color = \"rgba(\" + this._red + \", \" + this._green + \", \" + this._blue + \", \" + this._strength + \")\";\n\t\tthis.trigger(\"Invalidate\");\n\t\treturn this;\n\t}\n});\n\n\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/color.js?");

/***/ }),

/***/ "./src/graphics/dom-helper.js":
/*!************************************!*\
  !*** ./src/graphics/dom-helper.js ***!
  \************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\nconst document = window.document;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.domHelper\n     * @kind Property\n     * @category Graphics\n     *\n     * Collection of utilities for using the DOM.\n     */\n\tdomHelper: {\n\t\t/**@\n         * #Qrafty.domHelper.innerPosition\n         * @comp Qrafty.domHelper\n         * @sign public Object Qrafty.domHelper.innerPosition(HTMLElement obj[, Object out])\n         * @param obj - HTML element to calculate the position\n         * @param out - optional object to save result in\n         * @returns Object with `x` key being the `x` position, `y` being the `y` position\n         *\n         * Find a DOM elements position including\n         * padding and border.\n         */\n\t\tinnerPosition: function (obj, out) {\n\t\t\tout = out || {};\n\t\t\tvar rect = obj.getBoundingClientRect(),\n\t\t\t\tx = rect.left + (window.pageXOffset ? window.pageXOffset : document.body.scrollLeft),\n\t\t\t\ty = rect.top + (window.pageYOffset ? window.pageYOffset : document.body.scrollTop),\n\t\t\t\t//border left\n\t\t\t\tborderX = parseInt(this.getStyle(obj, \"border-left-width\") || 0, 10) || parseInt(this.getStyle(obj, \"borderLeftWidth\") || 0, 10) || 0,\n\t\t\t\tborderY = parseInt(this.getStyle(obj, \"border-top-width\") || 0, 10) || parseInt(this.getStyle(obj, \"borderTopWidth\") || 0, 10) || 0;\n\n\t\t\tout.x = x + borderX;\n\t\t\tout.y = y + borderY;\n\t\t\treturn out;\n\t\t},\n\n\t\t/**@\n         * #Qrafty.domHelper.getStyle\n         * @comp Qrafty.domHelper\n         * @kind Method\n         * \n         * @sign public Object Qrafty.domHelper.getStyle(HTMLElement obj, String property)\n         * @param obj - HTML element to find the style\n         * @param property - Style to return\n         *\n         * Determine the value of a style on an HTML element. Notation can be\n         * in either CSS or JS.\n         */\n\t\tgetStyle: function (obj, prop) {\n\t\t\tvar result;\n\t\t\tif (obj.currentStyle)\n\t\t\t\tresult = obj.currentStyle[this.camelize(prop)];\n\t\t\telse if (window.getComputedStyle)\n\t\t\t\tresult = document.defaultView.getComputedStyle(obj, null).getPropertyValue(this.csselize(prop));\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n         * Used in the Zepto framework\n         *\n         * Converts CSS notation to JS notation\n         */\n\t\tcamelize: function (str) {\n\t\t\treturn str.replace(/-+(.)?/g, function (match, chr) {\n\t\t\t\treturn chr ? chr.toUpperCase() : \"\";\n\t\t\t});\n\t\t},\n\n\t\t/**\n         * Converts JS notation to CSS notation\n         */\n\t\tcsselize: function (str) {\n\t\t\treturn str.replace(/[A-Z]/g, function (chr) {\n\t\t\t\treturn chr ? \"-\" + chr.toLowerCase() : \"\";\n\t\t\t});\n\t\t},\n\n\t\t/**@\n         * #Qrafty.domHelper.translate\n         * @comp Qrafty.domHelper\n         * @kind Method\n         * \n         * @sign public Object Qrafty.domHelper.translate(Number clientX, Number clientY[, DrawLayer layer[, Object out]])\n         * @param clientX - clientX position in the browser screen\n         * @param clientY - clientY position in the browser screen\n         * @param layer - a Qrafty draw layer\n         * @param out - an optional object to save result in\n         * @return Object `{x: ..., y: ...}` with Qrafty coordinates.\n         * \n         * The parameters clientX and clientY are pixel coordinates within the visible\n         * browser window. This function translates those to Qrafty coordinates (i.e.,\n         * the coordinates that you might apply to an entity), by taking into account\n         * where the stage is within the screen, what the current viewport is, etc.\n         * \n         * If a draw layer is specified, the returned object will take into account any special scaling rules for that object.\n         */\n\t\ttranslate: function (clientX, clientY, layer, out) {\n\t\t\tout = out || {};\n\t\t\tvar doc = document.documentElement;\n\t\t\tvar body = document.body;\n\t\t\tvar view;\n\t\t\t// The branch here is to deal with the fact that the viewport position is the distance TO the origin, not from\n\t\t\t// But the _viewportRect is the opposite -- it uses the same convention as a rectangle that matches the viewport in that layer\n\t\t\t// At some point this should be simplified, probably by altering the viewport to use the more intuitive coordinates\n\t\t\tif (layer) {\n\t\t\t\tview = layer._viewportRect();\n\t\t\t\tout.x = (clientX - _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.x + (doc && doc.scrollLeft || body && body.scrollLeft || 0)) / view._scale + view._x;\n\t\t\t\tout.y = (clientY - _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.y + (doc && doc.scrollTop || body && body.scrollTop || 0)) / view._scale + view._y;\n\t\t\t} else {\n\t\t\t\tview = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport;\n\t\t\t\tout.x = (clientX - _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.x + (doc && doc.scrollLeft || body && body.scrollLeft || 0)) / view._scale - view._x;\n\t\t\t\tout.y = (clientY - _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.y + (doc && doc.scrollTop || body && body.scrollTop || 0)) / view._scale - view._y;\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t}\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/dom-helper.js?");

/***/ }),

/***/ "./src/graphics/dom-layer.js":
/*!***********************************!*\
  !*** ./src/graphics/dom-layer.js ***!
  \***********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\nconst document = window.document;\n\n\n/**@\n * #DomLayer\n * @category Graphics\n * @kind System\n *\n * Collection of mostly private methods to represent entities using the DOM.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default._registerLayerTemplate(\"DOM\", {\n\ttype: \"DOM\",\n\n\t_changedObjs: [],\n\n\t/**@\n     * #._div\n     * @comp DomLayer\n     * @kind Property\n     * @private\n     * \n     * A div inside the `#cr-stage` div that holds all DOM entities.\n     */\n\t_div: null,\n\n\tevents: {\n\t\t// Respond to init & remove events\n\t\t\"LayerInit\": \"layerInit\",\n\t\t\"LayerRemove\": \"layerRemove\",\n\t\t// Bind scene rendering (see drawing.js)\n\t\t\"RenderScene\": \"_render\",\n\t\t// Listen for pixelart changes\n\t\t\"PixelartSet\": \"_setPixelart\"\n\t\t// Layers should generally listen for resize events,\n\t\t// but the DOM layers automatically inherit the stage's dimensions\n\t\t//\"ViewportResize\": \"_resize\"\n\t},\n\n\tlayerInit: function () {\n\t\t// Avoid shared state between systems\n\t\tthis._changedObjs = [];\n\n\t\t// Create the div that will contain DOM elements\n\t\tvar div = this._div = document.createElement(\"div\");\n\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem.appendChild(div);\n\t\tdiv.style.position = \"absolute\";\n\t\tdiv.style.zIndex = this.options.z;\n\t\tdiv.style.transformStyle = \"preserve-3d\"; // Seems necessary for Firefox to preserve zIndexes?\n\t},\n\n\t// Cleanup the DOM when the layer is destroyed\n\tlayerRemove: function() {\n\t\tthis._div.parentNode.removeChild(this._div);\n\t},\n\n\t// Handle whether images should be smoothed or not\n\t_setPixelArt: function(enabled) {\n\t\tvar style = this._div.style;\n\t\tvar camelize = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.domHelper.camelize;\n\t\tif (enabled) {\n\t\t\tstyle[camelize(\"image-rendering\")] = \"optimizeSpeed\";   /* legacy */\n\t\t\tstyle[camelize(\"image-rendering\")] = \"-moz-crisp-edges\";    /* Firefox */\n\t\t\tstyle[camelize(\"image-rendering\")] = \"-o-crisp-edges\";  /* Opera */\n\t\t\tstyle[camelize(\"image-rendering\")] = \"-webkit-optimize-contrast\";   /* Webkit (Chrome & Safari) */\n\t\t\tstyle[camelize(\"-ms-interpolation-mode\")] = \"nearest-neighbor\";  /* IE */\n\t\t\tstyle[camelize(\"image-rendering\")] = \"optimize-contrast\";   /* CSS3 proposed */\n\t\t\tstyle[camelize(\"image-rendering\")] = \"pixelated\";   /* CSS4 proposed */\n\t\t\tstyle[camelize(\"image-rendering\")] = \"crisp-edges\"; /* CSS4 proposed */\n\t\t} else {\n\t\t\tstyle[camelize(\"image-rendering\")] = \"optimizeQuality\";   /* legacy */\n\t\t\tstyle[camelize(\"-ms-interpolation-mode\")] = \"bicubic\";   /* IE */\n\t\t\tstyle[camelize(\"image-rendering\")] = \"auto\";   /* CSS3 */\n\t\t}\n\t},\n\n\t/**@\n     * #.debug\n     * @comp DomLayer\n     * @kind Method\n     * \n     * @sign public .debug()\n     * \n     * Logs the current list of entities that have been invalidated in this layer.\n     */\n\tdebug: function () {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.log(this._changedObjs);\n\t},\n\n\n\t/**@\n     * #._render\n     * @comp DomLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .render()\n     *\n     * When \"RenderScene\" is triggered, draws all DOM entities that have been flagged\n     *\n     * @see DOM#.draw\n     */\n\t_render: function () {\n\t\tvar changed = this._changedObjs;\n\t\t// Adjust the viewport\n\t\tif (this._dirtyViewport) {\n\t\t\tthis._setViewport();\n\t\t\tthis._dirtyViewport = false;\n\t\t}\n\n\t\t//if no objects have been changed, stop\n\t\tif (!changed.length) return;\n\n\t\tvar i = 0,\n\t\t\tk = changed.length;\n\t\t//loop over all DOM elements needing updating\n\t\tfor (; i < k; ++i) {\n\t\t\tchanged[i].draw()._changed = false;\n\t\t}\n\n\t\t//reset DOM array\n\t\tchanged.length = 0;\n\n\t},\n\n\t/**@\n     * #.dirty\n     * @comp DomLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .dirty(ent)\n     * @param ent - The entity to mark as dirty\n     *\n     * Add an entity to the list of DOM object to draw\n     */\n\tdirty: function add(ent) {\n\t\tthis._changedObjs.push(ent);\n\t},\n\n\t/**@\n     * #.attach\n     * @comp DomLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .attach(ent)\n     * @param ent - The entity to add\n     *\n     * Add an entity to the layer\n     */\n\tattach: function attach(ent) {\n\t\tent._drawContext = this.context;\n\t\t// attach the entity's div element to the dom layer\n\t\tthis._div.appendChild(ent._element);\n\t\t// set position style and entity id\n\t\tent._element.style.position = \"absolute\";\n\t\tent._element.id = \"ent\" + ent[0];\n\t},\n    \n\t/**@\n     * #.detach\n     * @comp DomLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .detach(ent)\n     * @param ent - The entity to remove\n     *\n     * Removes an entity from the layer\n     */\n\tdetach: function detach(ent) {\n\t\tthis._div.removeChild(ent._element);\n\t},\n\n\t// Sets the viewport position and scale\n\t// Called by render when the dirtyViewport flag is set\n\t_setViewport: function() {\n\t\tvar style = this._div.style,\n\t\t\tview = this._viewportRect();\n\n\t\tvar scale = view._scale;\n\t\tvar dx = -view._x * scale;\n\t\tvar dy = -view._y * scale;\n\n\t\tstyle.transform = style[_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.prefix + \"Transform\"] = \"scale(\" + scale + \", \" + scale + \")\";\n\t\tstyle.left = Math.round(dx) + \"px\";\n\t\tstyle.top = Math.round(dy) + \"px\";\n\t\tstyle.zIndex = this.options.z;\n\t}\n\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/dom-layer.js?");

/***/ }),

/***/ "./src/graphics/dom.js":
/*!*****************************!*\
  !*** ./src/graphics/dom.js ***!
  \*****************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\nconst document = window.document;\n\n/**@\n * #DOM\n * @category Graphics\n * @kind Component\n *\n * A component which renders entities as DOM nodes, specifically `<div>`s.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"DOM\", {\n\t/**@\n     * #._element\n     * @comp DOM\n     * @kind Property\n     * The DOM element used to represent the entity.\n     */\n\t_element: null,\n\t//holds current styles, so we can check if there are changes to be written to the DOM\n\t_cssStyles: null,\n\n\t/**@\n     * #.avoidCss3dTransforms\n     * @comp DOM\n     * @kind Property\n     * \n     * Avoids using of CSS 3D Transform for positioning when true. Default value is false.\n     */\n\tavoidCss3dTransforms: false,\n\n\tinit: async function () {\n\t\tawait this.requires(\"Renderable\");\n        \n\t\tthis._cssStyles = {\n\t\t\tvisibility: \"\",\n\t\t\tleft: \"\",\n\t\t\ttop: \"\",\n\t\t\twidth: \"\",\n\t\t\theight: \"\",\n\t\t\tzIndex: \"\",\n\t\t\topacity: \"\",\n\t\t\ttransformOrigin: \"\",\n\t\t\ttransform: \"\"\n\t\t};\n\t\tthis._element = document.createElement(\"div\");\n\n\t\t// Attach the entity to the dom layer\n\t\tif (!this._customLayer){\n\t\t\tthis._attachToLayer( _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"DefaultDOMLayer\") );\n\t\t}\n\n\t\tthis.bind(\"NewComponent\", this._updateClass);\n\t\tthis.bind(\"RemoveComponent\", this._removeClass);\n\t},\n\n\tremove: function(){\n\t\tthis._detachFromLayer();\n\t\tthis.unbind(\"NewComponent\", this._updateClass);\n\t\tthis.unbind(\"RemoveComponent\", this._removeClass);\n\t},\n\n\t/**@\n     * #.getDomId\n     * @comp DOM\n     * @kind Method\n     * \n     * @sign public this .getDomId()\n     *\n     * Get the Id of the DOM element used to represent the entity.\n     */\n\tgetDomId: function () {\n\t\treturn this._element.id;\n\t},\n\n\t// removes a component on RemoveComponent events\n\t_removeClass: function(removedComponent) {\n\t\tvar comp,\n\t\t\tc = this.__c,\n\t\t\tstr = \"\";\n\t\tfor (comp in c) {\n\t\t\tif (comp !== removedComponent) {\n\t\t\t\tstr += \" \" + comp;\n\t\t\t}\n\t\t}\n\t\tstr = str.substr(1);\n\t\tthis._element.className = str;\n\t},\n\n\t// adds a class on NewComponent events\n\t_updateClass: function() {\n\t\tvar comp,\n\t\t\tc = this.__c,\n\t\t\tstr = \"\";\n\t\tfor (comp in c) {\n\t\t\tstr += \" \" + comp;\n\t\t}\n\t\tstr = str.substr(1);\n\t\tthis._element.className = str;\n\t},\n\n\t/**@\n     * #.DOM\n     * @comp DOM\n     * @kind Method\n     * \n     * @trigger Draw - when the entity is ready to be drawn to the stage - { style:String, type:\"DOM\", co}\n     * @sign public this .DOM(HTMLElement elem)\n     * @param elem - HTML element that will replace the dynamically created one\n     *\n     * Pass a DOM element to use rather than one created. Will set `._element` to this value. Removes the old element.\n     * \n     * Will reattach the entity to the current draw layer\n     */\n\tDOM: function (elem) {\n\t\tif (elem && elem.nodeType) {\n\t\t\tvar layer = this._drawLayer;\n\t\t\tthis._detachFromLayer();\n\t\t\tthis._element = elem;\n\t\t\tthis._attachToLayer(layer);\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.draw\n     * @comp DOM\n     * @kind Method\n     * @private\n     * \n     * @sign public this .draw(void)\n     *\n     * Updates the CSS properties of the node to draw on the stage.\n     */\n\tdraw: function () {\n\t\tvar style = this._element.style,\n\t\t\tcoord = this.__coord || [0, 0, 0, 0],\n\t\t\tco = {\n\t\t\t\tx: coord[0],\n\t\t\t\ty: coord[1],\n\t\t\t\tw: coord[2],\n\t\t\t\th: coord[3]\n\t\t\t},\n\t\t\tprefix = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.prefix,\n\t\t\ttrans = [];\n\n\t\tif (this._cssStyles.visibility !== this._visible) {\n\t\t\tthis._cssStyles.visibility = this._visible;\n\t\t\tif (!this._visible) {\n\t\t\t\tstyle.visibility = \"hidden\";\n\t\t\t} else {\n\t\t\t\tstyle.visibility = \"visible\";\n\t\t\t}\n\t\t}\n\n\t\t//utilize CSS3 if supported\n\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.css3dtransform && !this.avoidCss3dTransforms) {\n\t\t\ttrans.push(\"translate3d(\" + (~~this._x) + \"px,\" + (~~this._y) + \"px,0)\");\n\t\t} else {\n\t\t\tif (this._cssStyles.left !== this._x) {\n\t\t\t\tthis._cssStyles.left = this._x;\n\t\t\t\tstyle.left = ~~ (this._x) + \"px\";\n\t\t\t}\n\t\t\tif (this._cssStyles.top !== this._y) {\n\t\t\t\tthis._cssStyles.top = this._y;\n\t\t\t\tstyle.top = ~~ (this._y) + \"px\";\n\t\t\t}\n\t\t}\n\n\t\tif (this._cssStyles.width !== this._w) {\n\t\t\tthis._cssStyles.width = this._w;\n\t\t\tstyle.width = ~~ (this._w) + \"px\";\n\t\t}\n\t\tif (this._cssStyles.height !== this._h) {\n\t\t\tthis._cssStyles.height = this._h;\n\t\t\tstyle.height = ~~ (this._h) + \"px\";\n\t\t}\n\t\tif (this._cssStyles.zIndex !== this._z) {\n\t\t\tthis._cssStyles.zIndex = this._z;\n\t\t\tstyle.zIndex = this._z;\n\t\t}\n\n\t\tif (this._cssStyles.opacity !== this._alpha) {\n\t\t\tthis._cssStyles.opacity = this._alpha;\n\t\t\tstyle.opacity = this._alpha;\n\t\t\tstyle[prefix + \"Opacity\"] = this._alpha;\n\t\t}\n\n\t\tif (this._mbr) {\n\t\t\tvar origin = this._origin.x + \"px \" + this._origin.y + \"px\";\n\t\t\tstyle.transformOrigin = origin;\n\t\t\tstyle[prefix + \"TransformOrigin\"] = origin;\n\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.css3dtransform) trans.push(\"rotateZ(\" + this._rotation + \"deg)\");\n\t\t\telse trans.push(\"rotate(\" + this._rotation + \"deg)\");\n\t\t}\n\n\t\tif (this._flipX) {\n\t\t\ttrans.push(\"scaleX(-1)\");\n\t\t}\n\n\t\tif (this._flipY) {\n\t\t\ttrans.push(\"scaleY(-1)\");\n\t\t}\n\n\t\tif (this._cssStyles.transform !== trans.join(\" \")) {\n\t\t\tthis._cssStyles.transform = trans.join(\" \");\n\t\t\tstyle.transform = this._cssStyles.transform;\n\t\t\tstyle[prefix + \"Transform\"] = this._cssStyles.transform;\n\t\t}\n\n\t\tthis.trigger(\"Draw\", {\n\t\t\tstyle: style,\n\t\t\ttype: \"DOM\",\n\t\t\tco: co\n\t\t});\n\n\t\treturn this;\n\t},\n\n\t_setCssProperty: function(style, key, val) {\n\t\tkey = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.domHelper.camelize(key);\n\t\tif (typeof val === \"number\") val += \"px\";\n\t\tstyle[key] = val;\n\t\tthis.trigger(\"SetStyle\", key);\n\t},\n\n\t/**@\n     * #.css\n     * @comp DOM\n     * @kind Method\n     * @trigger SetStyle - for each style that is set - string - propertyName\n     * \n     * @sign public css(String property, String value)\n     * @param property - CSS property to modify\n     * @param value - Value to give the CSS property\n     *\n     * @sign public  css(Object map)\n     * @param map - Object where the key is the CSS property and the value is CSS value\n     *\n     * Apply CSS styles to the element.\n     *\n     * Can pass an object where the key is the style property and the value is style value.\n     *\n     * For setting one style, simply pass the style as the first argument and the value as the second.\n     *\n     * The notation can be CSS or JS (e.g. `border-radius` or `borderRadius`).\n     *\n     * To return a value, pass the property.\n     *\n     * Note: For entities with \"Text\" component, some css properties are controlled by separate functions\n     * `.textFont()`, `.textAlign()` and `.textColor()`.  When possible, prefer text-specific methods, since\n     * they will work for non-DOM text.\n     * See the Text component for details.\n     *\n     * @example\n     * ~~~\n     * this.css({'border': '1px solid black', 'text-decoration': 'line-through'});\n     * this.css(\"textDecoration\", \"line-through\");\n     * this.css(\"text-Decoration\"); //returns line-through\n     * ~~~\n     */\n\tcss: function (obj, value) {\n\t\tvar key,\n\t\t\telem = this._element,\n\t\t\tval,\n\t\t\tstyle = elem.style;\n\n\t\t//if an object passed\n\t\tif (typeof obj === \"object\") {\n\t\t\tfor (key in obj) {\n\t\t\t\tif (!obj.hasOwnProperty(key)) continue;\n\t\t\t\tval = obj[key];\n\t\t\t\tthis._setCssProperty(style, key, val);\n\t\t\t}\n\t\t} else {\n\t\t\t//if a value is passed, set the property\n\t\t\tif (value) {\n\t\t\t\tthis._setCssProperty(style, obj, value);\n\t\t\t} else { //otherwise return the computed property\n\t\t\t\treturn _core_core__WEBPACK_IMPORTED_MODULE_0__.default.domHelper.getStyle(elem, obj);\n\t\t\t}\n\t\t}\n\n\t\tthis.trigger(\"Invalidate\");\n        \n\n\t\treturn this;\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/dom.js?");

/***/ }),

/***/ "./src/graphics/drawing.js":
/*!*********************************!*\
  !*** ./src/graphics/drawing.js ***!
  \*********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.background\n     * @category Graphics, Stage\n     * @kind Method\n     *\n     * @sign public void Qrafty.background(String style)\n     * @param style - Modify the background with a color or image\n     *\n     * This method is a shortcut for adding a background\n     * style to the stage element, i.e.\n     * `Qrafty.stage.elem.style.background = ...`\n     *\n     * For example, if you want the background to be white,\n     * with an image in the center, you might use:\n     * ~~~\n     * Qrafty.background('#FFFFFF url(landscape.png) no-repeat center center');\n     * ~~~\n     */\n\tbackground: function (style) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem.style.background = style;\n\t},\n\n\t/**@\n     * #Qrafty.pixelart\n     * @category Graphics\n     * @kind Method\n     * \n     * @sign public void Qrafty.pixelart(Boolean enabled)\n     * @param enabled - whether to preserve sharp edges when rendering images\n     *\n     * Sets the image smoothing for drawing images (for all layer types).\n     *\n     * Setting this to true disables smoothing for images, which is the preferred\n     * way for drawing pixel art. Defaults to false.\n     *\n     * This feature is experimental and you should be careful with cross-browser compatibility. \n     * The best way to disable image smoothing is to use the Canvas render method and the Sprite component for drawing your entities.\n     *\n     * If you want to switch modes in the middle of a scene, \n     * be aware that canvas entities won't be drawn in the new style until something else invalidates them. \n     * (You can manually invalidate all canvas entities with `Qrafty(\"Canvas\").trigger(\"Invalidate\");`)\n     *\n     * @note Firefox_26 currently has a [bug](https://bugzilla.mozilla.org/show_bug.cgi?id=696630) \n     * which prevents disabling image smoothing for Canvas entities that use the Image component. Use the Sprite\n     * component instead.\n     *\n     * @note Webkit (Chrome & Safari) currently has a bug [link1](http://code.google.com/p/chromium/issues/detail?id=134040) \n     * [link2](http://code.google.com/p/chromium/issues/detail?id=106662) that prevents disabling image smoothing\n     * for DOM entities.\n     *\n     * @example\n     * This is the preferred way to draw pixel art with the best cross-browser compatibility.\n     * ~~~\n     * Qrafty.pixelart(true);\n     * \n     * Qrafty.sprite(imgWidth, imgHeight, \"spriteMap.png\", {sprite1:[0,0]});\n     * Qrafty.e(\"2D, Canvas, sprite1\");\n     * ~~~\n     */\n\t_pixelartEnabled: false,\n\tpixelart: function(enabled) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default._pixelartEnabled = enabled;\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"PixelartSet\", enabled);\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/drawing.js?");

/***/ }),

/***/ "./src/graphics/gl-textures.js":
/*!*************************************!*\
  !*** ./src/graphics/gl-textures.js ***!
  \*************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n// An object for wrangling textures\n// An assumption here is that doing anything with textures is fairly expensive, so the code should be expressive rather than performant\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.TextureManager = TextureManager;\n\nfunction TextureManager (gl, webgl) {\n\tthis.gl = gl;\n\tthis.webgl = webgl;\n\t// The maximum number of units the environment says it supports\n\tthis.max_units =  gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n\t// An array of textures bound to a texture unit; position corresponds to the unit in question\n\tthis.bound_textures = [];\n\t// A dictionary of registered textures, so that multiple copies of the same texture aren't generated\n\tthis.registered_textures = {};\n\t// Try to track which texture is active\n\tthis.active = null;\n}\n\nTextureManager.prototype = {\n\n\t// Clear out the bound textures and other existing state\n\treset: function(){\n\t\tvar t;\n\t\tfor (var i = 0; i < this.bound_textures.length; i++){\n\t\t\tt = this.bound_textures[i];\n\t\t\tt.unbind();\n\t\t}\n\t\tthis.bound_textures = [];\n\t\tthis.active = null;\n\t},\n\n\t// creates a texture out of the given image and repeating state\n\t// The url is just used to generate a unique id for the texture\n\tmakeTexture: function(url, image, repeating) {\n\t\t// gl is the context, webgl is the Qrafty object containing prefs/etc\n\t\t// var gl = this.gl;\n\t\tvar webgl = this.webgl;\n\n\t\t// Check whether a texture that matches the one requested already exists\n\t\tvar id =  \"texture-(r:\" + repeating + \")-\" + url;\n\t\tif (typeof this.registered_textures[id] !== \"undefined\")\n\t\t\treturn this.registered_textures[id];\n\n\t\t// Create a texture, bind it to the next available unit\n\t\tvar t = new TextureWrapper(this, id);\n\t\tthis.registered_textures[id] = t;\n\t\tthis.bindTexture(t);\n\n\t\t// Set the properties of the texture \n\t\tt.setImage(image);\n\t\tt.setFilter(webgl.texture_filter);\n\t\tt.setRepeat(repeating);\n\n\t\treturn t;\n\t},\n\n\t// Returns the bound texture of smallest size\n\t// If we have more textures than available units, we should preferentially leave the larger textures bound?\n\tsmallest: function() {\n\t\tvar min_size = Infinity;\n\t\tvar index = null;\n\t\tfor (var i=0; i<this.bound_textures.length; i++) {\n\t\t\tvar t = this.bound_textures[i];\n\t\t\tif (t.size < min_size) {\n\t\t\t\tmin_size = t.size;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t},\n\n\t// Returns either the first empty unit, or the unit of the smallest bound texture\n\tgetAvailableUnit: function() {\n\t\tif (this.bound_textures.length < this.max_units) {\n\t\t\treturn this.bound_textures.length;\n\t\t} else {\n\t\t\treturn this.smallest();\n\t\t}\n\t},\n\n\t// takes a texture object and, if it isn't associated with a unit, binds it to one\n\tbindTexture: function(t) {\n\t\t// return if the texture is already bound\n\t\tif (t.unit !== null) return;\n\t\tvar i = this.getAvailableUnit();\n\t\tif (this.bound_textures[i]){\n\t\t\tthis.unbindTexture(this.bound_textures[i]);\n\t\t}\n\t\tthis.bound_textures[i] = t;\n\t\tt.bind(i);\n\n\t},\n\n\t// We don't actually \"unbind\" the texture -- we just set it's bound state to null\n\t// This is called before another texture is bound\n\tunbindTexture: function(t) {\n\t\tt.unbind();\n\t},\n\n\tsetActiveTexture: function(t) {\n\t\tif (this.active === t.id) return;\n\t\tthis.gl.activeTexture(this.gl[t.name]);\n\t\tthis.active = t.unit;\n\t}\n\n};\n\n// An object for abstracting out the gl calls associated with textures\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.TextureWrapper = TextureWrapper;\n\nfunction TextureWrapper (manager, id){\n\tthis.manager = manager;\n\tthis.gl = manager.gl;\n\tthis.glTexture = this.gl.createTexture();\n\tthis.id = id;\n\tthis.active = false;\n\tthis.unit = null;\n\tthis.powerOfTwo = false;\n}\n\nTextureWrapper.prototype = {\n\n\t// Given a number, binds to the corresponding texture unit\n\tbind: function(unit) {\n\t\tvar gl = this.gl;\n\t\tthis.unit = unit;\n\t\tthis.name = \"TEXTURE\" + unit;\n\t\tthis.manager.setActiveTexture(this);\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.glTexture);\n\t},\n\n\t// Check whether this texture is active (important for setting properties)\n\tisActive: function() {\n\t\treturn (this.manager.active === this.unit);\n\t},\n\n\t// Since gl doesn't require unbinding, just clears the metadata\n\tunbind: function() {\n\t\tthis.unit = null;\n\t\tthis.name = null;\n\t\tif(this.isActive())\n\t\t\tthis.manager.active = null;\n\t},\n\n\t// actually loads an image into the texture object; sets the appropriate metadata\n\tsetImage: function(image) {\n\t\tif(!this.isActive()) throw(\"Trying to set image of texture that isn't active\");\n\t\tthis.width = image.width;\n\t\tthis.height = image.height;\n\t\tthis.size = image.width * image.height;\n\t\tthis.powerOfTwo = !((Math.log(image.width)/Math.LN2 !== Math.floor(Math.log(image.width)/Math.LN2)) || (Math.log(image.height)/Math.LN2 !== Math.floor(Math.log(image.height)/Math.LN2)));\n\t\tvar gl = this.gl;\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\t},\n\n\t// Sets the min/mag filters\n\tsetFilter: function(filter) {\n\t\tif(!this.isActive()) throw(\"Trying to set filter of texture that isn't active\");\n\t\tvar gl = this.gl;\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n\t},\n\n\t// set image wrapping\n\tsetRepeat: function(repeat) {\n\t\tif(!this.isActive()) throw(\"Trying to set repeat property of texture that isn't active\");\n\t\tif(repeat && !this.powerOfTwo){\n\t\t\tthrow(\"Can't create a repeating image whose dimensions aren't a power of 2 in WebGL contexts\");\n\t\t}\n\t\tvar gl = this.gl;\n\t\tthis.repeatMode = repeat ? gl.REPEAT : gl.CLAMP_TO_EDGE;\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.repeatMode);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.repeatMode);\n\t},\n\n\t// given a shader and pair of uniform names, sets the sampler and dimensions to be used by this texture\n\tsetToProgram: function(shader, sampler_name, dimension_name) {\n\t\tif(this.unit === null) throw(\"Trying to use texture not set to a texture unit.\");\n\t\tvar gl = this.gl;\n\t\tgl.useProgram(shader);\n\t\t// Set the texture buffer to use\n\t\tgl.uniform1i(gl.getUniformLocation(shader, sampler_name), this.unit);\n\t\t// Set the image dimensions\n\t\tgl.uniform2f(gl.getUniformLocation(shader, dimension_name), this.width, this.height);\n\t}\n};\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/gl-textures.js?");

/***/ }),

/***/ "./src/graphics/html.js":
/*!******************************!*\
  !*** ./src/graphics/html.js ***!
  \******************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #HTML\n * @category Graphics\n * @kind Component\n *\n * A component which allows for the insertion of arbitrary HTML into a DOM entity.  \n *\n * Adding this to an entity will automatically add the `DOM` component.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"HTML\", {\n\tinner: \"\",\n\n\tinit: async function () {\n\t\tawait this.requires(\"2D, DOM\");\n\t},\n\n\t/**@\n     * #.replace\n     * @comp HTML\n     * @kind Method\n     * \n     * @sign public this .replace(String html)\n     * @param html - arbitrary html\n     *\n     * This method will replace the content of this entity with the supplied html\n     *\n     * @example\n     * Create a link\n     * ~~~\n     * Qrafty.e(\"HTML\")\n     *    .attr({x:20, y:20, w:100, h:100})\n     *    .replace(\"<a href='index.html'>Index</a>\");\n     * ~~~\n     */\n\treplace: function (new_html) {\n\t\tthis.inner = new_html;\n\t\tthis._element.innerHTML = new_html;\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.append\n     * @comp HTML\n     * @kind Method\n     * \n     * @sign public this .append(String html)\n     * @param html - arbitrary html\n     *\n     * This method will add the supplied html in the end of the entity\n     *\n     * @example\n     * Create a link\n     * ~~~\n     * Qrafty.e(\"HTML\")\n     *    .attr({x:20, y:20, w:100, h:100})\n     *    .append(\"<a href='index.html'>Index</a>\");\n     * ~~~\n     */\n\tappend: function (new_html) {\n\t\tthis.inner += new_html;\n\t\tthis._element.innerHTML += new_html;\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.prepend\n     * @comp HTML\n     * @kind Method\n     * \n     * @sign public this .prepend(String html)\n     * @param html - arbitrary html\n     *\n     * This method will add the supplied html in the beginning of the entity\n     *\n     * @example\n     * Create a link\n     * ~~~\n     * Qrafty.e(\"HTML\")\n     *    .attr({x:20, y:20, w:100, h:100})\n     *    .prepend(\"<a href='index.html'>Index</a>\");\n     * ~~~\n     */\n\tprepend: function (new_html) {\n\t\tthis.inner = new_html + this.inner;\n\t\tthis._element.innerHTML = new_html + this.inner;\n\t\treturn this;\n\t}\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/html.js?");

/***/ }),

/***/ "./src/graphics/image.js":
/*!*******************************!*\
  !*** ./src/graphics/image.js ***!
  \*******************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n//\n// Define some variables required for webgl\n//var fs = require(\"fs\");\n\nconst shaders_sprite_vert = `attribute vec2 aPosition;\nattribute vec3 aOrientation;\nattribute vec2 aLayer;\nattribute vec2 aTextureCoord;\n\nvarying mediump vec3 vTextureCoord;\n\nuniform vec4 uViewport;\nuniform mediump vec2 uTextureDimensions;\n\nmat4 viewportScale = mat4(2.0 / uViewport.z, 0, 0, 0,    0, -2.0 / uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);\nvec4 viewportTranslation = vec4(uViewport.xy, 0, 0);\n\nvoid main() {\n  vec2 pos = aPosition;\n  vec2 entityOrigin = aOrientation.xy;\n  mat2 entityRotationMatrix = mat2(cos(aOrientation.z), sin(aOrientation.z), -sin(aOrientation.z), cos(aOrientation.z));\n  \n  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin ;\n  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0/(1.0+exp(aLayer.x) ), 1) );\n  vTextureCoord = vec3(aTextureCoord, aLayer.y);\n}`;\n\nconst shaders_sprite_frag = `varying mediump vec3 vTextureCoord;\n  \nuniform sampler2D uSampler;\nuniform mediump vec2 uTextureDimensions;\n\nvoid main(void) {\n  highp vec2 coord =   vTextureCoord.xy / uTextureDimensions;\n  mediump vec4 base_color = texture2D(uSampler, coord);\n  gl_FragColor = vec4(base_color.rgb*base_color.a*vTextureCoord.z, base_color.a*vTextureCoord.z);\n}`;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.defaultShader(\"Image\", new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.WebGLShader(\n\tshaders_sprite_vert,\n\tshaders_sprite_frag,\n\t[\n\t\t{ name: \"aPosition\",     width: 2 },\n\t\t{ name: \"aOrientation\",  width: 3 },\n\t\t{ name: \"aLayer\",        width: 2 },\n\t\t{ name: \"aTextureCoord\", width: 2 }\n\t],\n\tfunction(e, _entity) {\n\t\tvar pos = e.pos;\n\t\t// Write texture coordinates\n\t\te.program.writeVector(\"aTextureCoord\",\n\t\t\t0, 0,\n\t\t\t0, pos._h,\n\t\t\tpos._w, 0,\n\t\t\tpos._w, pos._h\n\t\t);\n\t}\n));\n\n/**@\n * #Image\n * @category Graphics\n * @kind Component\n * \n * Draw an image with or without repeating (tiling).\n *\n * If the entity's width and height are smaller than the width and height of the image source, the image will appear cropped.\n * If the entity's dimensions are larger than the dimensions of the image source, the exact appearance of the remaining space will depend on what renderer (WebGL, DOM, or Canvas) is used.\n * However, if tiling is enabled, the remaining space will be filled by a repeating pattern of the image.\n *\n * @note Image scaling is not supported by this component. Use a spritesheet, defined by `Qrafty.sprite`, consisting of a single `Sprite` instead.\n *\n * @see Sprite, Qrafty.sprite\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Image\", {\n\t_repeat: \"repeat\",\n\tready: false,\n\n\tinit: function () {\n\t\tthis.bind(\"Draw\", this._drawImage);\n\t\tthis.bind(\"LayerAttached\", this._setupImage);\n\t},\n\n\tremove: function() {\n\t\tthis.unbind(\"LayerAttached\", this._setupImage);\n\t\tthis.unbind(\"Draw\", this._drawImage);\n\t},\n\n\t/**@\n     * #.image\n     * @comp Image\n     * @kind Method\n     * \n     * @trigger Invalidate - when the image is loaded\n     * @sign public this .image(String url[, String repeat])\n     * @param url - URL of the image\n     * @param repeat - If the image should be repeated to fill the entity.  This follows CSS syntax: (`\"no-repeat\", \"repeat\", \"repeat-x\", \"repeat-y\"`), but defaults to `no-repeat`.\n     *\n     * Draw the specified image.\n     *\n     * @note The default value of repeat is `no-repeat`, which is different than the standard CSS default\n     *\n     * If the width and height are `0` and repeat is set to `no-repeat` the width and\n     * height will automatically assume that of the image. This is an\n     * easy way to create an image without needing sprites.\n     *\n     * If set to `no-repeat` and given dimensions larger than that of the image,\n     * the exact appearance will depend on what renderer (WebGL, DOM, or Canvas) is used.\n     *\n     * @example\n     * Will default to no-repeat. Entity width and height will be set to the images width and height\n     * ~~~\n     * var ent = Qrafty.e(\"2D, DOM, Image\").image(\"myimage.png\");\n     * ~~~\n     * Create a repeating background.\n     * ~~~\n     * var bg = Qrafty.e(\"2D, DOM, Image\")\n     *              .attr({w: Qrafty.viewport.width, h: Qrafty.viewport.height})\n     *              .image(\"bg.png\", \"repeat\");\n     * ~~~\n     *\n     * @see Qrafty.sprite\n     */\n\timage: function (url, repeat) {\n\t\tthis.__image = url;\n\t\tthis._repeat = repeat || \"no-repeat\";\n\n\t\tthis.img = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.asset(url);\n\t\tif (!this.img) {\n\t\t\tthis.img = new Image();\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.asset(url, this.img);\n\t\t\tthis.img.src = url;\n\t\t\tvar self = this;\n\n\t\t\tthis.img.onload = function () {\n\t\t\t\tself._setupImage(self._drawLayer);\n\t\t\t};\n\t\t} else {\n\t\t\tthis._setupImage(this._drawLayer);\n\t\t}\n\n\t\tthis.trigger(\"Invalidate\");\n\n\t\treturn this;\n\t},\n\n\t// called on image change or layer attachment\n\t_setupImage: function(layer){\n\t\tif (!this.img || !layer) return;\n\n\t\tif (layer.type === \"Canvas\") {\n\t\t\tthis._pattern = this._drawContext.createPattern(this.img, this._repeat);\n\t\t} else if (layer.type === \"WebGL\") {\n\t\t\tthis._establishShader(\"image:\" + this.__image, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.defaultShader(\"Image\"));\n\t\t\tthis.program.setTexture( this._drawLayer.makeTexture(this.__image, this.img, (this._repeat!==\"no-repeat\")));\n\t\t}\n\n\t\tif (this._repeat === \"no-repeat\") {\n\t\t\tthis.w = this.w || this.img.width;\n\t\t\tthis.h = this.h || this.img.height;\n\t\t}\n\n\t\tthis.ready = true;\n\t\tthis.trigger(\"Invalidate\");\n\t},\n\n\t_drawImage: function(e){\n\t\tif (e.type === \"canvas\") {\n\t\t\t//skip if no image\n\t\t\tif (!this.ready || !this._pattern) return;\n\n\t\t\tvar context = e.ctx;\n\n\t\t\tcontext.fillStyle = this._pattern;\n\n\t\t\tcontext.save();\n\t\t\tcontext.translate(e.pos._x, e.pos._y);\n\t\t\tcontext.fillRect(0, 0, e.pos._w, e.pos._h);\n\t\t\tcontext.restore();\n\t\t} else if (e.type === \"DOM\") {\n\t\t\tif (this.__image) {\n\t\t\t\te.style.backgroundImage = \"url(\" + this.__image + \")\";\n\t\t\t\te.style.backgroundRepeat = this._repeat;\n\t\t\t}\n\t\t} else if (e.type === \"webgl\") {\n\t\t\te.program.draw(e, this);\n\t\t}\n\n\t}\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/image.js?");

/***/ }),

/***/ "./src/graphics/layers.js":
/*!********************************!*\
  !*** ./src/graphics/layers.js ***!
  \********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t_drawLayerTemplates: {},\n\t_drawLayers: [],\n\t_addDrawLayerInstance: function (layer) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default._drawLayers.push(layer);\n\t\tthis._drawLayers.sort(function (a, b) { return a.options.z - b.options.z; });\n\t},\n\n\t_removeDrawLayerInstance: function (layer) {\n\t\tvar i = this._drawLayers.indexOf(layer);\n\t\tif (i >= 0) {\n\t\t\tthis._drawLayers.splice(i, 1);\n\t\t}\n\t\tthis._drawLayers.sort(function (a, b) { return a.options.z - b.options.z; });\n\t},\n\n\t_registerLayerTemplate: function (type, layerTemplate) {\n\t\tthis._drawLayerTemplates[type] = layerTemplate;\n\t\tvar common = this._commonLayerProperties;\n\n\t\t// add common properties, don't overwrite existing ones\n\t\tfor (var key in common) {\n\t\t\tif (layerTemplate[key]) continue;\n\t\t\tlayerTemplate[key] = common[key];\n\t\t}\n\t},\n\n\t_commonLayerProperties: {\n\t\t// Layer options\n\t\toptions: {\n\t\t\txResponse: 1,\n\t\t\tyResponse: 1,\n\t\t\tscaleResponse: 1,\n\t\t\tz: 0\n\t\t},\n\n\t\t// A tracker for whether any elements in this layer need to listen to mouse/touch events\n\t\t_pointerEntities: 0,\n\n\t\t// Track dirty viewport state - render code should uncheck flag once finished handling it\n\t\t_dirtyViewport: false,\n\n\t\t// A cached version of the viewport rect\n\t\t_cachedViewportRect: null,\n\n\n\t\tinit: function() {\n\t\t\tthis._cachedViewportRect = {};\n\n\t\t\t// Trigger layer-specific init code\n\t\t\tthis.trigger(\"LayerInit\");\n\n\t\t\t// Handle viewport invalidation\n\t\t\tthis.uniqueBind(\"InvalidateViewport\", function () { this._dirtyViewport = true; });\n\t\t\t// Set pixelart to current status\n\t\t\tthis.trigger(\"PixelartSet\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default._pixelartEnabled);\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default._addDrawLayerInstance(this);\n\t\t},\n\n\t\tremove: function() {\n\t\t\t// Trigger layer-specific remove code\n\t\t\tthis.trigger(\"LayerRemove\");\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default._removeDrawLayerInstance(this);\n\t\t},\n\n\t\t// Sort function for rendering in the correct order\n\t\t// Sort by globalZ\n\t\t_sort: function(a, b) {\n\t\t\treturn a._globalZ - b._globalZ;\n\t\t},\n\n\t\t// Based on the camera options, find the Qrafty coordinates\n\t\t// corresponding to the layer's position in the viewport\n\t\t_viewportRect: function (useCached) {\n\t\t\tvar rect = this._cachedViewportRect;\n\t\t\tif (useCached) return rect;\n\n\t\t\t// total transform is viewport transform combined with this layer's transform\n\t\t\tvar viewport = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport;\n\t\t\tvar options = this.options;\n\n\t\t\tvar scale = Math.pow(viewport._scale, options.scaleResponse);\n\t\t\trect._scale = scale;\n\t\t\trect._w = viewport._width / scale;\n\t\t\trect._h = viewport._height / scale;\n            \n\t\t\t// This particular transformation is designed such that,\n\t\t\t// if a combination pan/scale keeps the center of the screen fixed for a layer with x/y response of 1,\n\t\t\t// then it will also be fixed for layers with other values for x/y response\n\t\t\t// (note that the second term vanishes when either the response or scale are 1)\n\t\t\trect._x = options.xResponse * (-viewport._x) - \n                0.5 * (options.xResponse - 1) * (1 - 1 / scale) * viewport._width;  \n\t\t\trect._y = options.yResponse * (-viewport._y) - \n                0.5 * (options.yResponse - 1) * (1 - 1 / scale) * viewport._height; \n\n\t\t\treturn rect;\n\t\t},\n\n\t\t// transform a given rect to view space, depending on this layers' total transform\n\t\t_viewTransformRect: function(rect, outRect, useCached) {\n\t\t\tvar view = this._viewportRect(useCached),\n\t\t\t\tscale = view._scale;\n\n\t\t\toutRect = outRect || {};\n\t\t\toutRect._x = rect._x * scale + Math.round(-view._x * scale);\n\t\t\toutRect._y = rect._y * scale + Math.round(-view._y * scale);\n\t\t\toutRect._w = rect._w * scale;\n\t\t\toutRect._h = rect._h * scale;\n\n\t\t\treturn outRect;\n\t\t}\n\t},\n\n\t/**@\n     * #Qrafty.createLayer\n     * @kind Method\n     * @category Graphics\n     *\n     * @sign public void Qrafty.createLayer(string name, string type[, object options])\n     * @param name - the name that will refer to the layer\n     * @param type - the type of the draw layer to create ('DOM', 'Canvas', or 'WebGL')\n     * @param options - this will override the default values of each layer\n     *\n     * Creates a new system which implements the specified type of layer.  The options (and their default values) are\n     *\n     * ```\n     * {\n     *   xResponse: 1,  // How the layer will pan in response to the viewport x position\n     *   yResponse: 1,  // How the layer will pan in response to the viewport y position\n     *   scaleResponse: 1, // How the layer will scale in response to the viewport scale.  (Layer scale will be scale^scaleResponse.)\n     *   z: 0 // The zIndex of the layer relative to other layers\n     * }\n     * ```\n     *\n     * Qrafty will automatically define three built-in layers: \"DefaultDOMLayer\", DefaultCanvasLayer\",  and \"DefaultWebGLLayer\".\n     * They will have `z` values of `30`, `20`, and `10` respectively, and will be initialized if a \"DOM\", \"Canvas\" or \"WebGL\" component\n     * is used with an entity not attached to any user-specified layer.\n     * \n     * @note Layers are implemented as systems, so the layer name must be distinct from other systems.\n     * \n     * @note By default, layers will persist across scene changes.  You can manually clean up a layer by removing all it's entities and then destroying it.\n     *\n     * @example\n     * ```\n     * Qrafty.createLayer(\"MyCanvasLayer\", \"Canvas\")\n     * Qrafty.e(\"2D, MyCanvasLayer, Color\");\n     * ```\n     * Define a custom canvas layer, then create an entity that uses the custom layer to render.\n     *\n     * @example\n     * ```\n     * Qrafty.createLayer(\"UILayer\", \"DOM\", {scaleResponse: 0, xResponse: 0, yResponse: 0})\n     * Qrafty.e(\"2D, UILayer, Text\");\n     * ```\n     * Define a custom DOM layer that will not move with the camera.  (Useful for static UI elements!)\n     *\n     * @example\n     * ```\n     * Qrafty.createLayer(\"MyCanvasLayer\", \"Canvas\");\n     * Qrafty.s(\"MyCanvasLayer\").one(\"RenderScene\", function(){ this.everRendered = true; }); \n     * ```\n     * Create a custom layer, and then bind a method to run the first time it renders.\n     * * @example\n     * ```\n     * Qrafty(\"MyCanvasLayer\").destroy();\n     * Qrafty.s(\"MyCanvasLayer\").destroy(); \n     * ```\n     * For a previously defined \"MyCanvasLayer\", destroy it and all the entities rendered by it.\n     */\n\tcreateLayer: function createLayer(name, type, options) {\n\t\tvar layerTemplate = this._drawLayerTemplates[type];\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(name, layerTemplate, options);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(name, {\n\t\t\tinit: function () {\n\t\t\t\tthis.requires(\"Renderable\"); \n                \n\t\t\t\t// Flag to indicate that the base component doesn't need to attach a layer\n\t\t\t\tthis._customLayer = true;\n\t\t\t\tthis.requires(layerTemplate.type);\n\t\t\t\tthis._attachToLayer(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(name));\n\t\t\t},\n\n\t\t\tremove: function () {\n\t\t\t\tthis._detachFromLayer();\n\t\t\t}\n\t\t});\n\t}\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/layers.js?");

/***/ }),

/***/ "./src/graphics/particles.js":
/*!***********************************!*\
  !*** ./src/graphics/particles.js ***!
  \***********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n// Particles are based on Parcycle by Mr. Speaker, licensed under the MIT, Ported by Leo Koppelkamm //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**@\n * #Particles\n * @category Graphics\n * @kind Component\n *\n * @trigger ParticleStart - when the particle animation has started\n * @trigger ParticleEnd - when the particle animation has finished\n *\n * Create particle effects.\n *\n * Particles won't be drawn outside the entity's bounds. Make sure to adjust the entity's dimensions accordingly.\n *\n * @note Particles effects currently work exclusively with the Canvas render backend.\n * Particles won't be drawn if the browser doesn't support this!\n *\n * @see .particles\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Particles\", {\n\trequired: \"Renderable\",\n\tready: true,\n\n\t_particlesPaused: false,\n\n\tinit: function () {\n\t\t// We need to clone particle handler object to avoid shared object trap\n\t\tthis._Particles = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.clone(this._Particles);\n\t\t// Add default options\n\t\tthis._Particles.init();\n\n\t\tthis._Particles.parentEntity = this;\n\t},\n\n\tevents: {\n\t\t\"UpdateFrame\": function () {\n\t\t\t// don't update if paused or no particle fx active\n\t\t\tif (this._particlesPaused || !this._Particles.active) return;\n\n\t\t\t// This updates all particle colors & positions\n\t\t\tthis._Particles.update();\n\t\t\t// Request redraw from render backend, as appearance has changed\n\t\t\tthis.trigger(\"Invalidate\");\n\t\t},\n\n\t\t\"Draw\": function (e) {\n\t\t\t// don't render if no particle fx active, but do redraw paused particles\n\t\t\tif (!this._Particles.active) return;\n\n\t\t\tif (e.type === \"canvas\") {\n\t\t\t\t// This renders the updated particles\n\t\t\t\tthis._Particles.render(e);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**@\n     * #.particles\n     * @comp Particles\n     * @kind Method\n     * \n     * @sign public this .particles([Object options])\n     * @param options - Map of options that specify the behavior and look of the particles.\n     *\n     * Create a new particle animation.\n     *\n     * If the `options` object is missing a property, the default will be used.\n     * Default options are listed in the example below.\n     *\n     * Invoking this method without an `options` object will restart the particle animation\n     * with the previously used options, or the default options otherwise.\n     *\n     * @example\n     * ~~~\n     * var options = {\n     *   maxParticles: 150,\n     *   size: 18,\n     *   sizeRandom: 4,\n     *   speed: 1,\n     *   speedRandom: 1.2,\n     *   // Lifespan in frames\n     *   lifeSpan: 29,\n     *   lifeSpanRandom: 7,\n     *   // Angle is calculated clockwise: 12pm is 0deg, 3pm is 90deg etc.\n     *   angle: 65,\n     *   angleRandom: 34,\n     *   startColour: [255, 131, 0, 1],\n     *   startColourRandom: [48, 50, 45, 0],\n     *   endColour: [245, 35, 0, 0],\n     *   endColourRandom: [60, 60, 60, 0],\n     *   // Only applies when fastMode is off, specifies how sharp the gradients are drawn\n     *   sharpness: 20,\n     *   sharpnessRandom: 10,\n     *   // Random spread from origin\n     *   spread: 10,\n     *   // How many frames should this last\n     *   duration: -1,\n     *   // Will draw squares instead of circle gradients\n     *   fastMode: false,\n     *   gravity: { x: 0, y: 0.1 },\n     *   // sensible values are 0-3\n     *   jitter: 0,\n     *   // Offset for the origin of the particles\n     *   originOffset: {x: 0, y: 0}\n     * };\n     *\n     * Qrafty.e(\"2D, Canvas, Particles\")\n     *     .attr({ w: 200, h: 200 })\n     *     // debug entity's bounds while developing\n     *     // make sure particles fit into entity's bounds\n     *     .addComponent('WiredMBR')\n     *     // init particle animation\n     *     .particles(options);\n     * ~~~\n     */\n\tparticles: function (options) {\n\t\t// Overwrite default options\n\t\tthis._Particles.config(options);\n\t\t// Start animation\n\t\tthis._Particles.start();\n\n\t\treturn this;\n\t},\n\n\t_Particles: {\n\t\tpresets: {\n\t\t\tmaxParticles: 150,\n\t\t\tsize: 18,\n\t\t\tsizeRandom: 4,\n\t\t\tspeed: 1,\n\t\t\tspeedRandom: 1.2,\n\t\t\t// Lifespan in frames\n\t\t\tlifeSpan: 29,\n\t\t\tlifeSpanRandom: 7,\n\t\t\t// Angle is calculated clockwise: 12pm is 0deg, 3pm is 90deg etc.\n\t\t\tangle: 65,\n\t\t\tangleRandom: 34,\n\t\t\tstartColour: [255, 131, 0, 1],\n\t\t\tstartColourRandom: [48, 50, 45, 0],\n\t\t\tendColour: [245, 35, 0, 0],\n\t\t\tendColourRandom: [60, 60, 60, 0],\n\t\t\t// Only applies when fastMode is off, specifies how sharp the gradients are drawn\n\t\t\tsharpness: 20,\n\t\t\tsharpnessRandom: 10,\n\t\t\t// Random spread from origin\n\t\t\tspread: 10,\n\t\t\t// How many frames should this last\n\t\t\tduration: -1,\n\t\t\t// Will draw squares instead of circle gradients\n\t\t\tfastMode: false,\n\t\t\tgravity: {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0.1\n\t\t\t},\n\t\t\t// sensible values are 0-3\n\t\t\tjitter: 0,\n\t\t\t// offset of particles from origin\n\t\t\toriginOffset: {x: 0, y: 0}\n\t\t},\n\t\temissionRate: 0,\n\n\t\telapsedFrames: 0,\n\t\temitCounter: 0,\n\t\tactive: true,\n\t\tparticles: [],\n\n\t\tinit: function () {\n\t\t\t// Create initial config by adding presets.\n\t\t\tfor (var key in this.presets) {\n\t\t\t\tthis[key] = this.presets[key];\n\t\t\t}\n\t\t},\n\n\t\tconfig: function (options) {\n\t\t\toptions = options || {};\n\n\t\t\t// Create current config by merging in given options.\n\t\t\tfor (var key in options) {\n\t\t\t\tthis[key] = options[key];\n\t\t\t}\n\t\t\tthis.emissionRate = this.maxParticles / this.lifeSpan;\n\n\t\t\t// Create a new pool of particles, if it doesn't match existing one\n\t\t\tif (this.particles.length !== this.maxParticles) {\n\t\t\t\tthis.particles.length = 0;\n\t\t\t\tfor (var i = 0, l = this.maxParticles; i < l; ++i) {\n\t\t\t\t\tthis.particles.push(new this.Particle());\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tstart: function () {\n\t\t\t// (re)set active state\n\t\t\tthis.active = true;\n\t\t\tthis.elapsedFrames = 0;\n\t\t\tthis.emitCounter = 0;\n\n\t\t\t// reset particle pool state between multiple animations, make sure timeToLive === 0\n\t\t\tvar particles = this.particles;\n\t\t\tfor (var i = 0, l = particles.length; i < l; ++i) {\n\t\t\t\tparticles[i].timeToLive = 0;\n\t\t\t}\n\n\t\t\tthis.parentEntity.trigger(\"ParticleStart\");\n\t\t},\n\n\t\tstop: function () {\n\t\t\t// set disabled state\n\t\t\tthis.active = false;\n\n\t\t\tthis.parentEntity.trigger(\"ParticleEnd\");\n\t\t},\n\n\t\tinitParticle: function (particle) {\n\t\t\tvar angle, speed, size, timeToLive, sharpness, c,\n\t\t\t\tstartR, startG, startB, startA,\n\t\t\t\tendR, endG, endB, endA;\n\n\t\t\tparticle.timeToLive = timeToLive = this.lifeSpan + this.lifeSpanRandom * this.RANDM1TO1();\n\n\t\t\t// TODO default to entity origin instead, deprecate originOffset\n\t\t\t// TODO subtract size/2 from position\n\t\t\tparticle.positionX = this.originOffset.x + this.spread * this.RANDM1TO1();\n\t\t\tparticle.positionY = this.originOffset.y + this.spread * this.RANDM1TO1();\n\n\t\t\tangle = (this.angle + this.angleRandom * this.RANDM1TO1()) * (Math.PI / 180); // convert to radians\n\t\t\tspeed = this.speed + this.speedRandom * this.RANDM1TO1();\n\t\t\t// Could move to lookup for speed\n\t\t\tparticle.directionX = Math.sin(angle) * speed;\n\t\t\tparticle.directionY = -Math.cos(angle) * speed;\n\n\t\t\tsize = this.size + this.sizeRandom * this.RANDM1TO1();\n\t\t\tparticle.size = size = size < 0 ? 0 : ~~size;\n\n\t\t\tsharpness = this.sharpness + this.sharpnessRandom * this.RANDM1TO1();\n\t\t\tparticle.sharpness = sharpness = sharpness > 100 ? 100 : sharpness < 0 ? 0 : sharpness;\n\n\t\t\t// internal circle gradient size - affects the sharpness of the radial gradient\n\t\t\tparticle.sizeSmall = ~~ ((size / 200) * sharpness); //(size/2/100)\n\n\t\t\tc = startR = this.startColour[0] + this.startColourRandom[0] * this.RANDM1TO1();\n\t\t\tparticle.colourR = c > 255 ? 255 : c < 0 ? 0 : ~~c;\n\t\t\tc = startG = this.startColour[1] + this.startColourRandom[1] * this.RANDM1TO1();\n\t\t\tparticle.colourG = c > 255 ? 255 : c < 0 ? 0 : ~~c;\n\t\t\tc = startB = this.startColour[2] + this.startColourRandom[2] * this.RANDM1TO1();\n\t\t\tparticle.colourB = c > 255 ? 255 : c < 0 ? 0 : ~~c;\n\t\t\tc = startA = this.startColour[3] + this.startColourRandom[3] * this.RANDM1TO1();\n\t\t\tparticle.colourA = c > 1 ? 1 : c < 0 ? 0 : (~~(c * 100)) / 100;\n\n\t\t\tendR = this.endColour[0] + this.endColourRandom[0] * this.RANDM1TO1();\n\t\t\tendG = this.endColour[1] + this.endColourRandom[1] * this.RANDM1TO1();\n\t\t\tendB = this.endColour[2] + this.endColourRandom[2] * this.RANDM1TO1();\n\t\t\tendA = this.endColour[3] + this.endColourRandom[3] * this.RANDM1TO1();\n\n\t\t\tparticle.deltaColourR = (endR - startR) / timeToLive;\n\t\t\tparticle.deltaColourG = (endG - startG) / timeToLive;\n\t\t\tparticle.deltaColourB = (endB - startB) / timeToLive;\n\t\t\tparticle.deltaColourA = (endA - startA) / timeToLive;\n\t\t},\n\n\t\tupdate: function () {\n\t\t\tvar RANDM1TO1 = this.RANDM1TO1;\n\t\t\tvar gravityX = this.gravity.x,\n\t\t\t\tgravityY = this.gravity.y;\n\t\t\tvar jitter = this.jitter;\n\n\t\t\t// stop if duration elapsed\n\t\t\tthis.elapsedFrames++;\n\t\t\tif (this.duration >= 0 && this.duration < this.elapsedFrames) {\n\t\t\t\tthis.stop();\n\t\t\t}\n\n\t\t\t// update emission logic\n\t\t\tvar rate = this.emissionRate > 0 ? 1 / this.emissionRate : Infinity;\n\t\t\tthis.emitCounter++;\n\n\t\t\t// update all particles\n\t\t\tvar c, particle, particles = this.particles;\n\t\t\tfor (var i = 0, l = particles.length; i < l; ++i) {\n\t\t\t\tparticle = particles[i];\n\n\t\t\t\t// If the current particle is alive then update it\n\t\t\t\tif (particle.timeToLive > 0) {\n\n\t\t\t\t\t// Calculate the new position based on gravity\n\t\t\t\t\tparticle.directionX += gravityX;\n\t\t\t\t\tparticle.directionY += gravityY;\n\t\t\t\t\tparticle.positionX += particle.directionX;\n\t\t\t\t\tparticle.positionY += particle.directionY;\n\t\t\t\t\tif (jitter) {\n\t\t\t\t\t\tparticle.positionX += jitter * RANDM1TO1();\n\t\t\t\t\t\tparticle.positionY += jitter * RANDM1TO1();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update colours\n\t\t\t\t\tc = particle.colourR + particle.deltaColourR;\n\t\t\t\t\tparticle.colourR = c > 255 ? 255 : c < 0 ? 0 : ~~c;\n\t\t\t\t\tc = particle.colourG + particle.deltaColourG;\n\t\t\t\t\tparticle.colourG = c > 255 ? 255 : c < 0 ? 0 : ~~c;\n\t\t\t\t\tc = particle.colourB + particle.deltaColourB;\n\t\t\t\t\tparticle.colourB = c > 255 ? 255 : c < 0 ? 0 : ~~c;\n\t\t\t\t\tc = particle.colourA + particle.deltaColourA;\n\t\t\t\t\tparticle.colourA = c > 1 ? 1 : c < 0 ? 0 : (~~(c * 100)) / 100;\n\n\t\t\t\t\t// Decrease particle's lifespan\n\t\t\t\t\tparticle.timeToLive--;\n\n\t\t\t\t\t// Else reinitialize particle if within emission rate\n\t\t\t\t} else if (this.emitCounter > rate) {\n\t\t\t\t\tthis.initParticle(particle);\n\t\t\t\t\tthis.emitCounter -= rate;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\trender: function (e) {\n\t\t\tvar context = e.ctx;\n\t\t\tvar delim = \",\";\n\n\t\t\tvar particle, particles = this.particles;\n\t\t\tfor (var i = 0, l = particles.length; i < l; i++) {\n\t\t\t\tparticle = particles[i];\n\n\t\t\t\tvar size = particle.size;\n\t\t\t\tvar halfSize = size >> 1;\n\n\t\t\t\tif (particle.positionX < 0 || particle.positionX + size > e.pos._w ||\n                    particle.positionY < 0 || particle.positionY + size > e.pos._h) {\n\t\t\t\t\t//Particle is outside\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar x = ~~(e.pos._x + particle.positionX);\n\t\t\t\tvar y = ~~(e.pos._y + particle.positionY);\n\n\t\t\t\tvar r = particle.colourR,\n\t\t\t\t\tg = particle.colourG,\n\t\t\t\t\tb = particle.colourB,\n\t\t\t\t\ta = particle.colourA;\n\n\t\t\t\t// Calculate the rgba string to draw.\n\t\t\t\tvar drawColour = \"rgba(\" + r + delim + g + delim + b + delim + a + \")\";\n\t\t\t\tif (this.fastMode) {\n\t\t\t\t\tcontext.fillStyle = drawColour;\n\t\t\t\t} else {\n\t\t\t\t\tvar drawColourEnd = \"rgba(\" + r + delim + g + delim + b + delim + \"0)\";\n\n\t\t\t\t\tvar radgrad = context.createRadialGradient(x + halfSize, y + halfSize, particle.sizeSmall, x + halfSize, y + halfSize, halfSize);\n\t\t\t\t\tradgrad.addColorStop(0, drawColour);\n\t\t\t\t\t//0.9 to avoid visible boxing\n\t\t\t\t\tradgrad.addColorStop(0.9, drawColourEnd);\n\t\t\t\t\tcontext.fillStyle = radgrad;\n\t\t\t\t}\n\t\t\t\tcontext.fillRect(x, y, size, size);\n\t\t\t}\n\t\t},\n\n\t\tParticle: function () {\n\t\t\tthis.positionX = 0;\n\t\t\tthis.positionY = 0;\n\n\t\t\tthis.directionX = 0;\n\t\t\tthis.directionY = 0;\n\n\t\t\tthis.size = 0;\n\t\t\tthis.sizeSmall = 0;\n\n\t\t\tthis.timeToLive = 0;\n\n\t\t\tthis.colourR = 0;\n\t\t\tthis.colourG = 0;\n\t\t\tthis.colourB = 0;\n\t\t\tthis.colourA = 0;\n\n\t\t\tthis.deltaColourR = 0;\n\t\t\tthis.deltaColourG = 0;\n\t\t\tthis.deltaColourB = 0;\n\t\t\tthis.deltaColourA = 0;\n\n\t\t\tthis.sharpness = 0;\n\t\t},\n\n\t\tRANDM1TO1: function () {\n\t\t\treturn Math.random() * 2 - 1;\n\t\t}\n\t},\n\n\t/**@\n     * #.pauseParticles\n     * @comp Particles\n     * @kind Method\n     * \n     * @sign public this.pauseParticles()\n     *\n     * The pauseParticles will freeze these particles in execution.\n     *\n     * @example\n     * ~~~\n     * // start particle animation\n     * var ent = Qrafty.e(\"Particles\").particles(someParticleConfig);\n     *\n     * // and some time later, the gameplay is paused (or only\n     * // a part of it is frozen)\n     * ent.pauseParticles();\n     * ~~~\n     */\n\tpauseParticles: function() {\n\t\tthis._particlesPaused = true;\n\t},\n\n\t/**@\n     * #.resumeParticles\n     * @comp Particles\n     * @kind Method\n     * \n     * @sign public this.resumeParticles()\n     *\n     * The resumeParticles will resume earlier paused particles\n     *\n     * @example\n     * ~~~\n     * // start particle animation\n     * var ent = Qrafty.e(\"Particles\").particles(someParticleConfig);\n     *\n     * // and some time later, the gameplay is paused (or only\n     * // a part of it is frozen)\n     * ent.pauseParticles();\n     *\n     * // and we resume the particles again\n     * ent.resumeParticles();\n     * ~~~\n     */\n\tresumeParticles: function() {\n\t\tthis._particlesPaused = false;\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/particles.js?");

/***/ }),

/***/ "./src/graphics/renderable.js":
/*!************************************!*\
  !*** ./src/graphics/renderable.js ***!
  \************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #Renderable\n * @category Graphics\n * @kind Component\n * \n * Component for any entity that has a position on the stage.\n * @trigger Invalidate - when the entity needs to be redrawn\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Renderable\", {\n\n\t// Flag for tracking whether the entity is dirty or not\n\t_changed: false,\n    \n\t/**@\n     * #.alpha\n     * @comp Renderable\n     * @kind Property\n     * \n     * Transparency of an entity. Must be a decimal value between 0.0 being fully transparent to 1.0 being fully opaque.\n     */\n\t_alpha: 1.0,\n\n\t/**@\n     * #.visible\n     * @comp Renderable\n     * @kind Property\n     * \n     * If the entity is visible or not. Accepts a true or false value.\n     * Can be used for optimization by setting an entities visibility to false when not needed to be drawn.\n     *\n     * The entity will still exist and can be collided with but just won't be drawn.\n     */\n\t_visible: true,\n\n\t_setterRenderable: function(name, value) {\n\t\tif (this[name] === value) {\n\t\t\treturn;\n\t\t}\n\n\t\t//everything will assume the value\n\t\tthis[name] = value;\n\n\t\t// flag for redraw\n\t\tthis.trigger(\"Invalidate\");\n\t},\n\n\t// Setup all the properties that we need to define\n\tproperties: {\n\t\talpha: {\n\t\t\tset: function (v) {\n\t\t\t\tthis._setterRenderable(\"_alpha\", v);\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn this._alpha;\n\t\t\t},\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true\n\t\t},\n\t\t_alpha: {enumerable:false},\n\n\t\tvisible: {\n\t\t\tset: function (v) {\n\t\t\t\tthis._setterRenderable(\"_visible\", v);\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn this._visible;\n\t\t\t},\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true\n\t\t},\n\t\t_visible: {enumerable:false}\n\t},\n\n\tinit: function () {\n\t},\n\n\t// Need to store visibility before being frozen\n\t_hideOnUnfreeze: false,\n\tevents: {\n\t\t\"Freeze\":function(){\n\t\t\tthis._hideOnUnfreeze = !this._visible;\n\t\t\tthis._visible = false;\n\t\t\tthis.trigger(\"Invalidate\");\n\t\t},\n\t\t\"Unfreeze\":function(){\n\t\t\tthis._visible = !this._hideOnUnfreeze;\n\t\t\tthis.trigger(\"Invalidate\");\n\t\t}\n\t},\n\n\t// Renderable assumes that a draw layer has 3 important methods: attach, detach, and dirty\n\n\t// Dirty the entity when it's invalidated\n\t_invalidateRenderable: function() {\n\t\t//flag if changed\n\t\tif (this._changed === false) {\n\t\t\tthis._changed = true;\n\t\t\tthis._drawLayer.dirty(this);\n\t\t}\n\t},\n\n\t// Attach the entity to a layer to be rendered\n\t_attachToLayer: function(layer) {\n\t\tif (this._drawLayer) {\n\t\t\tthis._detachFromLayer();\n\t\t}\n\t\tthis._drawLayer = layer;\n\t\tlayer.attach(this);\n\t\tthis.bind(\"Invalidate\", this._invalidateRenderable);\n\t\tthis.trigger(\"LayerAttached\", layer);\n\t\tthis.trigger(\"Invalidate\");\n\t},\n\n\t// Detach the entity from a layer\n\t_detachFromLayer: function() {\n\t\tif (!this._drawLayer) {\n\t\t\treturn;\n\t\t}\n\t\tthis._drawLayer.detach(this);\n\t\tthis.unbind(\"Invalidate\", this._invalidateRenderable);\n\t\tthis.trigger(\"LayerDetached\", this._drawLayer);\n\t\tdelete this._drawLayer;\n\t},\n\n\t/**@\n     * #.flip\n     * @comp Renderable\n     * @kind Method\n     * \n     * @trigger Invalidate - when the entity has flipped\n     * @sign public this .flip(String dir)\n     * @param dir - Flip direction\n     *\n     * Flip entity on passed direction\n     *\n     * @example\n     * ~~~\n     * this.flip(\"X\")\n     * ~~~\n     */\n\tflip: function (dir) {\n\t\tdir = dir || \"X\";\n\t\tif (!this[\"_flip\" + dir]) {\n\t\t\tthis[\"_flip\" + dir] = true;\n\t\t\tthis.trigger(\"Invalidate\");\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.unflip\n     * @comp Renderable\n     * @kind Method\n     * \n     * @trigger Invalidate - when the entity has unflipped\n     * @sign public this .unflip(String dir)\n     * @param dir - Unflip direction\n     *\n     * Unflip entity on passed direction (if it's flipped)\n     *\n     * @example\n     * ~~~\n     * this.unflip(\"X\")\n     * ~~~\n     */\n\tunflip: function (dir) {\n\t\tdir = dir || \"X\";\n\t\tif (this[\"_flip\" + dir]) {\n\t\t\tthis[\"_flip\" + dir] = false;\n\t\t\tthis.trigger(\"Invalidate\");\n\t\t}\n\t\treturn this;\n\t}\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/renderable.js?");

/***/ }),

/***/ "./src/graphics/sprite-animation.js":
/*!******************************************!*\
  !*** ./src/graphics/sprite-animation.js ***!
  \******************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #SpriteAnimation\n * @category Animation\n * @kind Component\n *\n * @trigger StartAnimation - When an animation starts playing, or is resumed from the paused state - {Reel}\n * @trigger AnimationEnd - When the animation finishes - { Reel }\n * @trigger FrameChange - Each time the frame of the current reel changes - { Reel }\n * @trigger ReelChange - When the reel changes - { Reel }\n *\n * Used to animate sprites by treating a sprite map as a set of animation frames.\n * Must be applied to an entity that has a sprite-map component.\n *\n * To define an animation, see the `reel` method.  To play an animation, see the `animate` method.\n *\n * A reel is an object that contains the animation frames and current state for an animation.  The reel object has the following properties:\n * @param id: (String) - the name of the reel\n * @param frames: (Array) - A list of frames in the format [xpos, ypos]\n * @param currentFrame: (Number) - The index of the current frame\n * @param easing: (Qrafty.easing object) - The object that handles the internal progress of the animation.\n * @param duration: (Number) - The duration in milliseconds.\n *\n * Many animation related events pass a reel object as data.  As typical with events, this should be treated as read only data that might be later altered by the entity.  If you wish to preserve the data, make a copy of it.\n *\n * @see Qrafty.sprite\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"SpriteAnimation\", {\n\t/*\n     * A map in which the keys are the names assigned to animations defined using\n     * the component (also known as reelIDs), and the values are objects describing\n     * the animation and its state.\n     */\n\t_reels: null,\n\n\t/*\n     * The reelID of the currently active reel (which is one of the elements in `this._reels`).\n     * This value is `null` if no reel is active. Some of the component's actions can be invoked\n     * without specifying a reel, in which case they will work on the active reel.\n     */\n\t_currentReelId: null,\n\n\t/*\n     * The currently active reel.\n     * This value is `null` if no reel is active.\n     */\n\t_currentReel: null,\n\n\t/*\n     * Whether or not an animation is currently playing.\n     */\n\t_isPlaying: false,\n\n\t/**@\n     * #.animationSpeed\n     * @comp SpriteAnimation\n     *\n     * The playback rate of the animation.  This property defaults to 1.\n     */\n\tanimationSpeed: 1,\n\n\n\tinit: function () {\n\t\tthis._reels = {};\n\t},\n\n\t/**@\n     * #.reel\n     * @comp SpriteAnimation\n     * @kind Method\n     *\n     * Used to define reels, to change the active reel, and to fetch the id of the active reel.\n     *\n     * @sign public this .reel(String reelId, Duration duration, Number fromX, Number fromY, Number frameCount[, Number rowLength])\n     * Defines a reel by starting and ending position on the sprite sheet.\n     * @param reelId - ID of the animation reel being created\n     * @param duration - The length of the animation in milliseconds.\n     * @param fromX - Starting `x` position on the sprite map (x's unit is the horizontal size of the sprite in the sprite map).\n     * @param fromY - `y` position on the sprite map (y's unit is the horizontal size of the sprite in the sprite map). Remains constant through the animation.\n     * @param frameCount - The number of sequential frames in the animation.  If negative, the animation will play backwards.\n     * @param rowLength - The number of frames in a sprite sheet row.\n     *                    The sequential frames will auto-wrap to a new row when they reach the end of the current row.\n     *                    This is an optional argument that defaults to `Infinity`.\n     *\n     * @sign public this .reel(String reelId, Duration duration, Array frames)\n     * Defines a reel by an explicit list of frames\n     * @param reelId - ID of the animation reel being created\n     * @param duration - The length of the animation in milliseconds.\n     * @param frames - An array of arrays containing the `x` and `y` values of successive frames: [[x1,y1],[x2,y2],...] (the values are in the unit of the sprite map's width/height respectively).\n     *\n     * @sign public this .reel(String reelId, Duration duration, Array frames)\n     * Defines a reel by an explicit list of frames with sprite names\n     * @param reelId - ID of the animation reel being created\n     * @param duration - The length of the animation in milliseconds.\n     * @param frames - An array of strings containing the sprite names of successive frames: ['spriteName1','spriteName2',...].\n     *\n     * @sign public this .reel(String reelId)\n     * Switches to the specified reel.  The sprite will be updated to that reel's current frame\n     * @param reelID - the ID to switch to\n     *\n     * @sign public Reel .reel()\n     * @return The id of the current reel\n     *\n     *\n     * A method to handle animation reels.  Only works for sprites built with the Qrafty.sprite methods.\n     * See the Tween component for animation of 2D properties.\n     *\n     * To setup an animation reel, pass the name of the reel (used to identify the reel later), and either an\n     * array of absolute sprite positions or the start x on the sprite map, the y on the sprite map and then the end x on the sprite map.\n     *\n     *\n     * @example\n     * ~~~\n     * // Define a sprite-map component\n     * Qrafty.sprite(16, \"images/sprite.png\", {\n     *     PlayerSprite: [0,0],\n     *     PlayerIdle1: [0,1],\n     *     PlayerLeftFootForward: [1,1],\n     *     PlayerIdle2: [2,1],\n     *     PlayerRightFootForward: [3,1]\n     * });\n     *\n     * // Define an animation on the second row of the sprite map (fromY = 1)\n     * // from the left most sprite (fromX = 0) to the fourth sprite\n     * // on that row (frameCount = 4), with a duration of 1 second\n     * Qrafty.e(\"2D, DOM, SpriteAnimation, PlayerSprite\").reel('PlayerRunning', 1000, 0, 1, 4);\n     *\n     * // This is the same animation definition, but using the alternative method\n     * Qrafty.e(\"2D, DOM, SpriteAnimation, PlayerSprite\").reel('PlayerRunning', 1000, [[0, 1], [1, 1], [2, 1], [3, 1]]);\n     *\n     * // This is the same animation definition, but uses sprite names instead of numbers\n     * Qrafty.e(\"2D, DOM, SpriteAnimation, PlayerSprite\")\n     *       .reel('PlayerRunning', 1000, ['PlayerIdle1', 'PlayerLeftFootForward', 'PlayerIdle2', 'PlayerRightFootForward']);\n     * ~~~\n     */\n\treel: function (reelId, duration, fromX, fromY, frameCount, rowLength) {\n\t\t// @sign public this .reel()\n\t\tif (arguments.length === 0) {\n\t\t\treturn this._currentReelId;\n\t\t}\n\n\t\t// @sign public this .reel(String reelID)\n\t\tif (arguments.length === 1 && typeof reelId === \"string\") {\n\t\t\tif (typeof this._reels[reelId] === \"undefined\") {\n\t\t\t\tthrow(\"The specified reel \" + reelId + \" is undefined.\");\n\t\t\t}\n\t\t\tthis.pauseAnimation();\n\t\t\tif (this._currentReelId !== reelId) {\n\t\t\t\tthis._currentReelId = reelId;\n\t\t\t\tthis._currentReel = this._reels[reelId];\n\t\t\t\t// Change the visible sprite\n\t\t\t\tthis._updateSprite();\n\t\t\t\t// Trigger event\n\t\t\t\tthis.trigger(\"ReelChange\", this._currentReel);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\n\t\tvar reel, i;\n\n\t\treel = {\n\t\t\tid: reelId,\n\t\t\tframes: [],\n\t\t\tcurrentFrame: 0,\n\t\t\teasing: new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.easing(duration),\n\t\t\tdefaultLoops: 1\n\t\t};\n\n\t\treel.duration = reel.easing.duration;\n\n\t\t// @sign public this .reel(String reelId, Number duration, Number fromX, Number fromY, Number frameDuration)\n\t\tif (typeof fromX === \"number\") {\n\t\t\trowLength = rowLength || Infinity;\n\n\t\t\tif (frameCount >= 0) { // forward animation\n\t\t\t\tfor (i = 0; i < frameCount; ++i) {\n\t\t\t\t\treel.frames.push([fromX, fromY]);\n\n\t\t\t\t\tif (++fromX >= rowLength) {\n\t\t\t\t\t\tfromX = 0;\n\t\t\t\t\t\tfromY++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else { // backward animation\n\t\t\t\tfor (i = 0; i > frameCount; --i) {\n\t\t\t\t\treel.frames.push([fromX, fromY]);\n\n\t\t\t\t\tif (--fromX < 0) {\n\t\t\t\t\t\tfromX = rowLength - 1;\n\t\t\t\t\t\tfromY--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// @sign public this .reel(String reelId, Number duration, Array frames)\n\t\telse if (arguments.length === 3 && typeof fromX === \"object\") {\n\t\t\treel.frames = fromX;\n\t\t}\n\t\telse {\n\t\t\tthrow \"Unrecognized arguments. Please see the documentation for 'reel(...)'.\";\n\t\t}\n\n\t\tthis._reels[reelId] = reel;\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.animate\n     * @comp SpriteAnimation\n     * @kind Method\n     *\n     * @sign public this .animate([String reelId] [, Number loopCount])\n     * @param reelId - ID of the animation reel to play.  Defaults to the current reel if none is specified.\n     * @param loopCount - Number of times to repeat the animation. Use -1 to repeat indefinitely.  Defaults to 1.\n     *\n     * Play one of the reels previously defined through `.reel(...)`. Simply pass the name of the reel. If you wish the\n     * animation to play multiple times in succession, pass in the amount of times as an additional parameter.\n     * To have the animation repeat indefinitely, pass in `-1`.\n     *\n     * If another animation is currently playing, it will be paused.\n     *\n     * This will always play an animation from the beginning.  If you wish to resume from the current state of a reel, use `resumeAnimation()`.\n     *\n     * Once an animation ends, it will remain at its last frame.\n     *\n     *\n     * @example\n     * ~~~\n     * // Define a sprite-map component\n     * Qrafty.sprite(16, \"images/sprite.png\", {\n     *     PlayerSprite: [0,0]\n     * });\n     *\n     * // Play the animation across 20 frames (so each sprite in the 4 sprite animation should be seen for 5 frames) and repeat indefinitely\n     * Qrafty.e(\"2D, DOM, SpriteAnimation, PlayerSprite\")\n     *     .reel('PlayerRunning', 20, 0, 0, 3) // setup animation\n     *     .animate('PlayerRunning', -1); // start animation\n     * ~~~\n     */\n\tanimate: function(reelId, loopCount) {\n\t\t// switch to the specified reel if necessary\n\t\tif (typeof reelId === \"string\") this.reel(reelId);\n\n\t\tvar currentReel = this._currentReel;\n\n\t\tif (typeof currentReel === \"undefined\" || currentReel === null) {\n\t\t\tthrow(\"No reel is specified, and there is no currently active reel.\");\n\t\t}\n\n\t\tthis.pauseAnimation(); // This will pause the current animation, if one is playing\n\n\t\t// Handle repeats; if loopCount is undefined and reelID is a number, calling with that signature\n\t\tif (typeof loopCount === \"undefined\") {\n\t\t\tif (typeof reelId === \"number\") loopCount = reelId;\n\t\t\telse loopCount = 1;\n\t\t}\n\n\t\t// set the animation to the beginning\n\t\tcurrentReel.easing.reset();\n\n\t\t// user provided loop count.\n\t\tthis.loops(loopCount);\n\n\t\t// trigger the necessary events and switch to the first frame\n\t\tthis._setFrame(0);\n\n\t\t// Start the anim\n\t\tthis.bind(\"UpdateFrame\", this._animationTick);\n\t\tthis._isPlaying = true;\n\t\tthis.trigger(\"StartAnimation\", currentReel);\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.resumeAnimation\n     * @comp SpriteAnimation\n     * @kind Method\n     *\n     * @sign public this .resumeAnimation()\n     *\n     * This will resume animation of the current reel from its current state.\n     * If a reel is already playing, or there is no current reel, there will be no effect.\n     */\n\tresumeAnimation: function() {\n\t\tif (this._isPlaying === false &&  this._currentReel !== null) {\n\t\t\tthis.bind(\"UpdateFrame\", this._animationTick);\n\t\t\tthis._isPlaying = true;\n\t\t\tthis._currentReel.easing.resume();\n\t\t\tthis.trigger(\"StartAnimation\", this._currentReel);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.pauseAnimation\n     * @comp SpriteAnimation\n     * @kind Method\n     *\n     * @sign public this .pauseAnimation(void)\n     *\n     * Pauses the currently playing animation, or does nothing if no animation is playing.\n     */\n\tpauseAnimation: function () {\n\t\tif (this._isPlaying === true) {\n\t\t\tthis.unbind(\"UpdateFrame\", this._animationTick);\n\t\t\tthis._isPlaying = false;\n\t\t\tthis._reels[this._currentReelId].easing.pause();\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.resetAnimation\n     * @comp SpriteAnimation\n     * @kind Method\n     *\n     * @sign public this .resetAnimation()\n     *\n     * Resets the current animation to its initial state.  Resets the number of loops to the last specified value, which defaults to 1.\n     *\n     * Neither pauses nor resumes the current animation.\n     */\n\tresetAnimation: function() {\n\t\tvar currentReel = this._currentReel;\n\t\tif (currentReel === null) throw(\"No active reel to reset.\");\n\n\t\tthis.reelPosition(0);\n\t\tcurrentReel.easing.repeat(currentReel.defaultLoops);\n\n\t\treturn this;\n\t},\n\n\n\t/**@\n     * #.loops\n     * @comp SpriteAnimation\n     * @kind Method\n     *\n     * @sign public this .loops(Number loopCount)\n     * @param loopCount - The number of times to play the animation\n     *\n     * Sets the number of times the animation will loop for.\n     * If called while an animation is in progress, the current state will be considered the first loop.\n     *\n     * @sign public Number .loops()\n     * @returns The number of loops left.  Returns 0 if no reel is active.\n     */\n\tloops: function(loopCount) {\n\t\tif (arguments.length === 0) {\n\t\t\tif (this._currentReel !== null)\n\t\t\t\treturn this._currentReel.easing.loops;\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\n\t\tif (this._currentReel !== null) {\n\t\t\tif (loopCount < 0) loopCount = Infinity;\n\n\t\t\tthis._currentReel.easing.repeat(loopCount);\n\t\t\tthis._currentReel.defaultLoops = loopCount;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.reelPosition\n     * @kind Method\n     *\n     * @comp SpriteAnimation\n     *\n     * @sign public this .reelPosition(Integer position)\n     * Sets the position of the current reel by frame number.\n     * @param position - the frame to jump to.  This is zero-indexed.  A negative values counts back from the last frame.\n     *\n     * @sign public this .reelPosition(Number position)\n     * Sets the position of the current reel by percent progress.\n     * @param position - a non-integer number between 0 and 1\n     *\n     * @sign public this .reelPosition(String position)\n     * Jumps to the specified position.  The only currently accepted value is \"end\", which will jump to the end of the reel.\n     *\n     * @sign public Number .reelPosition()\n     * @returns The current frame number\n     *\n     */\n\treelPosition: function(position) {\n\t\tif (this._currentReel === null) throw(\"No active reel.\");\n\n\t\tif (arguments.length === 0) {\n\t\t\treturn this._currentReel.currentFrame;\n\t\t}\n\n\t\tvar progress,\n\t\t\tl = this._currentReel.frames.length;\n\n\t\tif (position === \"end\") {\n\t\t\tposition = l - 1;\n\t\t}\n\n\t\tif (position < 1 && position > 0) {\n\t\t\tprogress = position;\n\t\t\tposition = Math.floor(l * progress);\n\t\t} else {\n\t\t\tif (position !== Math.floor(position))\n\t\t\t\tthrow(\"Position \" + position + \" is invalid.\");\n\t\t\tif (position < 0)\n\t\t\t\tposition = l - 1 + position;\n\t\t\tprogress = position / l;\n\t\t}\n\t\t// cap to last frame\n\t\tposition = Math.min(position, l-1);\n\t\tposition = Math.max(position, 0);\n\t\tthis._setProgress(progress);\n\t\tthis._setFrame(position);\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.reelFrame\n     * @kind Method\n     *\n     * @comp SpriteAnimation\n     *\n     * @sign public this .reelFrame(String frameName)\n     * Sets the position of the current reel by frame name.\n     * @param frameName - Name in the sprite map.\n     *\n     * Jumps to specifed frame if the reel was created with sprite names.\n     *\n     */\n\treelFrame: function (frameName) {\n\t\tif (this._currentReel === null) throw(\"No active reel.\");\n\n\t\tvar index = this._currentReel.frames.indexOf(frameName);\n\n\t\tif (index === -1) {\n\t\t\tthrow(\"Frame name \" + frameName + \" is invalid.\");\n\t\t}\n\n\t\tthis.reelPosition(index);\n\n\t\treturn this;\n\t},\n\n\t// Bound to \"UpdateFrame\".  Progresses the animation by dt, changing the frame if necessary.\n\t// dt is multiplied by the animationSpeed property\n\t_animationTick: function(frameData) {\n\t\tvar currentReel = this._reels[this._currentReelId];\n\t\tcurrentReel.easing.tick(frameData.dt * this.animationSpeed);\n\t\tvar progress = currentReel.easing.value();\n\t\tvar frameNumber = Math.min( Math.floor(currentReel.frames.length * progress), currentReel.frames.length - 1);\n\n\t\tthis._setFrame(frameNumber);\n\n\t\tif(currentReel.easing.complete === true){\n\t\t\tthis.pauseAnimation();\n\t\t\tthis.trigger(\"AnimationEnd\", this._currentReel);\n\t\t}\n\t},\n\n\t// Set the current frame and update the displayed sprite\n\t// The actual progress for the animation must be set seperately.\n\t_setFrame: function(frameNumber) {\n\t\tvar currentReel = this._currentReel;\n\t\tif (frameNumber === currentReel.currentFrame)\n\t\t\treturn;\n\t\tcurrentReel.currentFrame = frameNumber;\n\t\tthis._updateSprite();\n\t\tthis.trigger(\"FrameChange\", currentReel);\n\t},\n\n\t// Update the displayed sprite.\n\t_updateSprite: function() {\n\t\tvar currentReel = this._currentReel;\n\t\tvar frame = currentReel.frames[currentReel.currentFrame];\n\n\t\t// .sprite will trigger redraw\n\t\tif(typeof frame === \"string\") this.sprite(frame);\n\t\telse this.sprite(frame[0], frame[1]);\n\t},\n\n\n\t// Sets the internal state of the current reel's easing object\n\t_setProgress: function(progress, repeats) {\n\t\tthis._currentReel.easing.setProgress(progress, repeats);\n\t},\n\n\n\t/**@\n     * #.isPlaying\n     * @comp SpriteAnimation\n     * @kind Method\n     *\n     * @sign public Boolean .isPlaying([String reelId])\n     * @param reelId - The reelId of the reel we wish to examine\n     * @returns The current animation state\n     *\n     * Determines if the specified animation is currently playing. If no reelId is specified,\n     * checks if any animation is playing.\n     *\n     * @example\n     * ~~~\n     * myEntity.isPlaying() // is any animation playing\n     * myEntity.isPlaying('PlayerRunning') // is the PlayerRunning animation playing\n     * ~~~\n     */\n\tisPlaying: function (reelId) {\n\t\tif (!this._isPlaying) return false;\n\t\tif (!reelId) return !!this._currentReelId;\n\t\treturn this._currentReelId === reelId;\n\t},\n\n\t/**@\n     * #.getReel\n     * @comp SpriteAnimation\n     * @kind Method\n     *\n     * @sign public Reel .getReel()\n     * @returns The current reel, or null if there is no active reel\n     *\n     * @sign public Reel .getReel(reelId)\n     * @param reelId - The id of the reel to fetch.\n     * @returns The specified reel, or `undefined` if no such reel exists.\n     *\n     */\n\tgetReel: function (reelId) {\n\t\tif (arguments.length === 0) {\n\t\t\tif (!this._currentReelId) return null;\n\t\t\treelId = this._currentReelId;\n\t\t}\n\n\t\treturn this._reels[reelId];\n\t}\n});\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/sprite-animation.js?");

/***/ }),

/***/ "./src/graphics/sprite.js":
/*!********************************!*\
  !*** ./src/graphics/sprite.js ***!
  \********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n// Define some variables required for webgl\n//var fs = require(\"fs\");\n\nconst shaders_sprite_vert = `attribute vec2 aPosition;\nattribute vec3 aOrientation;\nattribute vec2 aLayer;\nattribute vec2 aTextureCoord;\n\nvarying mediump vec3 vTextureCoord;\n\nuniform vec4 uViewport;\nuniform mediump vec2 uTextureDimensions;\n\nmat4 viewportScale = mat4(2.0 / uViewport.z, 0, 0, 0,    0, -2.0 / uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);\nvec4 viewportTranslation = vec4(uViewport.xy, 0, 0);\n\nvoid main() {\n  vec2 pos = aPosition;\n  vec2 entityOrigin = aOrientation.xy;\n  mat2 entityRotationMatrix = mat2(cos(aOrientation.z), sin(aOrientation.z), -sin(aOrientation.z), cos(aOrientation.z));\n  \n  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin ;\n  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0/(1.0+exp(aLayer.x) ), 1) );\n  vTextureCoord = vec3(aTextureCoord, aLayer.y);\n}`;\n\nconst shaders_sprite_frag = `varying mediump vec3 vTextureCoord;\n  \nuniform sampler2D uSampler;\nuniform mediump vec2 uTextureDimensions;\n\nvoid main(void) {\n  highp vec2 coord =   vTextureCoord.xy / uTextureDimensions;\n  mediump vec4 base_color = texture2D(uSampler, coord);\n  gl_FragColor = vec4(base_color.rgb*base_color.a*vTextureCoord.z, base_color.a*vTextureCoord.z);\n}`;\n\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.defaultShader(\"Sprite\", new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.WebGLShader(\n\tshaders_sprite_vert,\n\tshaders_sprite_frag,\n\t[\n\t\t{ name: \"aPosition\",     width: 2 },\n\t\t{ name: \"aOrientation\",  width: 3 },\n\t\t{ name: \"aLayer\",        width: 2 },\n\t\t{ name: \"aTextureCoord\", width: 2 }\n\t],\n\tfunction(e, _entity) {\n\t\tvar co = e.co;\n\t\t// Write texture coordinates\n\t\te.program.writeVector(\"aTextureCoord\",\n\t\t\tco.x, co.y,\n\t\t\tco.x, co.y + co.h,\n\t\t\tco.x + co.w, co.y,\n\t\t\tco.x + co.w, co.y + co.h\n\t\t);\n\t}\n));\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.sprite\n     * @kind Method\n     * \n     * @category Graphics\n     * @sign public this Qrafty.sprite([Number tile, [Number tileh]], String url, Object map[, Number paddingX[, Number paddingY[, Boolean paddingAroundBorder]]])\n     * @param tile - Tile size of the sprite map, defaults to 1\n     * @param tileh - Height of the tile; if provided, tile is interpreted as the width\n     * @param url - URL of the sprite image\n     * @param map - Object where the key is what becomes a new component and the value points to a position on the sprite map\n     * @param paddingX - Horizontal space in between tiles. Defaults to 0.\n     * @param paddingY - Vertical space in between tiles. Defaults to paddingX.\n     * @param paddingAroundBorder - If padding should be applied around the border of the sprite sheet. If enabled the first tile starts at (paddingX,paddingY) instead of (0,0). Defaults to false.\n     *\n     * Generates components based on positions in a sprite image to be applied to entities.\n     *\n     * Accepts a tile size, URL and map for the name of the sprite and its position.\n     *\n     * The position must be an array containing the position of the sprite where index `0`\n     * is the `x` position, `1` is the `y` position and optionally `2` is the width and `3`\n     * is the height. If the sprite map has padding, pass the values for the `x` padding\n     * or `y` padding. If they are the same, just add one value.\n     *\n     * If the sprite image has no consistent tile size, `1` or no argument need be\n     * passed for tile size.\n     *\n     * Entities that add the generated components are also given the `2D` component, and\n     * a component called `Sprite`.\n     *\n     * @example\n     * ~~~\n     * Qrafty.sprite(\"imgs/spritemap6.png\", {flower:[0,0,20,30]});\n     * var flower_entity = Qrafty.e(\"2D, DOM, flower\");\n     * ~~~\n     * The first line creates a component called `flower` associated with the sub-image of\n     * spritemap6.png with top-left corner (0,0), width 20 pixels, and height 30 pixels.\n     * The second line creates an entity with that image. (Note: The `2D` is not really\n     * necessary here, because adding the `flower` component automatically also adds the\n     * `2D` component.)\n     * ~~~\n     * Qrafty.sprite(50, \"imgs/spritemap6.png\", {flower:[0,0], grass:[0,1,3,1]});\n     * ~~~\n     * In this case, the `flower` component is pixels 0 <= x < 50, 0 <= y < 50, and the\n     * `grass` component is pixels 0 <= x < 150, 50 <= y < 100. (The `3` means grass has a\n     * width of 3 tiles, i.e. 150 pixels.)\n     * ~~~\n     * Qrafty.sprite(50, 100, \"imgs/spritemap6.png\", {flower:[0,0], grass:[0,1]}, 10);\n     * ~~~\n     * In this case, each tile is 50x100, and there is a spacing of 10 pixels between\n     * consecutive tiles. So `flower` is pixels 0 <= x < 50, 0 <= y < 100, and `grass` is\n     * pixels 0 <= x < 50, 110 <= y < 210.\n     *\n     * @see Sprite\n     */\n\tsprite: function (tile, tileh, url, map, paddingX, paddingY, paddingAroundBorder) {\n\t\tvar spriteName, temp, img;\n\n\t\t//if no tile value, default to 1.\n\t\t//(if the first passed argument is a string, it must be the url.)\n\t\tif (typeof tile === \"string\") {\n\t\t\tpaddingY = paddingX;\n\t\t\tpaddingX = map;\n\t\t\tmap = tileh;\n\t\t\turl = tile;\n\t\t\ttile = 1;\n\t\t\ttileh = 1;\n\t\t}\n\n\t\tif (typeof tileh === \"string\") {\n\t\t\tpaddingY = paddingX;\n\t\t\tpaddingX = map;\n\t\t\tmap = url;\n\t\t\turl = tileh;\n\t\t\ttileh = tile;\n\t\t}\n\n\t\t//if no paddingY, use paddingX\n\t\tif (!paddingY && paddingX) paddingY = paddingX;\n\t\tpaddingX = parseInt(paddingX || 0, 10); //just incase\n\t\tpaddingY = parseInt(paddingY || 0, 10);\n\n\t\tvar markSpritesReady = function() {\n\t\t\tthis.ready = true;\n\t\t\tthis.trigger(\"Invalidate\");\n\t\t};\n\n\t\timg = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.asset(url);\n\t\tif (!img) {\n\t\t\timg = new Image();\n\t\t\timg.src = url;\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.asset(url, img);\n\t\t\timg.onload = function () {\n\t\t\t\t//all components with this img are now ready\n\t\t\t\tfor (var spriteName in map) {\n\t\t\t\t\t(0,_core_core__WEBPACK_IMPORTED_MODULE_0__.default)(spriteName).each(markSpritesReady);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tvar sharedSpriteInit = function() {\n\t\t\tthis.requires(\"2D, Sprite\");\n\t\t\tthis.__trim = [0, 0, 0, 0];\n\t\t\tthis.__image = url;\n\t\t\tthis.__map = map;\n\t\t\tthis.__coord = [this.__coord[0], this.__coord[1], this.__coord[2], this.__coord[3]];\n\t\t\tthis.__tile = tile;\n\t\t\tthis.__tileh = tileh;\n\t\t\tthis.__padding = [paddingX, paddingY];\n\t\t\tthis.__padBorder = paddingAroundBorder;\n\t\t\tthis.sprite(this.__coord[0], this.__coord[1], this.__coord[2], this.__coord[3]);\n\n\t\t\tthis.img = img;\n\t\t\t//draw now\n\t\t\tif (this.img.complete && this.img.width > 0) {\n\t\t\t\tthis.ready = true;\n\t\t\t\tthis.trigger(\"Invalidate\");\n\t\t\t}\n\n\t\t\t//set the width and height to the sprite size\n\t\t\tthis.w = this.__coord[2];\n\t\t\tthis.h = this.__coord[3];\n\t\t\tthis._setupSpriteImage(this._drawLayer);\n\t\t};\n\n\t\tfor (spriteName in map) {\n\t\t\tif (!map.hasOwnProperty(spriteName)) continue;\n\n\t\t\ttemp = map[spriteName];\n\n\t\t\t//generates sprite components for each tile in the map\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(spriteName, {\n\t\t\t\tready: false,\n\t\t\t\t__coord: [temp[0], temp[1], temp[2] || 1, temp[3] || 1],\n\n\t\t\t\tinit: sharedSpriteInit\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n});\n\n/**@\n * #Sprite\n * @category Graphics\n * @kind Component\n * \n * @trigger Invalidate - when the sprites change\n *\n * A component for using tiles in a sprite map.\n *\n * This is automatically added to entities which use the components created by `Qrafty.sprite` or `Qrafty.load`.\n * Since these are also used to define tile size, you'll rarely need to use this components methods directly.\n *\n * @see Qrafty.sprite, Qrafty.load\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Sprite\", {\n\t__image: \"\",\n\t/*\n     * #.__tile\n     * @comp Sprite\n     *\n     * Horizontal sprite tile size.\n     */\n\t__tile: 0,\n\t/*\n     * #.__tileh\n     * @comp Sprite\n     *\n     * Vertical sprite tile size.\n     */\n\t__tileh: 0,\n\t__padding: null,\n\t__trim: null,\n\timg: null,\n\t//ready is changed to true in Qrafty.sprite\n\tready: false,\n\n\tinit: function () {\n\t\tthis.__trim = [0, 0, 0, 0];\n\t\tthis.bind(\"Draw\", this._drawSprite);\n\t\tthis.bind(\"LayerAttached\", this._setupSpriteImage);\n\t},\n\n\tremove: function(){\n\t\tthis.unbind(\"Draw\", this._drawSprite);\n\t\tthis.unbind(\"LayerAttached\", this._setupSpriteImage);\n\t},\n    \n\t_setupSpriteImage: function(layer) {\n\t\tif (!this.__image || !this.img || !layer) return;\n\t\tif (layer.type === \"WebGL\"){\n\t\t\tthis._establishShader(this.__image, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.defaultShader(\"Sprite\"));\n\t\t\tthis.program.setTexture( layer.makeTexture(this.__image, this.img, false) );\n\t\t}\n\t},\n\n\t_drawSprite: function(e){\n\t\tvar co = e.co,\n\t\t\tpos = e.pos,\n\t\t\tcontext = e.ctx;\n\n\t\tif (e.type === \"canvas\") {\n\t\t\t//draw the image on the canvas element\n\t\t\tcontext.drawImage(this.img, //image element\n\t\t\t\tco.x, //x position on sprite\n\t\t\t\tco.y, //y position on sprite\n\t\t\t\tco.w, //width on sprite\n\t\t\t\tco.h, //height on sprite\n\t\t\t\tpos._x, //x position on canvas\n\t\t\t\tpos._y, //y position on canvas\n\t\t\t\tpos._w, //width on canvas\n\t\t\t\tpos._h //height on canvas\n\t\t\t);\n\t\t} else if (e.type === \"DOM\") {\n\t\t\t// Get scale (ratio of entity dimensions to sprite's dimensions)\n\t\t\t// If needed, we will scale up the entire sprite sheet, and then modify the position accordingly\n\t\t\tvar vscale = this._h / co.h,\n\t\t\t\thscale = this._w / co.w,\n\t\t\t\tstyle = this._element.style,\n\t\t\t\tbgColor = style.backgroundColor;\n\n\t\t\tif (bgColor === \"initial\") bgColor = \"\";\n\n\t\t\t// Don't change background if it's not necessary -- this can cause some browsers to reload the image\n\t\t\t// See [this chrome issue](https://code.google.com/p/chromium/issues/detail?id=102706)\n\t\t\tvar newBackground = bgColor + \" url('\" + this.__image + \"') no-repeat\";\n\t\t\tif (newBackground !== style.background) {\n\t\t\t\tstyle.background = newBackground;\n\t\t\t}\n\t\t\tstyle.backgroundPosition = \"-\" + co.x * hscale + \"px -\" + co.y * vscale + \"px\";\n\t\t\t// style.backgroundSize must be set AFTER style.background!\n\t\t\tif (vscale !== 1 || hscale !== 1) {\n\t\t\t\tstyle.backgroundSize = (this.img.width * hscale) + \"px\" + \" \" + (this.img.height * vscale) + \"px\";\n\t\t\t}\n\t\t} else if (e.type === \"webgl\") {\n\t\t\t// Write texture coordinates\n\t\t\te.program.draw(e, this);\n\t\t}\n\t},\n\n\t/**@\n     * #.sprite\n     * @comp Sprite\n     * @kind Method\n     *\n     * @sign public this .sprite(Number x, Number y[, Number w, Number h])\n     * @param x - X cell position\n     * @param y - Y cell position\n     * @param w - Width in cells. Optional.\n     * @param h - Height in cells. Optional.\n     *\n     * Uses a new location on the sprite map as its sprite.\n     * If w or h are ommitted, the width and height are not changed.\n     * Values should be in tiles or cells (not pixels).\n     *\n     * @sign public this .sprite(String tileName)\n     * @param tileName - the name of a tile specified in the sprite map\n     *\n     * Uses a new location on the sprite map as its sprite.\n     * The location is retrieved by name from the previously supplied sprite map.\n     * An invalid name will be silently ignored.\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, DOM, Sprite\")\n     *   .sprite(0, 0, 2, 2);\n     *\n     * Qrafty.e(\"2D, DOM, flower\")\n     *   .sprite('grass');\n     * ~~~\n     */\n\n\t/**@\n     * #.__coord\n     * @comp Sprite\n     * @kind Property\n     *\n     * The coordinate of the slide within the sprite in the format of [x, y, w, h].\n     */\n\tsprite: function (x, y, w, h) {\n\t\tif (typeof x === \"string\") { // retrieve location from sprite map by name\n\t\t\tvar temp = this.__map[x];\n\t\t\tif (!temp) return this;\n\n\t\t\tx = temp[0];\n\t\t\ty = temp[1];\n\t\t\tw = temp[2] || 1;\n\t\t\th = temp[3] || 1;\n\t\t}\n\n\t\tthis.__coord = this.__coord || [0, 0, 0, 0];\n\n\t\tthis.__coord[0] = x * (this.__tile + this.__padding[0]) + (this.__padBorder ? this.__padding[0] : 0) + this.__trim[0];\n\t\tthis.__coord[1] = y * (this.__tileh + this.__padding[1]) + (this.__padBorder ? this.__padding[1] : 0) + this.__trim[1];\n\t\tif (typeof(w)!==\"undefined\" && typeof(h)!==\"undefined\") {\n\t\t\tthis.__coord[2] = this.__trim[2] || w * this.__tile || this.__tile;\n\t\t\tthis.__coord[3] = this.__trim[3] || h * this.__tileh || this.__tileh;\n\t\t}\n\n\t\tthis.trigger(\"Invalidate\");\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.crop\n     * @comp Sprite\n     * @kind Method\n     * \n     * @sign public this .crop(Number x, Number y, Number w, Number h)\n     * @param x - Offset x position\n     * @param y - Offset y position\n     * @param w - New width\n     * @param h - New height\n     *\n     * If the entity needs to be smaller than the tile size, use this method to crop it.\n     *\n     * The values should be in pixels rather than tiles.\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, DOM, Sprite\")\n     *   .crop(40, 40, 22, 23);\n     * ~~~\n     */\n\tcrop: function (x, y, w, h) {\n\t\tvar old = this._mbr || this.pos();\n\t\tthis.__trim = [];\n\t\tthis.__trim[0] = x;\n\t\tthis.__trim[1] = y;\n\t\tthis.__trim[2] = w;\n\t\tthis.__trim[3] = h;\n\n\t\tthis.__coord[0] += x;\n\t\tthis.__coord[1] += y;\n\t\tthis.__coord[2] = w;\n\t\tthis.__coord[3] = h;\n\t\tthis._w = w;\n\t\tthis._h = h;\n\n\t\tthis.trigger(\"Invalidate\", old);\n\t\treturn this;\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/sprite.js?");

/***/ }),

/***/ "./src/graphics/text.js":
/*!******************************!*\
  !*** ./src/graphics/text.js ***!
  \******************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #Text\n * @category Graphics\n * @kind Component\n * \n * @trigger Invalidate - when the text is changed\n * @requires Canvas or DOM\n * Component to make a text entity.\n *\n * By default, text will have the style \"10px sans-serif\".\n *\n * @note An entity with the text component is just text! If you want to write text\n * inside an image, you need one entity for the text and another entity for the image.\n * More tips for writing text inside an image: (1) Use the z-index (from 2D component)\n * to ensure that the text is on top of the image, not the other way around; (2)\n * use .attach() (from 2D component) to glue the text to the image so they move and\n * rotate together.\n *\n * @note For DOM (but not canvas) text entities, various font settings (such as\n * text-decoration) can be set using `.css()` (see DOM component). If you \n * use `.css()` to set the *individual* properties which are controlled by `.textFont()`,\n *  `.textColor()`, or `.textAlign()`, the text component will set these properties internally as well.\n * However, if you use `.css()` to set shorthand properties such as `font`, these will be ignored by the text component.\n *\n * @note If you use canvas text with glyphs that are taller than standard letters, portions of the glyphs might be cut off.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Text\", {\n\t_text: \"\",\n\tdefaultSize: \"10px\",\n\tdefaultFamily: \"sans-serif\",\n\tdefaultVariant: \"normal\",\n\tdefaultLineHeight: \"normal\",\n\tdefaultTextAlign: \"left\",\n\tready: true,\n\n\tinit: async function () {\n\t\tawait this.requires(\"2D\");\n\t\tthis._textFont = {\n\t\t\t\"type\": \"\",\n\t\t\t\"weight\": \"\",\n\t\t\t\"size\": this.defaultSize,\n\t\t\t\"lineHeight\":this.defaultLineHeight,\n\t\t\t\"family\": this.defaultFamily,\n\t\t\t\"variant\": this.defaultVariant\n\t\t};\n\t\tthis._textAlign = this.defaultTextAlign;\n\t},\n\n\tevents: {\n\t\t\"Draw\": function (e) {\n\t\t\tvar font = this._fontString();\n\n\t\t\tif (e.type === \"DOM\") {\n\t\t\t\tvar el = this._element,\n\t\t\t\t\tstyle = el.style;\n\n\t\t\t\tstyle.color = this._textColor;\n\t\t\t\tstyle.font = font;\n\t\t\t\tstyle.textAlign = this._textAlign;\n\t\t\t\tel.innerHTML = this._text;\n\t\t\t} else if (e.type === \"canvas\") {\n\t\t\t\tvar context = e.ctx;\n\n\t\t\t\tcontext.save();\n\n\t\t\t\tcontext.textBaseline = \"top\";\n\t\t\t\tcontext.fillStyle = this._textColor || \"rgb(0,0,0)\";\n\t\t\t\tcontext.font = font;\n\t\t\t\tcontext.textAlign = this._textAlign;\n\n\t\t\t\tcontext.fillText(this._text, e.pos._x, e.pos._y);\n\n\t\t\t\tcontext.restore();\n\t\t\t}\n\t\t},\n\n\t\t// type, weight, size, family, lineHeight, and variant.\n\t\t// For a few hardcoded css properties, set the internal definitions\n\t\t\"SetStyle\": function(propertyName) {\n\t\t\t// could check for DOM component, but this event should only be fired by such an entity!\n\t\t\t// Rather than triggering Invalidate on each of these, we rely on css() triggering that event \n\t\t\tswitch(propertyName) {\n\t\t\tcase \"textAlign\": \n\t\t\t\tthis._textAlign = this._element.style.textAlign;\n\t\t\t\tbreak;\n\t\t\tcase \"color\":\n\t\t\t\t// Need to set individual color components, so use method\n\t\t\t\tthis.textColor(this._element.style.color);\n\t\t\t\tbreak;\n\t\t\tcase \"fontType\":\n\t\t\t\tthis._textFont.type = this._element.style.fontType;\n\t\t\t\tbreak;\n\t\t\tcase \"fontWeight\":\n\t\t\t\tthis._textFont.weight = this._element.style.fontWeight;\n\t\t\t\tbreak;\n\t\t\tcase \"fontSize\":\n\t\t\t\tthis._textFont.size = this._element.style.fontSize;\n\t\t\t\tbreak;\n\t\t\tcase \"fontFamily\":\n\t\t\t\tthis._textFont.family = this._element.style.fontFamily;\n\t\t\t\tbreak;\n\t\t\tcase \"fontVariant\":\n\t\t\t\tthis._textFont.variant = this._element.style.fontVariant;\n\t\t\t\tbreak;\n\t\t\tcase \"lineHeight\":\n\t\t\t\tthis._textFont.lineHeight = this._element.style.lineHeight;\n\t\t\t\tbreak;\n\t\t\t}\n           \n\t\t}\n\t},\n\n\tremove: function(){\n\t\t// Clean up the dynamic text update\n\t\tthis.unbind(this._textUpdateEvent, this._dynamicTextUpdate);\n\t},\n\n\t// takes a CSS font-size string and gets the height of the resulting font in px\n\t_getFontHeight: (function(){\n\t\t// regex for grabbing the first string of letters\n\t\tvar re = /([a-zA-Z]+)\\b/;\n\t\t// From the CSS spec.  \"em\" and \"ex\" are undefined on a canvas.\n\t\tvar multipliers = {\n\t\t\t\"px\": 1,\n\t\t\t\"pt\": 4/3,\n\t\t\t\"pc\": 16,\n\t\t\t\"cm\": 96/2.54,\n\t\t\t\"mm\": 96/25.4,\n\t\t\t\"in\": 96,\n\t\t\t\"em\": undefined,\n\t\t\t\"ex\": undefined\n\t\t};\n\t\treturn function (font){\n\t\t\tvar number = parseFloat(font);\n\t\t\tvar match = re.exec(font);\n\t\t\tvar unit =  match ? match[1] : \"px\";\n\t\t\tif (multipliers[unit] !== undefined)\n\t\t\t\treturn Math.ceil(number * multipliers[unit]);\n\t\t\telse\n\t\t\t\treturn Math.ceil(number);\n\t\t};\n\t})(),\n\n\t/**@\n     * #.text\n     * @comp Text\n     * @kind Method\n     * \n     * @sign public this .text(String text)\n     * @param text - String of text that will be inserted into the DOM or Canvas element.\n     *\n     * @sign public this .text(Function textGenerator[, Any eventData])\n     * @param textGenerator - A function that returns a string.  \n     *        It will be immediately invoked with the optional eventData in the context of the entity,\n     *        with the result used as the text to display.\n     * @param [eventData] - Optional parameter to invoke the function with.\n     *\n     * This method will update the text inside the entity.\n     *\n     * If you need to reference attributes on the entity itself you can pass a function instead of a string.\n     * \n     * If dynamic text generation is turned on, the function will then be reevaluated as necessary.\n     * \n     * @see .dynamicTextGeneration\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, DOM, Text\").attr({ x: 100, y: 100 }).text(\"Look at me!!\");\n     *\n     * Qrafty.e(\"2D, DOM, Text\").attr({ x: 100, y: 100 })\n     *     .text(function () { return \"My position is \" + this._x });\n     *\n     * Qrafty.e(\"2D, Canvas, Text\").attr({ x: 100, y: 100 }).text(\"Look at me!!\");\n     *\n     * Qrafty.e(\"2D, Canvas, Text\").attr({ x: 100, y: 100 })\n     *     .text(function () { return \"My position is \" + this._x });\n     * ~~~\n     */\n\t_textGenerator: null,\n\ttext: function (text, eventData) {\n\t\tif (!(typeof text !== \"undefined\" && text !== null)) return this._text;\n\t\tif (typeof (text) === \"function\"){\n\t\t\tthis._text = text.call(this, eventData);\n\t\t\tthis._textGenerator = text;\n\t\t} else {\n\t\t\tthis._text = text;\n\t\t\tthis._textGenerator = null;\n\t\t}\n\n\t\tif (this.has(\"Canvas\") )\n\t\t\tthis._resizeForCanvas();\n\n\t\tthis.trigger(\"Invalidate\");\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.dynamicTextGeneration\n     * @comp Text\n     * @kind Method\n     * \n     * @sign public this .dynamicTextGeneration(bool dynamicTextOn[, string textUpdateEvent])\n     * @param dynamicTextOn - A flag that indicates whether dyanamic text should be on or off.\n     * @param textUpdateEvent - The name of the event which will trigger text to be updated.  Defaults to \"UpdateFrame\".  (This parameter does nothing if dynamicTextOn is false.)\n     *\n     * Turns on (or off) dynamic text generation for this entity.  While dynamic text generation is on, \n     * if the `.text()` method is called with a text generating function, the text will be updated each frame.\n     * \n     * If textUpdateEvent is provided, text generation will be bound to that event instead of \"UpdateFrame\".\n     *\n     * The text generating function is invoked with the event object parameter, which the event was triggered with.\n     * \n     * @note Dynamic text generation could cause performance issues when the entity is attached to a Canvas layer.\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, DOM, Text, Motion\").attr({ x: 100, y: 100, vx: 10 })\n     *     .text(function () { return \"My position is \" + this._x })\n     *     .dynamicTextGeneration(true)\n     * ~~~\n     * The above example will update the text with the entities position as it changes.\n     */\n\t_dynamicTextOn: false,\n\t_textUpdateEvent: null,\n\t_dynamicTextUpdate: function(eventData) {\n\t\tif (!this._textGenerator) return;\n\t\tthis.text(this._textGenerator, eventData);\n\t},\n\tdynamicTextGeneration: function(dynamicTextOn, textUpdateEvent) {\n\t\tthis.unbind(this._textUpdateEvent, this._dynamicTextUpdate);\n\t\tif (dynamicTextOn) {\n\t\t\tthis._textUpdateEvent = textUpdateEvent || \"UpdateFrame\";\n\t\t\tthis.bind(this._textUpdateEvent, this._dynamicTextUpdate);\n\t\t}\n\t\treturn this;\n\t},\n\n\t// Calculates the height and width of text on the canvas\n\t// Width is found by using the canvas measureText function\n\t// Height is only estimated -- it calculates the font size in pixels, and sets the height to 110% of that.\n\t_resizeForCanvas: function(){\n\t\tvar ctx = this._drawContext;\n\t\tctx.font = this._fontString();\n\t\tthis.w = ctx.measureText(this._text).width;\n\n\t\tvar size = (this._textFont.size || this.defaultSize);\n\t\tthis.h = 1.1 * this._getFontHeight(size);\n\n\t\t/* Offset the MBR for text alignment*/\n\t\tif (this._textAlign === \"left\" || this._textAlign === \"start\") {\n\t\t\tthis.offsetBoundary(0, 0, 0, 0);\n\t\t} else if (this._textAlign === \"center\") {\n\t\t\tthis.offsetBoundary(this.w/2, 0, -this.w/2, 0);\n\t\t} else if (this._textAlign === \"end\" || this._textAlign === \"right\") {\n\t\t\tthis.offsetBoundary(this.w, 0, -this.w, 0);\n\t\t}\n\t},\n\n\t// Returns the font string to use\n\t_fontString: function(){\n\t\treturn this._textFont.type + \" \" + this._textFont.variant  + \" \" + this._textFont.weight + \" \" + this._textFont.size  + \" / \" + this._textFont.lineHeight + \" \" + this._textFont.family;\n\t},\n\t/**@\n     * #.textColor\n     * @comp Text\n     * @kind Method\n     * \n     * @sign public this .textColor(String color)\n     * @param color - The color in name, hex, rgb or rgba\n     *\n     * Change the color of the text. You can use HEX, rgb and rgba colors. \n     *\n     * If you want the text to be transparent, you should use rgba where you can define alphaChannel.\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, DOM, Text\").attr({ x: 100, y: 100 }).text(\"Look at me!!\")\n     *   .textColor('#FF0000');\n     *\n     * Qrafty.e(\"2D, Canvas, Text\").attr({ x: 100, y: 100 }).text('Look at me!!')\n     *   .textColor('rgba(0, 255, 0, 0.5)');\n     *\n     * Qrafty.e(\"2D, Canvas, Text\").attr({ x: 100, y: 100 }).text('Look at me!!')\n     *   .textColor('white');\n     * ~~~\n     * @see Qrafty.assignColor\n     */\n\ttextColor: function (color) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.assignColor(color, this);\n\t\tthis._textColor = \"rgba(\" + this._red + \", \" + this._green + \", \" + this._blue + \", \" + this._strength + \")\";\n\t\tthis.trigger(\"Invalidate\");\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.textAlign\n     * @comp Text\n     * @kind Method\n     * \n     * @sign public this .textAlign(String alignment)\n     * @param alignment - The new alignment of the text.\n     *\n     * Change the alignment of the text. Valid values are 'start', 'end, 'left', 'center', or 'right'.\n     */\n\ttextAlign: function(alignment) {\n\t\tthis._textAlign = alignment;\n\t\tif (this.has(\"Canvas\"))\n\t\t\tthis._resizeForCanvas();\n\t\tthis.trigger(\"Invalidate\");\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.textFont\n     * @comp Text\n     * @kind Method\n     * \n     * @triggers Invalidate\n     * @sign public this .textFont(String key, * value)\n     * @param key - Property of the entity to modify\n     * @param value - Value to set the property to\n     *\n     * @sign public this .textFont(Object map)\n     * @param map - Object where the key is the property to modify and the value as the property value\n     *\n     * Use this method to set font property of the text entity.  Possible values are: type, weight, size, family, lineHeight, and variant.\n     *\n     * When rendered by the canvas, lineHeight and variant will be ignored.\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, DOM, Text\").textFont({ type: 'italic', family: 'Arial' });\n     * Qrafty.e(\"2D, Canvas, Text\").textFont({ size: '20px', weight: 'bold' });\n     *\n     * Qrafty.e(\"2D, Canvas, Text\").textFont(\"type\", \"italic\");\n     * Qrafty.e(\"2D, Canvas, Text\").textFont(\"type\"); // italic\n     * ~~~\n     */\n\ttextFont: function (key, value) {\n\t\tif (arguments.length === 1) {\n\t\t\t//if just the key, return the value\n\t\t\tif (typeof key === \"string\") {\n\t\t\t\treturn this._textFont[key];\n\t\t\t}\n\n\t\t\tif (typeof key === \"object\") {\n\t\t\t\tfor (var propertyKey in key) {\n\t\t\t\t\tif(propertyKey === \"family\"){\n\t\t\t\t\t\tthis._textFont[propertyKey] = \"'\" + key[propertyKey] + \"'\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._textFont[propertyKey] = key[propertyKey];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis._textFont[key] = value;\n\t\t}\n\n\t\tif (this.has(\"Canvas\") )\n\t\t\tthis._resizeForCanvas();\n\n\t\tthis.trigger(\"Invalidate\");\n\t\treturn this;\n\t},\n\t/**@\n     * #.unselectable\n     * @comp Text\n     * @kind Method\n     * \n     * @triggers Invalidate\n     * @sign public this .unselectable()\n     *\n     * This method sets the text so that it cannot be selected (highlighted) by dragging.\n     * (Canvas text can never be highlighted, so this only matters for DOM text.)\n     * Works by changing the css property \"user-select\" and its variants.\n     * \n     * Likewise, this sets the mouseover cursor to be \"default\" (arrow), not \"text\" (I-beam)\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, DOM, Text\").text('This text cannot be highlighted!').unselectable();\n     * ~~~\n     */\n\tunselectable: function () {\n\t\t// http://stackoverflow.com/questions/826782/css-rule-to-disable-text-selection-highlighting\n\t\tif (this.has(\"DOM\")) {\n\t\t\tthis.css({\n\t\t\t\t\"-webkit-touch-callout\": \"none\",\n\t\t\t\t\"-webkit-user-select\": \"none\",\n\t\t\t\t\"-khtml-user-select\": \"none\",\n\t\t\t\t\"-moz-user-select\": \"none\",\n\t\t\t\t\"-ms-user-select\": \"none\",\n\t\t\t\t\"user-select\": \"none\",\n\t\t\t\t\"cursor\": \"default\"\n\t\t\t});\n\t\t\tthis.trigger(\"Invalidate\");\n\t\t}\n\t\treturn this;\n\t}\n\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/text.js?");

/***/ }),

/***/ "./src/graphics/viewport.js":
/*!**********************************!*\
  !*** ./src/graphics/viewport.js ***!
  \**********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\nconst document = window.document;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.viewport\n     * @category Stage\n     * @kind Property\n     * \n     * @trigger ViewportScroll - when the viewport's x or y coordinates change\n     * @trigger ViewportScale - when the viewport's scale changes\n     * @trigger ViewportResize - when the viewport's dimension's change\n     * @trigger InvalidateViewport - when the viewport changes\n     * @trigger StopCamera - when any camera animations should stop, such as at the start of a new animation.\n     * @trigger CameraAnimationDone - when a camera animation reaches completion\n     *\n     * Viewport is essentially a 2D camera looking at the stage. Can be moved or zoomed, which\n     * in turn will react just like a camera moving in that direction.\n     *\n     * There are multiple camera animation methods available - these are the viewport methods with an animation time parameter and the `follow` method.\n     * Only one animation can run at a time. Starting a new animation will cancel the previous one and the appropriate events will be fired.\n     * \n     * Tip: At any given moment, the stuff that you can see is...\n     * \n     * `x` between `(-Qrafty.viewport._x)` and `(-Qrafty.viewport._x + (Qrafty.viewport._width / Qrafty.viewport._scale))`\n     * \n     * `y` between `(-Qrafty.viewport._y)` and `(-Qrafty.viewport._y + (Qrafty.viewport._height / Qrafty.viewport._scale))`\n     *\n     *\n     * @example\n     * Prevent viewport from adjusting itself when outside the game world.\n     * Scale the viewport so that entities appear twice as large.\n     * Then center the viewport on an entity over the duration of 3 seconds.\n     * After that animation finishes, start following the entity.\n     * ~~~\n     * var ent = Qrafty.e('2D, DOM').attr({x: 250, y: 250, w: 100, h: 100});\n     *\n     * Qrafty.viewport.clampToEntities = false;\n     * Qrafty.viewport.scale(2);\n     * Qrafty.one(\"CameraAnimationDone\", function() {\n     *     Qrafty.viewport.follow(ent, 0, 0);\n     * });\n     * Qrafty.viewport.centerOn(ent, 3000);\n     * ~~~\n     */\n\tviewport: {\n\t\t/**@\n         * #Qrafty.viewport.clampToEntities\n         * @comp Qrafty.viewport\n         * @kind Property\n         *\n         * Decides if the viewport functions should clamp to game entities.\n         * When set to `true` functions such as Qrafty.viewport.mouselook() will not allow you to move the\n         * viewport over areas of the game that has no entities.\n         * For development it can be useful to set this to false.\n         */\n\t\tclampToEntities: true,\n\t\t_width: 0,\n\t\t_height: 0,\n\t\t/**@\n         * #Qrafty.viewport.x\n         * @comp Qrafty.viewport\n         * @kind Property\n         *\n         * Will move the stage and therefore every visible entity along the `x`\n         * axis in the opposite direction.\n         *\n         * When this value is set, it will shift the entire stage. This means that entity\n         * positions are not exactly where they are on screen. To get the exact position,\n         * simply add `Qrafty.viewport.x` onto the entities `x` position.\n         */\n\t\t_x: 0,\n\t\t/**@\n         * #Qrafty.viewport.y\n         * @comp Qrafty.viewport\n         * @kind Property\n         *\n         * Will move the stage and therefore every visible entity along the `y`\n         * axis in the opposite direction.\n         *\n         * When this value is set, it will shift the entire stage. This means that entity\n         * positions are not exactly where they are on screen. To get the exact position,\n         * simply add `Qrafty.viewport.y` onto the entities `y` position.\n         */\n\t\t_y: 0,\n\n\t\t/**@\n         * #Qrafty.viewport._scale\n         * @comp Qrafty.viewport\n         * @kind Property\n         *\n         * This value is the current scale (zoom) of the viewport. When the value is bigger than 1, everything\n         * looks bigger (zoomed in). When the value is less than 1, everything looks smaller (zoomed out). This\n         * does not alter the size of the stage itself, just the magnification of what it shows.\n         * \n         * This is a read-only property: Do not set it directly. Instead, use `Qrafty.viewport.scale(...)`\n         * or `Qrafty.viewport.zoom(...)`\n         */\n\n\t\t_scale: 1,\n\n\t\t/**@\n         * #Qrafty.viewport.bounds\n         * @comp Qrafty.viewport\n         * @kind Property\n         *\n         * A rectangle which defines the bounds of the viewport.\n         * It should be an object with two properties, `max` and `min`,\n         * which are each an object with `x` and `y` properties.\n         *\n         * If this property is null, Qrafty uses the bounding box of all the items\n         * on the stage.  This is the initial value.  (To prevent this behavior, set `Qrafty.viewport.clampToEntities` to `false`)\n         *\n         * If you wish to bound the viewport along one axis but not the other, you can use `-Infinity` and `+Infinity` as bounds.\n         *\n         * @see Qrafty.viewport.clampToEntities\n         *\n         * @example\n         * Set the bounds to a 500 by 500 square:\n         *\n         * ~~~\n         * Qrafty.viewport.bounds = {min:{x:0, y:0}, max:{x:500, y:500}};\n         * ~~~\n         */\n\t\tbounds: null,\n\n\t\t/**@\n         * #Qrafty.viewport.scroll\n         * @comp Qrafty.viewport\n         * @kind Method\n         * \n         * @sign Qrafty.viewport.scroll(String axis, Number val)\n         * @param axis - 'x' or 'y'\n         * @param val - The new absolute position on the axis\n         *\n         * Will move the viewport to the position given on the specified axis\n         *\n         * @example\n         * Will move the camera 500 pixels right of its initial position, in effect\n         * shifting everything in the viewport 500 pixels to the left.\n         *\n         * ~~~\n         * Qrafty.viewport.scroll('_x', 500);\n         * ~~~\n         */\n\t\tscroll: function (axis, val) {\n\t\t\tthis[axis] = val;\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"ViewportScroll\");\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"InvalidateViewport\");\n\t\t},\n\n\t\trect_object: { _x: 0, _y: 0, _w: 0, _h: 0},\n\n\t\t/**@\n         * #Qrafty.viewport.rect\n         * @comp Qrafty.viewport\n         * @kind Method\n         * \n         * @sign public Object Qrafty.viewport.rect([Object out])\n         * @param Object out - an optional Object to write the `rect` to\n         * @return a rectangle encompassing the currently visible viewport region.\n         *         Contains the `_x`,`_y`,`_w`,`_h` properties.\n         *\n         * Convenience method which returns a `rect` of the currently visible viewport region.\n         * With no supplied `out` parameter, this method returns an internally reused object across invocations.\n         * If you want to save the viewport region for later use, pass an `out` argument instead, where the region will be written to.\n         *\n         * @example\n         * The `rect` is equivalent to the following properties:\n         * ~~~\n         * var rect = Qrafty.viewport.rect();\n         *\n         * rect._x === -Qrafty.viewport._x\n         * rect._y === -Qrafty.viewport._y\n         * rect._w === Qrafty.viewport._width / Qrafty.viewport._scale\n         * rect._h === Qrafty.viewport._height / Qrafty.viewport._scale\n         * ~~~\n         */\n\t\trect: function (out) {\n\t\t\tout = out || this.rect_object;\n\t\t\tout._x = -this._x;\n\t\t\tout._y = -this._y;\n\t\t\tout._w = this._width / this._scale;\n\t\t\tout._h = this._height / this._scale;\n\t\t\treturn out;\n\t\t},\n\n\t\t/**@ \n\n         * #Qrafty.viewport.pan\n         * @comp Qrafty.viewport\n         * @kind Method\n         * \n         * @sign public void Qrafty.viewport.pan(Number dx, Number dy, Number time[, String|function easingFn])\n         * @param Number dx - The distance along the x axis\n         * @param Number dy - The distance along the y axis\n         * @param Number time - The duration in ms for the entire camera movement\n         * @param easingFn - A string or custom function specifying an easing.  (Defaults to linear behavior.)  See Qrafty.easing for more information.\n         *\n         * Pans the camera a given number of pixels over the specified time\n         *\n         * @example\n         * ~~~\n         * // pan the camera 100 px right and down over the duration of 2 seconds using linear easing behaviour\n         * Qrafty.viewport.pan(100, 100, 2000);\n         * ~~~\n         */\n\t\tpan: (function () {\n\t\t\tvar targetX, targetY, startingX, startingY, easing;\n\n\t\t\tfunction updateFrame(e) {\n\t\t\t\teasing.tick(e.dt);\n\t\t\t\tvar v = easing.value();\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.x = (1-v) * startingX + v * targetX;\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.y = (1-v) * startingY + v * targetY;\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._clamp();\n\n\t\t\t\tif (easing.complete){\n\t\t\t\t\tstopPan();\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"CameraAnimationDone\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction stopPan(){\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.unbind(\"UpdateFrame\", updateFrame);\n\t\t\t}\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default._preBind(\"StopCamera\", stopPan);\n\n\t\t\treturn function (dx, dy, time, easingFn) {\n\t\t\t\t// Cancel any current camera control\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"StopCamera\");\n\n\t\t\t\t// Handle request to reset\n\t\t\t\tif (dx === \"reset\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tstartingX = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._x;\n\t\t\t\tstartingY = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._y;\n\t\t\t\ttargetX = startingX - dx;\n\t\t\t\ttargetY = startingY - dy;\n\n\t\t\t\teasing = new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.easing(time, easingFn);\n\n\t\t\t\t// bind to event, using uniqueBind prevents multiple copies from being bound\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.uniqueBind(\"UpdateFrame\", updateFrame);\n                       \n\t\t\t};\n\t\t})(),\n\n\t\t/**@\n         * #Qrafty.viewport.follow\n         * @comp Qrafty.viewport\n         * @kind Method\n         * \n         * @sign public void Qrafty.viewport.follow(Object target, Number offsetx, Number offsety)\n         * @param Object target - An entity with the 2D component\n         * @param Number offsetx - Follow target's center should be offsetx pixels away from viewport's center. Positive values puts target to the right of the screen.\n         * @param Number offsety - Follow target's center should be offsety pixels away from viewport's center. Positive values puts target to the bottom of the screen.\n         *\n         * Follows a given entity with the 2D component. If following target will take a portion of\n         * the viewport out of bounds of the world, following will stop until the target moves away.\n         *\n         * @example\n         * ~~~\n         * var ent = Qrafty.e('2D, DOM').attr({w: 100, h: 100});\n         * Qrafty.viewport.follow(ent, 0, 0);\n         * ~~~\n         */\n\t\tfollow: (function () {\n\t\t\tvar oldTarget, offx, offy;\n\n\t\t\tfunction change() {\n\t\t\t\tvar scale = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._scale;\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.scroll(\"_x\", -(this.x + (this.w / 2) - (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width / 2 / scale) - offx * scale));\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.scroll(\"_y\", -(this.y + (this.h / 2) - (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height / 2 / scale) - offy * scale));\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._clamp();\n\t\t\t}\n\n\t\t\tfunction stopFollow(){\n\t\t\t\tif (oldTarget) {\n\t\t\t\t\toldTarget.unbind(\"Move\", change);\n\t\t\t\t\toldTarget.unbind(\"ViewportScale\", change);\n\t\t\t\t\toldTarget.unbind(\"ViewportResize\", change);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default._preBind(\"StopCamera\", stopFollow);\n\n\t\t\treturn function (target, offsetx, offsety) {\n\t\t\t\tif (!target || !target.has(\"2D\"))\n\t\t\t\t\treturn;\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"StopCamera\");\n\n\t\t\t\toldTarget = target;\n\t\t\t\toffx = (typeof offsetx !== \"undefined\") ? offsetx : 0;\n\t\t\t\toffy = (typeof offsety !== \"undefined\") ? offsety : 0;\n\n\t\t\t\ttarget.bind(\"Move\", change);\n\t\t\t\ttarget.bind(\"ViewportScale\", change);\n\t\t\t\ttarget.bind(\"ViewportResize\", change);\n\t\t\t\tchange.call(target);\n\t\t\t};\n\t\t})(),\n\n\t\t/**@\n         * #Qrafty.viewport.centerOn\n         * @comp Qrafty.viewport\n         * @kind Method\n         * \n         * @sign public void Qrafty.viewport.centerOn(Object target, Number time)\n         * @param Object target - An entity with the 2D component\n         * @param Number time - The duration in ms of the camera motion\n         *\n         * Centers the viewport on the given entity.\n         *\n         * @example\n         * ~~~\n         * var ent = Qrafty.e('2D, DOM').attr({x: 250, y: 250, w: 100, h: 100});\n         * Qrafty.viewport.centerOn(ent, 3000);\n         * ~~~\n         */\n\t\tcenterOn: function (targ, time) {\n\t\t\tvar x = targ.x + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.x,\n\t\t\t\ty = targ.y + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.y,\n\t\t\t\tmid_x = targ.w / 2,\n\t\t\t\tmid_y = targ.h / 2,\n\t\t\t\tcent_x = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width / 2 / _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._scale,\n\t\t\t\tcent_y = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height / 2 / _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._scale,\n\t\t\t\tnew_x = x + mid_x - cent_x,\n\t\t\t\tnew_y = y + mid_y - cent_y;\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.pan(new_x, new_y, time);\n\t\t},\n\n\t\t/**@\n         * #Qrafty.viewport.zoom\n         * @comp Qrafty.viewport\n         * @kind Method\n         * \n         * @sign public void Qrafty.viewport.zoom(Number amt, Number cent_x, Number cent_y, Number time[, String|function easingFn])\n         * @param Number amt - amount to zoom in on the target by (eg. 2, 4, 0.5)\n         * @param Number cent_x - the center to zoom on\n         * @param Number cent_y - the center to zoom on\n         * @param Number time - the duration in ms of the entire zoom operation\n         * @param easingFn - A string or custom function specifying an easing.  (Defaults to linear behavior.)  See Qrafty.easing for more information.\n         *\n         * Zooms the camera in on a given point. amt > 1 will bring the camera closer to the subject\n         * amt < 1 will bring it farther away. amt = 0 will reset to the default zoom level\n         * Zooming is multiplicative. To reset the zoom amount, pass 0.\n         *\n         * @example\n         * ~~~\n         * // Make the entities appear twice as large by zooming in on the specified coordinates over the duration of 3 seconds using linear easing behavior\n         * Qrafty.viewport.zoom(2, 100, 100, 3000);\n         * ~~~\n         */\n\t\tzoom: (function () {\n            \n\n\t\t\tfunction stopZoom(){\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.unbind(\"UpdateFrame\", updateFrame);\n\t\t\t}\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default._preBind(\"StopCamera\", stopZoom);\n\n\t\t\tvar startingZoom, finalZoom, finalAmount, startingX, finalX, startingY, finalY, easing;\n\n\t\t\tfunction updateFrame(e){\n\t\t\t\tvar amount, v;\n\n\t\t\t\teasing.tick(e.dt);\n\n\t\t\t\t// The scaling should happen smoothly -- start at 1, end at finalAmount, and at half way scaling should be by finalAmount^(1/2)\n\t\t\t\t// Since value goes smoothly from 0 to 1, this fufills those requirements\n\t\t\t\tamount = Math.pow(finalAmount, easing.value() );\n\n\t\t\t\t// The viewport should move in such a way that no point reverses\n\t\t\t\t// If a and b are the top left/bottom right of the viewport, then the below can be derived from\n\t\t\t\t//      (a_0-b_0)/(a-b) = amount,\n\t\t\t\t// and the assumption that both a and b have the same form\n\t\t\t\t//      a = a_0 * (1-v) + a_f * v,\n\t\t\t\t//      b = b_0 * (1-v) + b_f * v.\n\t\t\t\t// This is just an arbitrary parameterization of the only sensible path for the viewport corners to take.\n\t\t\t\t// And by symmetry they should be parameterized in the same way!  So not much choice here.\n\t\t\t\tif (finalAmount === 1)\n\t\t\t\t\tv = easing.value();  // prevent NaN!  If zoom is used this way, it'll just become a pan.\n\t\t\t\telse\n\t\t\t\t\tv = (1/amount - 1 ) / (1/finalAmount - 1);\n\n\t\t\t\t// Set new scale and viewport position\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.scale( amount * startingZoom );\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.scroll(\"_x\", startingX * (1-v) + finalX * v );\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.scroll(\"_y\", startingY * (1-v) + finalY * v );\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._clamp();\n\n\t\t\t\tif (easing.complete){\n\t\t\t\t\tstopZoom();\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"CameraAnimationDone\");\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\treturn function (amt, cent_x, cent_y, time, easingFn){\n\t\t\t\tif (!amt) { // we're resetting to defaults\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.scale(1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (arguments.length <= 2) {\n\t\t\t\t\ttime = cent_x;\n\t\t\t\t\tcent_x = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.x - _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width;\n\t\t\t\t\tcent_y = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.y - _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height;\n\t\t\t\t}\n\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"StopCamera\");\n\t\t\t\tstartingZoom = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._scale;\n\t\t\t\tfinalAmount = amt;\n\t\t\t\tfinalZoom = startingZoom * finalAmount;\n                \n\n\t\t\t\tstartingX = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.x;\n\t\t\t\tstartingY = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.y;\n\t\t\t\tfinalX = - (cent_x - _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width  / (2 * finalZoom) );\n\t\t\t\tfinalY = - (cent_y - _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height / (2 * finalZoom) );\n\n\t\t\t\teasing = new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.easing(time, easingFn);\n\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.uniqueBind(\"UpdateFrame\", updateFrame);\n\t\t\t};\n\n            \n\t\t})(),\n\t\t/**@\n         * #Qrafty.viewport.scale\n         * @comp Qrafty.viewport\n         * @kind Method\n         * \n         * @sign public void Qrafty.viewport.scale(Number amt)\n         * @param Number amt - amount to zoom/scale in on the elements\n         *\n         * Adjusts the scale (zoom). When `amt` is 1, it is set to the normal scale,\n         * e.g. an entity with `this.w == 20` would appear exactly 20 pixels wide.\n         * When `amt` is 10, that same entity would appear 200 pixels wide (i.e., zoomed in\n         * by a factor of 10), and when `amt` is 0.1, that same entity would be 2 pixels wide\n         * (i.e., zoomed out by a factor of `(1 / 0.1)`).\n         * \n         * If you pass an `amt` of 0, it is treated the same as passing 1, i.e. the scale is reset.\n         *\n         * This method sets the absolute scale, while `Qrafty.viewport.zoom` sets the scale relative to the existing value.\n         * @see Qrafty.viewport.zoom\n         *\n         * @example\n         * ~~~\n         * Qrafty.viewport.scale(2); // Zoom in -- all entities will appear twice as large.\n         * ~~~\n         */\n\t\tscale: (function () {\n\t\t\treturn function (amt) {\n\t\t\t\tthis._scale = amt ? amt : 1;\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"InvalidateViewport\");\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"ViewportScale\");\n\n\t\t\t};\n\t\t})(),\n\n\t\t/**@\n         * #Qrafty.viewport.mouselook\n         * @comp Qrafty.viewport\n         * @kind Method\n         * \n         * @sign public void Qrafty.viewport.mouselook(Boolean active)\n         * @param Boolean active - Activate or deactivate mouselook\n         *\n         * Toggle mouselook on the current viewport.\n         * Simply call this function and the user will be able to\n         * drag the viewport around.\n         *\n         * If the user starts a drag, \"StopCamera\" will be triggered, which will cancel any existing camera animations.\n         */\n\t\tmouselook: (function () {\n\t\t\tvar mouseSystem;\n\n\t\t\tvar active = false,\n\t\t\t\tdragging = false,\n\t\t\t\tlastMouse = {x: 0, y: 0},\n\t\t\t\tdiff = {x: 0, y: 0};\n\n\t\t\tfunction startFn (e) {\n\t\t\t\tif (dragging || e.target) return;\n\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"StopCamera\");\n\t\t\t\t// DEPRECATED: switch computation to use e.realX, e.realY\n\t\t\t\tlastMouse.x = e.clientX;\n\t\t\t\tlastMouse.y = e.clientY;\n\t\t\t\tdragging = true;\n\t\t\t}\n\t\t\tfunction moveFn (e) {\n\t\t\t\tif (!dragging) return;\n\n\t\t\t\tdiff.x = e.clientX - lastMouse.x;\n\t\t\t\tdiff.y = e.clientY - lastMouse.y;\n\n\t\t\t\tlastMouse.x = e.clientX;\n\t\t\t\tlastMouse.y = e.clientY;\n\n\t\t\t\tvar viewport = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport;\n\t\t\t\tviewport.x += diff.x / viewport._scale;\n\t\t\t\tviewport.y += diff.y / viewport._scale;\n\t\t\t\tviewport._clamp();\n\t\t\t}\n\t\t\tfunction stopFn (e) {\n\t\t\t\tif (!dragging) return;\n\n\t\t\t\tdragging = false;\n\t\t\t}\n\n\t\t\treturn function (op) {\n\t\t\t\t// TODO: lock pointer events on controls system in future\n\t\t\t\tmouseSystem = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\");\n\n\t\t\t\tif (op && !active) {\n\t\t\t\t\tmouseSystem.bind(\"MouseDown\", startFn);\n\t\t\t\t\tmouseSystem.bind(\"MouseMove\", moveFn);\n\t\t\t\t\tmouseSystem.bind(\"MouseUp\", stopFn);\n\t\t\t\t\tactive = op;\n\t\t\t\t} else if (!op && active) {\n\t\t\t\t\tmouseSystem.unbind(\"MouseDown\", startFn);\n\t\t\t\t\tmouseSystem.unbind(\"MouseMove\", moveFn);\n\t\t\t\t\tmouseSystem.unbind(\"MouseUp\", stopFn);\n\t\t\t\t\tactive = op;\n\t\t\t\t}\n\t\t\t};\n\t\t})(),\n\n\t\t_clamp: function () {\n\t\t\t// clamps the viewport to the viewable area\n\t\t\t// under no circumstances should the viewport see something outside the boundary of the 'world'\n\t\t\tif (!this.clampToEntities) return;\n\t\t\tvar bound = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.clone(this.bounds) || _core_core__WEBPACK_IMPORTED_MODULE_0__.default.map.boundaries();\n\t\t\tbound.max.x *= this._scale;\n\t\t\tbound.min.x *= this._scale;\n\t\t\tbound.max.y *= this._scale;\n\t\t\tbound.min.y *= this._scale;\n\t\t\tif (bound.max.x - bound.min.x > _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width) {\n\t\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.x < (-bound.max.x + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width) / this._scale) {\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.x = (-bound.max.x + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width) / this._scale;\n\t\t\t\t} else if (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.x > -bound.min.x) {\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.x = -bound.min.x;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.x = -1 * (bound.min.x + (bound.max.x - bound.min.x) / 2 - _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width / 2);\n\t\t\t}\n\t\t\tif (bound.max.y - bound.min.y > _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height) {\n\t\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.y < (-bound.max.y + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height) / this._scale) {\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.y = (-bound.max.y + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height) / this._scale;\n\t\t\t\t} else if (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.y > -bound.min.y) {\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.y = -bound.min.y;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.y = -1 * (bound.min.y + (bound.max.y - bound.min.y) / 2 - _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height / 2);\n\t\t\t}\n\t\t},\n\n\t\t/**@\n         * #Qrafty.viewport.init\n         * @comp Qrafty.stage\n         * @kind Method\n         * \n         * @sign public void Qrafty.viewport.init([Number width, Number height][, String stage_elem])\n         * @sign public void Qrafty.viewport.init([Number width, Number height][, HTMLElement stage_elem])\n         * @param Number width - Width of the viewport\n         * @param Number height - Height of the viewport\n         * @param String or HTMLElement stage_elem - the element to use as the stage (either its id or the actual element).\n         *\n         * Initialize the viewport.\n         * If the arguments 'width' or 'height' are missing, use `window.innerWidth` and `window.innerHeight` (full screen model).\n         * The argument 'stage_elem' is used to specify a stage element other than the default, and can be either a string or an HTMLElement.  If a string is provided, it will look for an element with that id and, if none exists, create a div.  If an HTMLElement is provided, that is used directly.  Omitting this argument is the same as passing an id of 'cr-stage'.\n         *\n         * Usually you don't have to initialize the viewport by yourself, it's automatically initialized by calling `Qrafty.init()`. Multiple `init`s will create redundant stage elements. Use `Qrafty.viewport.width`, `Qrafty.viewport.height` or `Qrafty.viewport.reload` to adjust the current viewport's dimensions.\n         *\n         * @see Qrafty.device, Qrafty.domHelper, Qrafty.stage, Qrafty.viewport.reload\n         */\n\t\tinit: function (w, h, stage_elem) {\n\t\t\t// Handle specifying stage_elem without w & h\n\t\t\tif (typeof(stage_elem) === \"undefined\" && typeof(h) === \"undefined\" &&\n                typeof(w) !==\"undefined\" && typeof(w) !== \"number\") {\n\t\t\t\tstage_elem = w;\n\t\t\t\tw = window.innerWidth;\n\t\t\t\th = window.innerHeight;\n\t\t\t}\n\n\t\t\t// Define default graphics layers with default z-layers\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.createLayer(\"DefaultCanvasLayer\", \"Canvas\", {z: 20});\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.createLayer(\"DefaultDOMLayer\", \"DOM\", {z: 30});\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.createLayer(\"DefaultWebGLLayer\", \"WebGL\", {z: 10});\n            \n\t\t\t// setters+getters for the viewport\n\t\t\tthis._defineViewportProperties();\n\n\t\t\t// Set initial values -- necessary on restart\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._scale = 1;\n\t\t\tthis.bounds = null;\n\n\t\t\t// If no width or height is defined, the width and height is set to fullscreen\n\t\t\tthis._width = w || window.innerWidth;\n\t\t\tthis._height = h || window.innerHeight;\n\n\t\t\t/**@\n             * #Qrafty.stage\n             * @category Core\n             * @kind CoreObject\n             * \n             * The stage where all the DOM entities will be placed.\n             */\n\n\t\t\t/**@\n             * #Qrafty.stage.elem\n             * @comp Qrafty.stage\n             * @kind Property\n             * \n             * The `#cr-stage` div element.\n             */\n\n\t\t\t//create stage div to contain everything\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage = {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tfullscreen: false,\n\t\t\t\telem: stage_elem\n\t\t\t};\n\n\t\t\t//fullscreen, stop scrollbars\n\t\t\tif (!w && !h) {\n\t\t\t\tdocument.body.style.overflow = \"hidden\";\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.fullscreen = true;\n\t\t\t}\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, window, \"resize\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.reload);\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, window, \"blur\", function () {\n\t\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.settings.get(\"autoPause\")) {\n\t\t\t\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default._paused) _core_core__WEBPACK_IMPORTED_MODULE_0__.default.pause();\n\t\t\t\t}\n\t\t\t});\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, window, \"focus\", function () {\n\t\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default._paused && _core_core__WEBPACK_IMPORTED_MODULE_0__.default.settings.get(\"autoPause\")) {\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.pause();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//make the stage unselectable\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.settings.register(\"stageSelectable\", function (v) {\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem.onselectstart = v ? function () {\n\t\t\t\t\treturn true;\n\t\t\t\t} : function () {\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\t\t\t});\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.settings.modify(\"stageSelectable\", false);\n\n\t\t\t//make the stage have no context menu\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.settings.register(\"stageContextMenu\", function (v) {\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem.oncontextmenu = v ? function () {\n\t\t\t\t\treturn true;\n\t\t\t\t} : function () {\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\t\t\t});\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.settings.modify(\"stageContextMenu\", false);\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.settings.register(\"autoPause\", function () {});\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.settings.modify(\"autoPause\", false);\n\n\t\t\t//add to the body and give it an ID if not exists\n\t\t\tif (!stage_elem) {\n\t\t\t\tdocument.body.appendChild(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem);\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem.id = stage_elem;\n\t\t\t}\n\n\t\t\tvar elem = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem.style,\n\t\t\t\toffset;\n\n\t\t\t//css style\n\t\t\telem.width = this.width + \"px\";\n\t\t\telem.height = this.height + \"px\";\n\t\t\telem.overflow = \"hidden\";\n\n\n\t\t\t// resize events\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.bind(\"ViewportResize\", function(){_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"InvalidateViewport\");});\n\n\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.mobile) {\n\n\t\t\t\t// remove default gray highlighting after touch\n\t\t\t\tif (typeof elem.webkitTapHighlightColor !== undefined) {\n\t\t\t\t\telem.webkitTapHighlightColor = \"rgba(0,0,0,0)\";\n\t\t\t\t}\n\n\t\t\t\tvar meta = document.createElement(\"meta\"),\n\t\t\t\t\thead = document.getElementsByTagName(\"head\")[0];\n\n\t\t\t\t//hide the address bar\n\t\t\t\tmeta = document.createElement(\"meta\");\n\t\t\t\tmeta.setAttribute(\"name\", \"apple-mobile-web-app-capable\");\n\t\t\t\tmeta.setAttribute(\"content\", \"yes\");\n\t\t\t\thead.appendChild(meta);\n\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"touchmove\", function (e) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t});\n\n\n\t\t\t}\n            \n\t\t\telem.position = \"relative\";\n\t\t\t//find out the offset position of the stage\n\t\t\toffset = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.domHelper.innerPosition(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem);\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.x = offset.x;\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.y = offset.y;\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.uniqueBind(\"ViewportResize\", this._resize);\n\t\t},\n\n\t\t_resize: function(){\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem.style.width = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width + \"px\";\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem.style.height = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height + \"px\";\n\t\t},\n\n\t\t// Create setters/getters for x, y, width, height\n\t\t_defineViewportProperties: function(){\n\t\t\tObject.defineProperty(this, \"x\", {\n\t\t\t\tset: function (v) {\n\t\t\t\t\tthis.scroll(\"_x\", v);\n\t\t\t\t},\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this._x;\n\t\t\t\t},\n\t\t\t\tconfigurable : true\n\t\t\t});\n\t\t\tObject.defineProperty(this, \"y\", {\n\t\t\t\tset: function (v) {\n\t\t\t\t\tthis.scroll(\"_y\", v);\n\t\t\t\t},\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this._y;\n\t\t\t\t},\n\t\t\t\tconfigurable : true\n\t\t\t});\n\t\t\tObject.defineProperty(this, \"width\", {\n\t\t\t\tset: function (v) {\n\t\t\t\t\tthis._width = v;\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"ViewportResize\");\n\t\t\t\t},\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this._width;\n\t\t\t\t},\n\t\t\t\tconfigurable : true\n\t\t\t});\n\t\t\tObject.defineProperty(this, \"height\", {\n\t\t\t\tset: function (v) {\n\t\t\t\t\tthis._height = v;\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"ViewportResize\");\n\t\t\t\t},\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this._height;\n\t\t\t\t},\n\t\t\t\tconfigurable : true\n\t\t\t});\n\t\t},\n\n\t\t/**@\n         * #Qrafty.viewport.reload\n         * @comp Qrafty.stage\n         * @kind Method\n         *\n         * @sign public Qrafty.viewport.reload()\n         *\n         * Recalculate and reload stage width, height and position.\n         * Useful when browser return wrong results on init (like safari on Ipad2).\n         * You should also call this method if you insert custom DOM elements that affect Qrafty's stage offset.\n         *\n         */\n\t\treload: function () {\n\t\t\tvar w = window.innerWidth,\n\t\t\t\th= window.innerHeight,\n\t\t\t\toffset;\n\n\n\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.fullscreen) {\n\t\t\t\tthis._width = w;\n\t\t\t\tthis._height = h;\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"ViewportResize\");\n\t\t\t}\n\n\t\t\toffset = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.domHelper.innerPosition(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem);\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.x = offset.x;\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.y = offset.y;\n\t\t},\n\n\t\t/**@\n         * #Qrafty.viewport.reset\n         * @comp Qrafty.stage\n         * @kind Method\n         * \n         * @trigger StopCamera - called to cancel camera animations\n         *\n         * @sign public Qrafty.viewport.reset()\n         *\n         * Resets the viewport to starting values, and cancels any existing camera animations.\n         * Called when scene() is run.\n         */\n\t\treset: function () {\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.mouselook(false);\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"StopCamera\");\n\t\t\t// Reset viewport position and scale\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.scroll(\"_x\", 0);\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.scroll(\"_y\", 0);\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.scale(1);\n\t\t},\n\n\t\t/**@\n         * #Qrafty.viewport.onScreen\n         * @comp Qrafty.viewport\n         * @kind Method\n         * \n         * @sign public Qrafty.viewport.onScreen(Object rect)\n         * @param rect - A rectangle with field {_x: x_val, _y: y_val, _w: w_val, _h: h_val}\n         *\n         * Test if a rectangle is completely in viewport\n         */\n\t\tonScreen: function (rect) {\n\t\t\treturn _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._x + rect._x + rect._w > 0 && _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._y + rect._y + rect._h > 0 &&\n                _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._x + rect._x < _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width && _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._y + rect._y < _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height;\n\t\t}\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/viewport.js?");

/***/ }),

/***/ "./src/graphics/webgl-layer.js":
/*!*************************************!*\
  !*** ./src/graphics/webgl-layer.js ***!
  \*************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\nconst document = window.document;\n\n// Object for abstracting out all the gl calls to handle rendering entities with a particular program\nfunction RenderProgramWrapper(layer, shader){\n\tthis.shader = shader;\n\tthis.layer = layer;\n\tthis.context = layer.context;\n\tthis.draw = function() { };\n\n\tthis.array_size = 16;\n\tthis.max_size = 1024;\n\tthis._indexArray = new Uint16Array(6 * this.array_size);\n\tthis._indexBuffer = layer.context.createBuffer();\n}\n\nRenderProgramWrapper.prototype = {\n\t// Takes an array of attributes; see WebGLLayer's getProgramWrapper method\n\tinitAttributes: function(attributes) {\n\t\tthis.attributes = attributes;\n\t\tthis._attribute_table = {};\n\t\tvar offset = 0;\n\t\tfor (var i = 0; i < attributes.length; i++) {\n\t\t\tvar a = attributes[i];\n\t\t\tthis._attribute_table[a.name] = a;\n\n\t\t\ta.bytes = a.bytes || Float32Array.BYTES_PER_ELEMENT;\n\t\t\ta.type = a.type || this.context.FLOAT;\n\t\t\ta.offset = offset;\n\t\t\ta.location = this.context.getAttribLocation(this.shader, a.name);\n\n\t\t\tthis.context.enableVertexAttribArray(a.location);\n\n\t\t\toffset += a.width;\n\t\t}\n\n\t\t// Stride is the full width including the last set\n\t\tthis.stride = offset;\n\n\t\t// Create attribute array of correct size to hold max elements\n\t\tthis._attributeArray = new Float32Array(this.array_size * 4 * this.stride);\n\t\tthis._attributeBuffer = this.context.createBuffer();\n\t\tthis._registryHoles = [];\n\t\tthis._registrySize = 0;\n\t},\n\n\t// increase the size of the typed arrays\n\t// does so by creating a new array of that size and copying the existing one into it\n\tgrowArrays: function(size) {\n\t\tif (this.array_size >= this.max_size) return;\n\n\t\tvar newsize = Math.min(size, this.max_size);\n\n\t\tvar newAttributeArray = new Float32Array(newsize * 4 * this.stride);\n\t\tvar newIndexArray = new Uint16Array(6 * newsize);\n\n\t\tnewAttributeArray.set(this._attributeArray);\n\t\tnewIndexArray.set(this._indexArray);\n\n\t\tthis._attributeArray = newAttributeArray;\n\t\tthis._indexArray = newIndexArray;\n\t\tthis.array_size = newsize;\n\t},\n\n\t// Add an entity that needs to be rendered by this program\n\t// Needs to be assigned an index in the buffer\n\tregisterEntity: function(e) {\n\t\tif (this._registryHoles.length === 0) {\n\t\t\tif (this._registrySize >= this.max_size) {\n\t\t\t\tthrow (\"Number of entities exceeds maximum limit.\");\n\t\t\t} else if (this._registrySize >= this.array_size) {\n\t\t\t\tthis.growArrays(2 * this.array_size);\n\t\t\t}\n\t\t\te._glBufferIndex = this._registrySize;\n\t\t\tthis._registrySize++;\n\t\t} else {\n\t\t\te._glBufferIndex = this._registryHoles.pop();\n\t\t}\n\t},\n\n\t// remove an entity; allow its buffer index to be reused\n\tunregisterEntity: function(e) {\n\t\tif (typeof e._glBufferIndex === \"number\")\n\t\t\tthis._registryHoles.push(e._glBufferIndex);\n\t\te._glBufferIndex = null;\n\t},\n\n\tresetRegistry: function() {\n\t\tthis._maxElement = 0;\n\t\tthis._registryHoles.length = 0;\n\t},\n\n\tsetCurrentEntity: function(ent) {\n\t\t// offset is 4 * buffer index, because each entity has 4 vertices\n\t\tthis.ent_offset = ent._glBufferIndex * 4;\n\t\tthis.ent = ent;\n\t},\n\n\t// Called before a batch of entities is prepped for rendering\n\tswitchTo: function() {\n\t\tvar gl = this.context;\n\t\tgl.useProgram(this.shader);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._attributeBuffer);\n\t\tvar a, attributes = this.attributes;\n\t\t// Process every attribute\n\t\tfor (var i = 0; i < attributes.length; i++) {\n\t\t\ta = attributes[i];\n\t\t\tgl.vertexAttribPointer(a.location, a.width, a.type, false, this.stride * a.bytes, a.offset * a.bytes);\n\t\t}\n\n\t\t// For now, special case the need for texture objects\n\t\tvar t = this.texture_obj;\n\t\tif (t && t.unit === null) {\n\t\t\tthis.layer.texture_manager.bindTexture(t);\n\t\t}\n\n\t\tthis.index_pointer = 0;\n\t},\n\n\t// Sets a texture\n\tsetTexture: function(texture_obj) {\n\t\t// Only needs to be done once\n\t\tif (this.texture_obj !== undefined)\n\t\t\treturn;\n\t\t// Set the texture buffer to use\n\t\ttexture_obj.setToProgram(this.shader, \"uSampler\", \"uTextureDimensions\");\n\t\tthis.texture_obj = texture_obj;\n\t},\n\n\t// adds a set of 6 indices to the index array\n\t// Corresponds to 2 triangles that make up a rectangle\n\taddIndices: function(offset) {\n\t\tvar index = this._indexArray, l = this.index_pointer;\n\t\tindex[0 + l] = 0 + offset;\n\t\tindex[1 + l] = 1 + offset;\n\t\tindex[2 + l] = 2 + offset;\n\t\tindex[3 + l] = 1 + offset;\n\t\tindex[4 + l] = 2 + offset;\n\t\tindex[5 + l] = 3 + offset;\n\t\tthis.index_pointer += 6;\n\t},\n\n\n\t// Writes data from the attribute and index arrays to the appropriate buffers, and then calls drawElements.\n\trenderBatch: function() {\n\t\tvar gl = this.context;\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._attributeBuffer);\n\t\tgl.bufferData(gl.ARRAY_BUFFER, this._attributeArray, gl.STATIC_DRAW);\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._indexArray, gl.STATIC_DRAW);\n\t\tgl.drawElements(gl.TRIANGLES, this.index_pointer, gl.UNSIGNED_SHORT, 0);\n\t},\n\n\tsetViewportUniforms: function(viewport, cameraOptions) {\n\t\tvar gl = this.context;\n\t\tgl.useProgram(this.shader);\n\t\tgl.uniform4f(this.shader.viewport, -viewport._x, -viewport._y, viewport._w , viewport._h );\n\t},\n\n\t// Fill in the attribute with the given arguments, cycling through the data if necessary\n\t// If the arguments provided match the width of the attribute, that means it'll fill the same values for each of the four vertices.\n\t// TODO determine if this abstraction is a performance hit!\n\twriteVector: function(name, x, y) {\n\t\tvar a = this._attribute_table[name];\n\t\tvar stride = this.stride, offset = a.offset + this.ent_offset * stride, w = a.width;\n\t\tvar l = (arguments.length - 1);\n\t\tvar data = this._attributeArray;\n\n\t\tfor (var r = 0; r < 4; r++)\n\t\t\tfor (var c = 0; c < w; c++) {\n\t\t\t\tdata[offset + stride * r + c] = arguments[(w * r + c) % l + 1];\n\t\t\t}\n\t}\n};\n\n/**@\n * #WebGLLayer\n * @category Graphics\n * @kind System\n *\n * A collection of methods to handle webgl contexts.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default._registerLayerTemplate(\"WebGL\", {\n\ttype: \"WebGL\",\n\n\t/**@\n     * #.context\n     * @comp WebGLLayer\n     * @kind Property\n     *\n     * This will return the context of the webgl canvas element.\n     */\n\tcontext: null,\n\n\t// Create a vertex or fragment shader, given the source and type\n\t_compileShader: function(src, type) {\n\t\tvar gl = this.context;\n\t\tvar shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, src);\n\t\tgl.compileShader(shader);\n\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\t\t\tthrow (gl.getShaderInfoLog(shader));\n\t\t}\n\t\treturn shader;\n\t},\n\n\t// Create and return a complete, linked shader program, given the source for the fragment and vertex shaders.\n\t// Will compile the two shaders and then link them together\n\t_makeProgram: function(shader) {\n\t\tvar gl = this.context;\n\t\tvar fragmentShader = this._compileShader(shader.fragmentCode, gl.FRAGMENT_SHADER);\n\t\tvar vertexShader = this._compileShader(shader.vertexCode, gl.VERTEX_SHADER);\n\n\t\tvar shaderProgram = gl.createProgram();\n\t\tgl.attachShader(shaderProgram, vertexShader);\n\t\tgl.attachShader(shaderProgram, fragmentShader);\n\t\tgl.linkProgram(shaderProgram);\n\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n\t\t\tthrow (\"Could not initialise shaders\");\n\t\t}\n\n\t\tshaderProgram.viewport = gl.getUniformLocation(shaderProgram, \"uViewport\");\n\t\treturn shaderProgram;\n\t},\n\n\t// Will create and return a RenderProgramWrapper for a shader program.\n\t// name is a unique id, attributes an array of attribute names with their metadata.\n\t// Each attribute needs at least a `name`  and `width` property:\n\t// ~~~\n\t//   [\n\t//      {name:\"aPosition\", width: 2},\n\t//      {name:\"aOrientation\", width: 3},\n\t//      {name:\"aLayer\", width:2},\n\t//      {name:\"aColor\",  width: 4}\n\t//   ]\n\t// ~~~\n\t// The \"aPositon\", \"aOrientation\", and \"aLayer\" attributes should be the same for any webgl entity,\n\t// since they support the basic 2D properties\n\tgetProgramWrapper: function(name, shader) {\n\t\tif (this.programs[name] === undefined) {\n\t\t\tvar compiledShader = this._makeProgram(shader);\n\t\t\tvar program = new RenderProgramWrapper(this, compiledShader);\n\t\t\tprogram.name = name;\n\t\t\tprogram.initAttributes(shader.attributeList);\n\t\t\tprogram.draw = shader.drawCallback;\n\t\t\tprogram.setViewportUniforms(this._viewportRect(), this.options);\n\t\t\tthis.programs[name] = program;\n\t\t}\n\t\treturn this.programs[name];\n\t},\n\n\t// Make a texture out of the given image element\n\t// The url is just used as a unique ID\n\tmakeTexture: function(url, image, repeating) {\n\t\treturn this.texture_manager.makeTexture(url, image, repeating);\n\t},\n\n\tevents: {\n\t\t// Respond to init & remove events\n\t\t\"LayerInit\": \"layerInit\",\n\t\t\"LayerRemove\": \"layerRemove\",\n\t\t// Bind scene rendering (see drawing.js)\n\t\t\"RenderScene\": \"_render\",\n\t\t// Listen for pixelart changes\n\t\t\"PixelartSet\": \"_setPixelart\",\n\t\t// Handle viewport modifications\n\t\t\"ViewportResize\": \"_resize\"\n\t},\n\n\tlayerInit: function() {\n\n\t\t//check if we support webgl is supported\n\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.webgl) {\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"NoWebGL\");\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stop();\n\t\t\treturn;\n\t\t}\n\n\t\t// Avoid shared state between systems\n\t\tthis.programs = {};\n\n\t\t//create an empty canvas element\n\t\tvar c;\n\t\tc = document.createElement(\"canvas\");\n\t\tc.width = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width;\n\t\tc.height = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height;\n\t\tc.style.position = \"absolute\";\n\t\tc.style.left = \"0px\";\n\t\tc.style.top = \"0px\";\n\t\tc.style.zIndex = this.options.z;\n\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem.appendChild(c);\n\n\t\t// Try to get a webgl context\n\t\tvar gl;\n\t\ttry {\n\t\t\tgl = c.getContext(\"webgl\", { premultipliedalpha: true }) || c.getContext(\"experimental-webgl\", { premultipliedalpha: true });\n\t\t\tgl.viewportWidth = c.width;\n\t\t\tgl.viewportHeight = c.height;\n\t\t} catch (e) {\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"NoWebGL\");\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stop();\n\t\t\treturn;\n\t\t}\n\n\t\t// assign to this renderer\n\t\tthis.context = gl;\n\t\tthis._canvas = c;\n\n\t\tgl.clearColor(0.0, 0.0, 0.0, 0.0);\n\n\t\t// These commands allow partial transparency, but require drawing in z-order\n\t\tgl.disable(gl.DEPTH_TEST);\n\t\t// This particular blend function requires the shader programs to output pre-multiplied alpha\n\t\t// This is necessary to match the blending of canvas/dom entities against the background color\n\t\tgl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\tgl.enable(gl.BLEND);\n\n\t\tthis.texture_manager = new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.TextureManager(gl, this);\n\n\t\tthis._dirtyViewport = true;\n\t},\n\n\t// Cleanup the DOM when the system is destroyed\n\tlayerRemove: function() {\n\t\tthis._canvas.parentNode.removeChild(this._canvas);\n\t},\n\n\t// Called when the viewport resizes\n\t_resize: function() {\n\t\tvar c = this._canvas;\n\t\tc.width = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width;\n\t\tc.height = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height;\n\n\t\tvar gl = this.context;\n\t\tgl.viewportWidth = c.width;\n\t\tgl.viewportHeight = c.height;\n\t},\n\n\t// TODO consider shifting to texturemanager\n\t_setPixelart: function(enabled) {\n\t\tvar gl = this.context;\n\t\tif (enabled) {\n\t\t\tthis.texture_filter = gl.NEAREST;\n\t\t} else {\n\t\t\tthis.texture_filter = gl.LINEAR;\n\t\t}\n\t},\n\n\t// Hold an array ref to avoid garbage\n\tvisible_gl: [],\n\n\t// Render any entities associated with this context; called in response to a draw event\n\t_render: function(rect) {\n\t\trect = rect || this._viewportRect();\n\t\tvar gl = this.context;\n\n\t\t// Set viewport and clear it\n\t\tgl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n\t\t//Set the viewport uniform variables used by each registered program\n\t\tvar programs = this.programs;\n\t\tif (this._dirtyViewport) {\n\t\t\tvar view = this._viewportRect();\n\t\t\tfor (var comp in programs) {\n\t\t\t\tprograms[comp].setViewportUniforms(view, this.options);\n\t\t\t}\n\t\t\tthis._dirtyViewport = false;\n\t\t}\n\n\t\t// Search for any entities in the given area (viewport unless otherwise specified)\n\t\tvar q = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.map.search(rect),\n\t\t\ti = 0,\n\t\t\tl = q.length,\n\t\t\tcurrent;\n\t\t//From all potential candidates, build a list of visible entities, then sort by zorder\n\t\tvar visible_gl = this.visible_gl;\n\t\tvisible_gl.length = 0;\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tcurrent = q[i];\n\t\t\tif (current._visible && current.program && (current._drawLayer === this)) {\n\t\t\t\tvisible_gl.push(current);\n\t\t\t}\n\t\t}\n\t\tvisible_gl.sort(this._sort);\n\t\tl = visible_gl.length;\n\n\n\t\t// Now iterate through the z-sorted entities to be rendered\n\t\t// Each entity writes it's data into a typed array\n\t\t// The entities are rendered in batches, where the entire array is copied to a buffer in one operation\n\t\t// A batch is rendered whenever the next element needs to use a different type of program\n\t\t// Therefore, you get better performance by grouping programs by z-order if possible.\n\t\t// (Each sprite sheet will use a different program, but multiple sprites on the same sheet can be rendered in one batch)\n\t\tvar shaderProgram = null;\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tcurrent = visible_gl[i];\n\t\t\tif (shaderProgram !== current.program) {\n\t\t\t\tif (shaderProgram !== null) {\n\t\t\t\t\tshaderProgram.renderBatch();\n\t\t\t\t}\n\n\t\t\t\tshaderProgram = current.program;\n\t\t\t\tshaderProgram.index_pointer = 0;\n\t\t\t\tshaderProgram.switchTo();\n\t\t\t}\n\t\t\tcurrent.draw();\n\t\t\tcurrent._changed = false;\n\t\t}\n\n\t\tif (shaderProgram !== null) {\n\t\t\tshaderProgram.renderBatch();\n\t\t}\n\n\t},\n\n\t/**@\n     * #.dirty\n     * @comp WebGLLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .dirty(ent)\n     * @param ent - The entity to mark as dirty\n     *\n     * Add an entity to the list of DOM object to draw\n     */\n\tdirty: function dirty(ent) {\n\t\t// WebGL doens't need to do any special tracking of changed objects\n\t},\n\n\t/**@\n     * #.attach\n     * @comp WebGLLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .attach(ent)\n     * @param ent - The entity to add\n     *\n     * Add an entity to the layer\n     */\n\tattach: function attach(ent) {\n\t\t// WebGL entities really need to be added to a specific program, which is handled in the LayerAttached event by components\n\t\tent._drawContext = this.context;\n\t},\n\n\t/**@\n     * #.detach\n     * @comp WebGLLayer\n     * @kind Method\n     * @private\n     * \n     * @sign public .detach(ent)\n     * @param ent - The entity to remove\n     *\n     * Removes an entity from the layer\n     */\n\tdetach: function detach(ent) {\n\t\t// This could, like attach, be handled by components\n\t\t// We instead handle it in a central place for now\n\t\tif (ent.program) {\n\t\t\tent.program.unregisterEntity(ent);\n\t\t}\n\t}\n\n});\n\n\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/webgl-layer.js?");

/***/ }),

/***/ "./src/graphics/webgl.js":
/*!*******************************!*\
  !*** ./src/graphics/webgl.js ***!
  \*******************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #WebGL\n * @category Graphics\n * @kind Component\n * \n * @trigger Draw - when the entity is ready to be drawn to the stage - {type: \"canvas\", pos, co, ctx}\n * @trigger NoCanvas - if the browser does not support canvas\n *\n * When this component is added to an entity it will be drawn to the global webgl canvas element. Its canvas element (and hence any WebGL entity) is always rendered below any DOM entities.\n *\n * Sprite, Image, SpriteAnimation, and Color all support WebGL rendering.  Text entities will need to use DOM or Canvas for now.\n *\n * If a webgl context does not yet exist, a WebGL entity will automatically create one.\n *\n * @note For better performance, minimize the number of spritesheets used, and try to arrange it so that entities with different spritesheets are on different z-levels.  This is because entities are rendered in z order, and only entities sharing the same texture can be efficiently batched.\n *\n * Create a webgl entity like this\n * ~~~\n * var myEntity = Qrafty.e(\"2D, WebGL, Color\")\n *      .color(1, 1, 0, 0.5)\n *      .attr({x: 13, y: 37, w: 42, h: 42});\n *~~~\n */\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.WebGLShader\n     * @category Graphics\n     * @kind Method\n     * \n     * @sign public Qrafty.WebGLShader Qrafty.WebGLShader(String vertexShaderCode, String fragmentShaderCode, Array attributeList, Function drawCallback(e, entity))\n     * @param vertexShaderCode - GLSL code for the vertex shader\n     * @param fragmentShaderCode - GLSL code for the fragment shader\n     * @param attributeList - List of variable names with their vertex length\n     * @param drawCallback - Function that pushes all attribute values to WebGL.\n     *\n     * Assigns or fetches a default shader for a component.\n     *\n     * This allows the default shader for a component to be overridden, and therefor allows\n     * developers to override the default shader behaviour with more complex shaders.\n     *\n     * @example\n     * Let's say we want to extend sprite to draw the images in grayscale when we\n     * set a `grayscale: true` attribute.\n     * ~~~\n     * var recoloredSprite = new Qrafty.WebGLShader(\n     *   // The vertex shader\n     *   \"attribute vec2 aPosition;\\n\" +\n     *   \"attribute vec3 aOrientation;\\n\" +\n     *   \"attribute vec2 aLayer;\\n\" +\n     *   \"attribute vec2 aTextureCoord;\\n\" +\n     *   \"attribute vec2 aGrayscale;\\n\" + // Addition of our grayscale\n     *   \"varying mediump vec3 vTextureCoord;\\n\" +\n     *   \"varying mediump vec2 vGrayscale;\\n\" + // passing attribute to fragment shader\n     *   \"uniform vec4 uViewport;\\n\" +\n     *   \"uniform mediump vec2 uTextureDimensions;\\n\" +\n     *   \"mat4 viewportScale = mat4(2.0 / uViewport.z, 0, 0, 0,    0, -2.0 / uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);\\n\" +\n     *   \"vec4 viewportTranslation = vec4(uViewport.xy, 0, 0);\\n\" +\n     *   \"void main() {\\n\" +\n     *   \"  vec2 pos = aPosition;\\n\" +\n     *   \"  vec2 entityOrigin = aOrientation.xy;\\n\" +\n     *   \"  mat2 entityRotationMatrix = mat2(cos(aOrientation.z), sin(aOrientation.z), -sin(aOrientation.z), cos(aOrientation.z));\\n\" +\n     *   \"  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin ;\\n\" +\n     *   \"  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0/(1.0+exp(aLayer.x) ), 1) );\\n\" +\n     *   \"  vTextureCoord = vec3(aTextureCoord, aLayer.y);\\n\" +\n     *   \"  vGrayscale = aGrayscale;\\n\" + // Assigning the grayscale for fragment shader\n     *   \"}\",\n     *   // The fragment shader\n     *   \"precision mediump float;\\n\" +\n     *   \"varying mediump vec3 vTextureCoord;\\n\" +\n     *   \"varying mediump vec2 vGrayscale;\\n\" +\n     *   \"uniform sampler2D uSampler;\\n \" +\n     *   \"uniform mediump vec2 uTextureDimensions;\\n\" +\n     *   \"void main() {\\n\" +\n     *   \"  highp vec2 coord =   vTextureCoord.xy / uTextureDimensions;\\n\" +\n     *   \"  mediump vec4 base_color = texture2D(uSampler, coord);\\n\" +\n     *   \"  if (vGrayscale.x == 1.0) {\\n\" +\n     *   \"    mediump float lightness = (0.2126*base_color.r + 0.7152*base_color.g + 0.0722*base_color.b);\\n\" +\n     *   \"    lightness *= base_color.a * vTextureCoord.z; // Premultiply alpha\\n\" +\n     *   \"    gl_FragColor = vec4(lightness, lightness, lightness, base_color.a*vTextureCoord.z);\\n\" +\n     *   \"  } else {\\n\" +\n     *   \"    gl_FragColor = vec4(base_color.rgb*base_color.a*vTextureCoord.z, base_color.a*vTextureCoord.z);\\n\" +\n     *   \"  }\\n\" +\n     *   \"}\",\n     *   [\n     *     { name: \"aPosition\",     width: 2 },\n     *     { name: \"aOrientation\",  width: 3 },\n     *     { name: \"aLayer\",        width: 2 },\n     *     { name: \"aTextureCoord\", width: 2 },\n     *     { name: \"aGrayscale\",    width: 2 }\n     *   ],\n     *   function(e, entity) {\n     *     var co = e.co;\n     *     // Write texture coordinates\n     *     e.program.writeVector(\"aTextureCoord\",\n     *       co.x, co.y,\n     *       co.x, co.y + co.h,\n     *       co.x + co.w, co.y,\n     *       co.x + co.w, co.y + co.h\n     *     );\n     *     // Write our grayscale attribute\n     *     e.program.writeVector(\"aGrayscale\",\n     *       entity.grayscale ? 1.0 : 0.0,\n     *       0.0\n     *     );\n     *   }\n     * );\n     * ~~~\n     *\n     * It seems like a lot of work, but most of the above code is the default Qrafty shader code.\n     * When you get the hang of it, it is really easy to extend for your own effects. And remember\n     * you only need to write it once, and suddenly all sprite entities have extra effects available.\n     *\n     * @see Qrafty.defaultShader\n     * @see Sprite\n     * @see Image\n     * @see Color\n     * @see WebGL\n     */\n\tWebGLShader: function(vertexCode, fragmentCode, attributeList, drawCallback){\n\t\tthis.vertexCode = vertexCode;\n\t\tthis.fragmentCode = fragmentCode;\n\t\tthis.attributeList = attributeList;\n\t\tthis.drawCallback = drawCallback;\n\t},\n\t/**@\n     * #Qrafty.defaultShader\n     * @category Graphics\n     * @kind Method\n     * \n     * @sign public Qrafty.WebGLShader Qrafty.defaultShader(String component[, Qrafty.WebGLShader shader])\n     * @param component - Name of the component to assign a default shader to\n     * @param shader - New default shader to assign to a component\n     *\n     * Assigns or fetches a default shader for a component.\n     *\n     * This allows the default shader for a component to be overridden, and therefor allows\n     * developers to override the default shader behaviour with more complex shaders.\n     *\n     * @example\n     * Let's say we want to set the grayscale enabled shader from the example of the WebGLShader\n     * as default for sprites:\n     * ~~~\n     * Qrafty.defaultShader(\"Sprite\", recoloredSprite);\n     * ~~~\n     *\n     * @see Qrafty.WebGLShader\n     * @see Sprite\n     * @see Image\n     * @see Color\n     * @see WebGL\n     */\n\tdefaultShader: function(component, shader) {\n\t\tthis._defaultShaders = (this._defaultShaders || {});\n\t\tif (arguments.length === 1 ){\n\t\t\treturn this._defaultShaders[component];\n\t\t}\n\t\tthis._defaultShaders[component] = shader;\n\t},\n\n});\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"WebGL\", {\n\t/**@\n     * #.context\n     * @comp WebGL\n     * @kind Property\n     *\n     * The webgl context this entity will be rendered to.\n     */\n\tinit: async function () {\n\t\tawait this.requires(\"Renderable\");\n\t\t// Attach to webgl layer\n\t\tif (!this._customLayer){\n\t\t\tthis._attachToLayer( _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"DefaultWebGLLayer\") );\n\t\t}\n\t},\n \n\tremove: function(){\n\t\tthis._detachFromLayer();\n\t},\n\n\t// Cache the various objects and arrays used in draw\n\tdrawVars: {\n\t\ttype: \"webgl\",\n\t\tpos: {},\n\t\tctx: null,\n\t\tcoord: [0, 0, 0, 0],\n\t\tco: {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tw: 0,\n\t\t\th: 0\n\t\t}\n\t},\n\n\t/**@\n     * #.draw\n     * @comp WebGL\n     * @kind Method\n     * @private\n     * \n     * @sign public this .draw()\n     *\n     * An internal method to draw the entity on the webgl canvas element. Rather then rendering directly, it writes relevent information into a buffer to allow batch rendering.\n     */\n\tdraw: function () {\n\n\t\tif (!this.ready) return;\n\n\t\tvar pos = this.drawVars.pos;\n\t\tpos._x = this._x;\n\t\tpos._y = this._y;\n\t\tpos._w = this._w;\n\t\tpos._h = this._h;\n\n\t\tvar coord = this.__coord || [0, 0, 0, 0];\n\t\tvar co = this.drawVars.co;\n\t\tco.x = coord[0];\n\t\tco.y = coord[1];\n\t\tco.w = coord[2];\n\t\tco.h = coord[3];\n\n\t\t// Handle flipX, flipY\n\t\t// (Just swap the positions of e.g. x and x+w)\n\t\tif (this._flipX ) {\n\t\t\tco.x = co.x + co.w;\n\t\t\tco.w = - co.w;\n\t\t}\n\t\tif (this._flipY ) {\n\t\t\tco.y = co.y + co.h;\n\t\t\tco.h = - co.h;\n\t\t}\n\n\t\t//Draw entity\n\t\tvar gl = this._drawContext;\n\t\tthis.drawVars.gl = gl;\n\t\tvar prog = this.drawVars.program = this.program;\n\n\t\t// The program might need to refer to the current element's index\n\t\tprog.setCurrentEntity(this);\n\n\t\t// Write position; x, y, w, h\n\t\tprog.writeVector(\"aPosition\",\n\t\t\tthis._x, this._y,\n\t\t\tthis._x , this._y + this._h,\n\t\t\tthis._x + this._w, this._y,\n\t\t\tthis._x + this._w, this._y + this._h\n\t\t);\n\n\t\t// Write orientation\n\t\tprog.writeVector(\"aOrientation\",\n\t\t\tthis._origin.x + this._x,\n\t\t\tthis._origin.y + this._y,\n\t\t\tthis._rotation * Math.PI / 180\n\t\t);\n\n\t\t// Write z, alpha\n\t\tprog.writeVector(\"aLayer\",\n\t\t\tthis._globalZ,\n\t\t\tthis._alpha\n\t\t);\n\n\t\t// This should only need to handle *specific* attributes!\n\t\tthis.trigger(\"Draw\", this.drawVars);\n\n\t\t// Register the vertex groups to be drawn, referring to this entities position in the big buffer\n\t\tprog.addIndices(prog.ent_offset);\n\n\t\treturn this;\n\t},\n\n\t// v_src is optional, there's a default vertex shader that works for regular rectangular entities\n\t_establishShader: function(compName, shader){\n\t\tthis.program = this._drawLayer.getProgramWrapper(compName, shader);\n\n\t\t// Needs to know where in the big array we are!\n\t\tthis.program.registerEntity(this);\n\t\t// Shader program means ready\n\t\tthis.ready = true;\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/graphics/webgl.js?");

/***/ }),

/***/ "./src/inputs/device.js":
/*!******************************!*\
  !*** ./src/inputs/device.js ***!
  \******************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.device\n     * @category Misc\n     * @kind Property\n     *\n     * Methods relating to devices such as tablets or phones\n     */\n\tdevice: {\n\t\t_deviceOrientationCallback: false,\n\t\t_deviceMotionCallback: false,\n\n\t\t/**\n         * The HTML5 DeviceOrientation event returns three pieces of data:\n         *  * alpha the direction the device is facing according to the compass\n         *  * beta the angle in degrees the device is tilted front-to-back\n         *  * gamma the angle in degrees the device is tilted left-to-right.\n         *  * The angles values increase as you tilt the device to the right or towards you.\n         *\n         * Since Firefox uses the MozOrientationEvent which returns similar data but\n         * using different parameters and a different measurement system, we want to\n         * normalize that before we pass it to our _deviceOrientationCallback function.\n         *\n         * @param eventData HTML5 DeviceOrientation event\n         */\n\t\t_normalizeDeviceOrientation: function (eventData) {\n\t\t\tvar data;\n\t\t\tif (window.DeviceOrientationEvent) {\n\t\t\t\tdata = {\n\t\t\t\t\t// gamma is the left-to-right tilt in degrees, where right is positive\n\t\t\t\t\t\"tiltLR\": eventData.gamma,\n\t\t\t\t\t// beta is the front-to-back tilt in degrees, where front is positive\n\t\t\t\t\t\"tiltFB\": eventData.beta,\n\t\t\t\t\t// alpha is the compass direction the device is facing in degrees\n\t\t\t\t\t\"dir\": eventData.alpha,\n\t\t\t\t\t// deviceorientation does not provide this data\n\t\t\t\t\t\"motUD\": null\n\t\t\t\t};\n\t\t\t} else if (window.OrientationEvent) {\n\t\t\t\tdata = {\n\t\t\t\t\t// x is the left-to-right tilt from -1 to +1, so we need to convert to degrees\n\t\t\t\t\t\"tiltLR\": eventData.x * 90,\n\t\t\t\t\t// y is the front-to-back tilt from -1 to +1, so we need to convert to degrees\n\t\t\t\t\t// We also need to invert the value so tilting the device towards us (forward)\n\t\t\t\t\t// results in a positive value.\n\t\t\t\t\t\"tiltFB\": eventData.y * -90,\n\t\t\t\t\t// MozOrientation does not provide this data\n\t\t\t\t\t\"dir\": null,\n\t\t\t\t\t// z is the vertical acceleration of the device\n\t\t\t\t\t\"motUD\": eventData.z\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.device._deviceOrientationCallback(data);\n\t\t},\n\n\t\t/**\n         * @param eventData HTML5 DeviceMotion event\n         */\n\t\t_normalizeDeviceMotion: function (eventData) {\n\t\t\tvar acceleration = eventData.accelerationIncludingGravity,\n\t\t\t\tfacingUp = (acceleration.z > 0) ? +1 : -1;\n\n\t\t\tvar data = {\n\t\t\t\t// Grab the acceleration including gravity from the results\n\t\t\t\t\"acceleration\": acceleration,\n\t\t\t\t\"rawAcceleration\": \"[\" + Math.round(acceleration.x) + \", \" + Math.round(acceleration.y) + \", \" + Math.round(acceleration.z) + \"]\",\n\t\t\t\t// Z is the acceleration in the Z axis, and if the device is facing up or down\n\t\t\t\t\"facingUp\": facingUp,\n\t\t\t\t// Convert the value from acceleration to degrees acceleration.x|y is the\n\t\t\t\t// acceleration according to gravity, we'll assume we're on Earth and divide\n\t\t\t\t// by 9.81 (earth gravity) to get a percentage value, and then multiply that\n\t\t\t\t// by 90 to convert to degrees.\n\t\t\t\t\"tiltLR\": Math.round(((acceleration.x) / 9.81) * -90),\n\t\t\t\t\"tiltFB\": Math.round(((acceleration.y + 9.81) / 9.81) * 90 * facingUp)\n\t\t\t};\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.device._deviceMotionCallback(data);\n\t\t},\n\n\t\t/**@\n         * #Qrafty.device.deviceOrientation\n         * @comp Qrafty.device\n         * @kind Method\n         * \n         * @sign public Qrafty.device.deviceOrientation(Function callback)\n         * @param callback - Callback method executed once as soon as device orientation is change\n         *\n         * Do something with normalized device orientation data:\n         * ~~~\n         * {\n         *   tiltLR    :   'gamma -- the angle in degrees the device is tilted left-to-right.',\n         *   tiltFB    :   'beta -- the angle in degrees the device is tilted front-to-back',\n         *   dir       :   'alpha -- the direction the device is facing according to the compass',\n         *   motUD     :   'The angle's values increase as you tilt the device to the right or towards you.'\n         * }\n         * ~~~\n         *\n         * @example\n         * ~~~\n         * // Get DeviceOrientation event normalized data.\n         * Qrafty.device.deviceOrientation(function(data){\n         *     Qrafty.log('data.tiltLR : '+Math.round(data.tiltLR)+', data.tiltFB : '+Math.round(data.tiltFB)+', data.dir : '+Math.round(data.dir)+', data.motUD : '+data.motUD+'');\n         * });\n         * ~~~\n         *\n         * See browser support at http://caniuse.com/#search=device orientation.\n         */\n\t\tdeviceOrientation: function (func) {\n\t\t\tthis._deviceOrientationCallback = func;\n\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.deviceorientation) {\n\t\t\t\tif (window.DeviceOrientationEvent) {\n\t\t\t\t\t// Listen for the deviceorientation event and handle DeviceOrientationEvent object\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, window, \"deviceorientation\", this._normalizeDeviceOrientation);\n\t\t\t\t} else if (window.OrientationEvent) {\n\t\t\t\t\t// Listen for the MozOrientation event and handle OrientationData object\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, window, \"MozOrientation\", this._normalizeDeviceOrientation);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**@\n         * #Qrafty.device.deviceMotion\n         * @comp Qrafty.device\n         * @kind Method\n         * \n         * @sign public Qrafty.device.deviceMotion(Function callback)\n         * @param callback - Callback method executed once as soon as device motion is change\n         *\n         * Do something with normalized device motion data:\n         * ~~~\n         * {\n         *     acceleration : 'Grab the acceleration including gravity from the results',\n         *     rawAcceleration : 'Display the raw acceleration data',\n         *     facingUp : 'Z is the acceleration in the Z axis, and if the device is facing up or down',\n         *     tiltLR : 'Convert the value from acceleration to degrees. acceleration.x is the acceleration according to gravity, we'll assume we're on Earth and divide by 9.81 (earth gravity) to get a percentage value, and then multiply that by 90 to convert to degrees.',\n         *     tiltFB : 'Convert the value from acceleration to degrees.'\n         * }\n         * ~~~\n         *\n         * @example\n         * ~~~\n         * // Get DeviceMotion event normalized data.\n         * Qrafty.device.deviceMotion(function(data){\n         *     Qrafty.log('data.moAccel : '+data.rawAcceleration+', data.moCalcTiltLR : '+Math.round(data.tiltLR)+', data.moCalcTiltFB : '+Math.round(data.tiltFB)+'');\n         * });\n         * ~~~\n         *\n         * See browser support at http://caniuse.com/#search=motion.\n         */\n\t\tdeviceMotion: function (func) {\n\t\t\tthis._deviceMotionCallback = func;\n\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.devicemotion) {\n\t\t\t\tif (window.DeviceMotionEvent) {\n\t\t\t\t\t// Listen for the devicemotion event and handle DeviceMotionEvent object\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, window, \"devicemotion\", this._normalizeDeviceMotion);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/inputs/device.js?");

/***/ }),

/***/ "./src/inputs/dom-events.js":
/*!**********************************!*\
  !*** ./src/inputs/dom-events.js ***!
  \**********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t_events: {},\n\n\t/**@\n     * #Qrafty.addEvent\n     * @category Events, Misc\n     * @kind Method\n     *\n     * @sign public this Qrafty.addEvent(Object ctx, HTMLElement obj, String event, Function callback)\n     * @param ctx - Context of the callback or the value of `this`\n     * @param obj - Element to add the DOM event to\n     * @param event - Event name to bind to\n     * @param callback - Method to execute when triggered\n     *\n     * Adds DOM level 3 events to elements. The arguments it accepts are the call\n     * context (the value of `this`), the DOM element to attach the event to,\n     * the event name (without `on` (`click` rather than `onclick`)) and\n     * finally the callback method.\n     *\n     * If no element is passed, the default element will be `window.document`.\n     *\n     * Callbacks are passed with event data.\n     *\n     * @note This is related to DOM events only,  not Qrafty's own event system.\n     * Of course, you can trigger Qrafty events in the callback function!\n     *\n     * @example\n     * Normally you'd use Qrafty's built-in mouse component, but for the sake of an example let's pretend that doesn't exist.\n     * The following code will add a stage-wide MouseDown event listener to the player, and log both which button was pressed\n     * and the (x,y) coordinates in viewport/world/game space.\n     * ~~~\n     * var player = Qrafty.e(\"2D\");\n     *     player.onMouseDown = function(e) {\n     *         Qrafty.log(e.mouseButton, e.realX, e.realY);\n     *     };\n     * Qrafty.addEvent(player, Qrafty.stage.elem, \"mousedown\", player.onMouseDown);\n     * ~~~\n     * @see Qrafty.removeEvent\n     */\n\taddEvent: function (ctx, obj, type, callback) {\n\t\tif (arguments.length === 3) {\n\t\t\tcallback = type;\n\t\t\ttype = obj;\n\t\t\tobj = window.document;\n\t\t}\n\n\t\t//save anonymous function to be able to remove\n\t\tvar id = ctx[0] || \"\",\n\t\t\tafn = function (e) {\n\t\t\t\tcallback.call(ctx, e);\n\t\t\t};\n\n\t\tif (!this._events[id + obj + type + callback])\n\t\t\tthis._events[id + obj + type + callback] = afn;\n\t\telse  {\n\t\t\treturn;\n\t\t}\n\n\t\tobj.addEventListener(type, afn, false);\n\n\t},\n\n\t/**@\n     * #Qrafty.removeEvent\n     * @category Events, Misc\n     * @kind Method\n     *\n     * @sign public this Qrafty.removeEvent(Object ctx, HTMLElement obj, String event, Function callback)\n     * @param ctx - Context of the callback or the value of `this`\n     * @param obj - Element the event is on\n     * @param event - Name of the event\n     * @param callback - Method executed when triggered\n     *\n     * Removes events attached by `Qrafty.addEvent()`. All parameters must\n     * be the same that were used to attach the event including a reference\n     * to the callback method.\n     *\n     * @see Qrafty.addEvent\n     */\n\tremoveEvent: function (ctx, obj, type, callback) {\n\t\tif (arguments.length === 3) {\n\t\t\tcallback = type;\n\t\t\ttype = obj;\n\t\t\tobj = window.document;\n\t\t}\n\n\t\t//retrieve anonymous function\n\t\tvar id = ctx[0] || \"\",\n\t\t\tafn = this._events[id + obj + type + callback];\n\n\t\tif (afn) {\n\t\t\tobj.removeEventListener(type, afn, false);\n\t\t\tdelete this._events[id + obj + type + callback];\n\t\t}\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/inputs/dom-events.js?");

/***/ }),

/***/ "./src/inputs/keyboard.js":
/*!********************************!*\
  !*** ./src/inputs/keyboard.js ***!
  \********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #KeyboardSystem\n * @category Input\n * @kind System\n *\n * Provides access to key events.\n * @note Events and methods are inherited from the `KeyboardState` component.\n *\n * The event callbacks are triggered with a native [`KeyboardEvent`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent)\n * received by `window.document`, which is wrapped in a standard Qrafty event object (as described in `KeyboardState`).\n *\n * These key events are triggered globally, thus on the global Qrafty instance, every entity and system.\n *\n * @example\n * Move viewport by arrow keys.\n * ~~~\n * Qrafty.bind('KeyDown', function(e) {\n *     if (e.key === Qrafty.keys.LEFT_ARROW) {\n *         Qrafty.viewport.x++;\n *     } else if (e.key === Qrafty.keys.RIGHT_ARROW) {\n *         Qrafty.viewport.x--;\n *     } else if (e.key === Qrafty.keys.UP_ARROW) {\n *         Qrafty.viewport.y++;\n *     } else if (e.key === Qrafty.keys.DOWN_ARROW) {\n *         Qrafty.viewport.y--;\n *     }\n * });\n * ~~~\n * @see KeyboardState, Keyboard\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call(new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__eventDispatcher(), {\n\t_evt: { // evt object to reuse\n\t\teventName:\"\",\n\t\tkey: 0,\n\t\twhich: 0,\n\t\toriginalEvent: null\n\t},\n\n\tprepareEvent: function (e) {\n\t\tvar evt = this._evt;\n\n\t\t// Normalize event name\n\t\tvar type = e.type;\n\t\tevt.eventName = type === \"keydown\" ? \"KeyDown\" :\n\t\t\ttype === \"keyup\" ? \"KeyUp\" : type;\n\n\t\t// Normalize key to avoid cross-browser issues\n\t\tevt.which = e.charCode !== null ? e.charCode : e.keyCode;\n\t\tevt.key = e.keyCode || e.which;\n\n\t\t// wrap original event into standard Qrafty event object\n\t\t// as original key event's properties are read-only\n\t\tevt.originalEvent = e;\n\n\t\treturn evt;\n\t},\n\n\t// this method will be called by KeyboardState iff triggerKey event was valid\n\ttriggerKeyEvent: function (eventName, e) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(eventName, e);\n\t},\n\n\tdispatchEvent: function (e) {\n\t\tvar evt = this.prepareEvent(e);\n\t\tthis.triggerKey(evt.eventName, evt);\n\t}\n}), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__keyboardStateTemplate), {}, false);\n\n\n/**@\n * #Keyboard\n * @category Input\n * @kind Component\n *\n * Provides the entity with keyboard events.\n * Keyboard events get dispatched to all entities that have the Keyboard component.\n * @note If you do not add this component, key events will not be triggered on the entity.\n *\n * Triggers all events described in the `KeyboardState` component, these are:\n * @trigger KeyDown - when a key is pressed - KeyboardEvent\n * @trigger KeyUp - when a key is released - KeyboardEvent\n *\n * @example\n * ~~~\n * Qrafty.e(\"2D, DOM, Color, Keyboard\")\n *   .attr({x: 100, y: 100, w: 50, h: 50})\n *   .color(\"red\")\n *   .bind('KeyDown', function(e) {\n *     if (e.key == Qrafty.keys.LEFT_ARROW) {\n *       this.x -= 1;\n *     } else if (e.key == Qrafty.keys.RIGHT_ARROW) {\n *       this.x += 1;\n *     } else if (e.key == Qrafty.keys.UP_ARROW) {\n *       this.y -= 1;\n *     } else if (e.key == Qrafty.keys.DOWN_ARROW) {\n *       this.y += 1;\n *     }\n *   });\n * ~~~\n *\n * @see KeyboardState, KeyboardSystem\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Keyboard\", {\n\t// DEPRECATED: remove in an upcoming release\n\tisDown: function(key) {\n\t\treturn _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\").isKeyDown(key);\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/inputs/keyboard.js?");

/***/ }),

/***/ "./src/inputs/lifecycle.js":
/*!*********************************!*\
  !*** ./src/inputs/lifecycle.js ***!
  \*********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\nconst document = window.document;\n\n// figure out which eventName to listen to for mousewheel events\nvar mouseWheelEvent = typeof document.onwheel !== \"undefined\" ? \"wheel\" : // modern browsers\n\ttypeof document.onmousewheel !== \"undefined\" ? \"mousewheel\" : // old Webkit and IE\n\t\t\"DOMMouseScroll\"; // old Firefox\n\n//initialize the input events onload\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default._preBind(\"Load\", function () {\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, document.body, \"mouseup\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.detectBlur);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\"), window, \"blur\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\").resetKeyDown);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\"), window, \"mouseup\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").resetButtonDown);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\"), window, \"touchend\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\").resetTouchPoints);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\"), window, \"touchcancel\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\").resetTouchPoints);\n\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\"), \"keydown\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\").processEvent);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\"), \"keyup\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\").processEvent);\n\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\"), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"mousedown\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").processEvent);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\"), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"mouseup\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").processEvent);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\"), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"mousemove\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").processEvent);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\"), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"click\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").processEvent);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\"), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"dblclick\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").processEvent);\n\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"touchstart\", this._touchDispatch);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"touchmove\", this._touchDispatch);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"touchend\", this._touchDispatch);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"touchcancel\", this._touchDispatch);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(this, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"touchleave\", this._touchDispatch);\n\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.addEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"MouseWheel\"), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, mouseWheelEvent, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"MouseWheel\").processEvent);\n});\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.bind(\"Pause\", function () {\n\t// Reset pressed keys and buttons\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\").resetKeyDown();\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").resetButtonDown();\n});\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default._preBind(\"QraftyStop\", function () {\n\t// Reset pressed keys and buttons\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\").resetKeyDown();\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").resetButtonDown();\n});\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default._preBind(\"QraftyStop\", function () {\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(this, document.body, \"mouseup\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.detectBlur);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\"), window, \"blur\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\").resetKeyDown);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\"), window, \"mouseup\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").resetButtonDown);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\"), window, \"touchend\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\").resetTouchPoints);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\"), window, \"touchcancel\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\").resetTouchPoints);\n\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\"), \"keydown\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\").processEvent);\n\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\"), \"keyup\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Keyboard\").processEvent);\n\n\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\"), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"mousedown\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").processEvent);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\"), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"mouseup\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").processEvent);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\"), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"mousemove\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").processEvent);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\"), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"click\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").processEvent);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\"), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"dblclick\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").processEvent);\n\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(this, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"touchstart\", this._touchDispatch);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(this, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"touchmove\", this._touchDispatch);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(this, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"touchend\", this._touchDispatch);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(this, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"touchcancel\", this._touchDispatch);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(this, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, \"touchleave\", this._touchDispatch);\n\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.removeEvent(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"MouseWheel\"), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem, mouseWheelEvent, _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"MouseWheel\").processEvent);\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/inputs/lifecycle.js?");

/***/ }),

/***/ "./src/inputs/mouse.js":
/*!*****************************!*\
  !*** ./src/inputs/mouse.js ***!
  \*****************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #MouseWheel\n * @category Input\n * @kind System\n *\n * System which dispatches mouse wheel events received by Qrafty.\n * @trigger MouseWheelScroll - when mouse is scrolled - MouseWheelEvent\n *\n * The event callback is triggered with a native [`wheel` event](https://developer.mozilla.org/en-US/docs/Web/Events/wheel) (all newer browsers),\n * a native [`mousewheel` event](https://developer.mozilla.org/en-US/docs/Web/Events/mousewheel) (old IE and WebKit browsers) or\n * a native [`DOMMouseScroll` event](https://developer.mozilla.org/en-US/docs/Web/Events/DOMMouseScroll) (old Firefox browsers)\n * received by Qrafty's stage (`Qrafty.stage.elem`), which is wrapped in a standard Qrafty event object (see below).\n *\n * These MouseWheel events are triggered on the global Qrafty object and thus on every entity and system.\n *\n * The standard `MouseWheelEvent` object:\n * ~~~\n * // event name of mouse wheel event - \"MouseWheelScroll\"\n * e.eventName\n *\n * // the direction the wheel was scrolled, +1 if wheel was scrolled up, -1 if wheel was scrolled down\n * e.direction\n *\n * // the closest (visible & Mouse-enhanced) entity to the source of the event (if available), otherwise null\n * e.target\n *\n * // (x,y) coordinates of mouse event in world (default viewport) space\n * e.realX\n * e.realY\n *\n * // Original mouse wheel event, containing additional native properties\n * e.originalEvent\n * ~~~\n *\n * @example\n * Zoom the viewport (camera) in response to mouse scroll events.\n * ~~~\n * Qrafty.bind(\"MouseWheelScroll\", function(evt) {\n *     Qrafty.viewport.scale(Qrafty.viewport._scale * (1 + evt.direction * 0.1));\n * });\n * ~~~\n *\n * For more details see [mdn article on wheel events](https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Listening_to_this_event_across_browser).\n * @note The wheel delta properties of the event vary in magnitude across browsers, thus it is recommended to check for `.direction` instead.\n * The `.direction` equals `+1` if wheel was scrolled up, `-1` if wheel was scrolled down\n * (see [details](http://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers)).\n *\n * @example\n * Interactive, map-like zooming of the viewport (camera) in response to mouse scroll events.\n * ~~~\n * // sign public void zoomTowards(Number amt, Number posX, Number posY, Number time[, String|function easingFn])\n * // param Number amt - amount to zoom in on the target by (eg. `2`, `4`, `0.5`)\n * // param Number posX - the x coordinate to zoom towards\n * // param Number posY - the y coordinate to zoom towards\n * // param Number time - the duration in ms of the entire zoom operation\n * // param easingFn - A string or custom function specifying an easing.\n * //                   (Defaults to linear behavior.)\n * //                   See `Qrafty.easing` for more information.\n * //\n * // Zooms the camera towards a given point, preserving the current center.\n * // `amt > 1` will bring the camera closer to the subject,\n * // `amt < 1` will bring it farther away,\n * // `amt = 0` will reset to the default zoom level.\n * // Zooming is multiplicative. To reset the zoom amount, pass `0`.\n * //\n * // <example>\n * // // Make the entities appear twice as large by zooming in towards (100,100) over the duration of 3 seconds using linear easing behavior\n * // zoomTowards(2, 100, 100, 3000);\n * // </example>\n * //\n * function zoomTowards (amt, posX, posY, time, easingFn) {\n *     var scale = Qrafty.viewport._scale,\n *         // current viewport center\n *         centX = -Qrafty.viewport._x + Qrafty.viewport._width / 2 / scale,\n *         centY = -Qrafty.viewport._y + Qrafty.viewport._height / 2 / scale,\n *         // direction vector from viewport center to position\n *         deltaX = posX - centX,\n *         deltaY = posY - centY;\n *     var f = amt - 1;\n *\n *     Qrafty.viewport.zoom(amt, centX + deltaX * f, centY + deltaY * f, time, easingFn);\n * }\n *\n * // don't restrict panning of viewport in any way\n * Qrafty.viewport.clampToEntities = false;\n *\n * // enable panning of viewport by dragging the mouse\n * Qrafty.viewport.mouselook(true);\n *\n * // enable interactive map-like zooming by scrolling the mouse\n * Qrafty.bind(\"MouseWheelScroll\", function (evt) {\n *     zoomTowards(1 + evt.direction/10, evt.realX, evt.realY, 5);\n * });\n * ~~~\n */\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"MouseWheel\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call(new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__eventDispatcher(), {\n\t_evt: { // evt object to reuse\n\t\teventName:\"\",\n\t\tdirection: 0,\n\t\ttarget: null,\n\t\tclientX: 0, // DEPRECATED: remove in upcoming release\n\t\tclientY: 0, // DEPRECATED: remove in upcoming release\n\t\trealX: 0,\n\t\trealY: 0,\n\t\toriginalEvent: null\n\t},\n\t_mouseSystem: null,\n\n\tprepareEvent: function (e) {\n\t\tvar mouseSystem = this._mouseSystem;\n\t\tif (!mouseSystem) this._mouseSystem = mouseSystem = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\");\n\n\t\tvar evt = this._evt;\n\n\t\t// normalize eventName\n\t\tevt.eventName = \"MouseWheelScroll\";\n\n\t\t// normalize direction\n\t\tevt.direction = (e.detail < 0 || e.wheelDelta > 0 || e.deltaY < 0) ? 1 : -1;\n\n\t\t// copy screen coordinates\n\t\t// only browsers supporting `wheel` event contain mouse coordinates\n\t\t// DEPRECATED: remove in upcoming release\n\t\tevt.clientX = e.clientX !== undefined ? e.clientX : mouseSystem.lastMouseEvent.clientX;\n\t\tevt.clientY = e.clientY !== undefined ? e.clientY : mouseSystem.lastMouseEvent.clientY;\n\n\t\t// augment mouse event with real coordinates\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.translatePointerEventCoordinates(e, evt);\n\n\t\t// augment mouse event with target entity\n\t\tevt.target = mouseSystem.mouseObjs ? _core_core__WEBPACK_IMPORTED_MODULE_0__.default.findPointerEventTargetByComponent(\"Mouse\", e) : null;\n\n\t\t// wrap original event into standard Qrafty event object\n\t\tevt.originalEvent = e;\n\n\t\treturn evt;\n\t},\n\n\tdispatchEvent: function (e) {\n\t\tvar evt = this.prepareEvent(e);\n\t\t// trigger event\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"MouseWheelScroll\", evt);\n\t}\n}), {}, false);\n\n\n/**@\n * #MouseSystem\n * @category Input\n * @kind System\n *\n * Provides access to mouse events.\n * @note Additional events and methods are inherited from the `MouseState` component.\n *\n * @trigger MouseOver - when the mouse enters an entity - MouseEvent\n * @trigger MouseOut - when the mouse leaves an entity - MouseEvent\n * @trigger Click - when the user clicks - MouseEvent\n * @trigger DoubleClick - when the user double clicks - MouseEvent\n *\n * The event callbacks are triggered with a native [`MouseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent)\n * received by Qrafty's stage (`Qrafty.stage.elem`), which is wrapped in a standard Qrafty event object (as described in `MouseState`).\n *\n * These mouse events are triggered on the MouseSystem itself.\n * Additionally, they are dispatched to the closest (visible & `Mouse`-enhanced) entity to the source of the event (if available).\n *\n * @note If you're targeting mobile, you should know that by default Qrafty turns touch events into mouse events,\n * making mouse dependent components work with touch. However, if you need multitouch, you'll have\n * to make use of the Touch component instead, which can break compatibility with things which directly interact with the Mouse component.\n *\n * @example\n * Log the current position of the mouse.\n * ~~~\n * Qrafty.s('Mouse').bind('MouseMove', function(e) {\n *     Qrafty.log('Mouse pos: <' + e.realX.toFixed(2) + ', ' + e.realY.toFixed(2) + '>');\n * });\n * ~~~\n *\n * @see MouseState, Mouse\n * @see Qrafty.multitouch\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call(new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__eventDispatcher(), {\n\tnormedEventNames: {\n\t\t\"mousedown\": \"MouseDown\",\n\t\t\"mouseup\": \"MouseUp\",\n\t\t\"dblclick\": \"DoubleClick\",\n\t\t\"click\": \"Click\",\n\t\t\"mousemove\": \"MouseMove\"\n\t},\n\n\t_evt: { // evt object to reuse\n\t\teventName:\"\",\n\t\tmouseButton: -1,\n\t\ttarget: null,\n\t\tclientX: 0, // DEPRECATED: remove in upcoming release\n\t\tclientY: 0, // DEPRECATED: remove in upcoming release\n\t\trealX: 0,\n\t\trealY: 0,\n\t\toriginalEvent: null\n\t},\n\n\t// Indicates how many entities have the Mouse component, for performance optimization\n\t// Mouse events are still routed to Qrafty.s('Mouse') even if there are no entities with Mouse component\n\tmouseObjs: 0,\n\n\t// current entity that is moused over\n\tover: null,\n\n\tprepareEvent: function (e) {\n\t\tvar evt = this._evt;\n\n\t\t// Normalize event name\n\t\tvar type = e.type;\n\t\tevt.eventName = this.normedEventNames[type] || type;\n\n\t\t// Normalize button according to http://unixpapa.com/js/mouse.html\n\t\tif (typeof e.which === \"undefined\") {\n\t\t\tevt.mouseButton = (e.button < 2) ? _core_core__WEBPACK_IMPORTED_MODULE_0__.default.mouseButtons.LEFT : ((e.button === 4) ? _core_core__WEBPACK_IMPORTED_MODULE_0__.default.mouseButtons.MIDDLE : _core_core__WEBPACK_IMPORTED_MODULE_0__.default.mouseButtons.RIGHT);\n\t\t} else {\n\t\t\tevt.mouseButton = (e.which < 2) ? _core_core__WEBPACK_IMPORTED_MODULE_0__.default.mouseButtons.LEFT : ((e.which === 2) ? _core_core__WEBPACK_IMPORTED_MODULE_0__.default.mouseButtons.MIDDLE : _core_core__WEBPACK_IMPORTED_MODULE_0__.default.mouseButtons.RIGHT);\n\t\t}\n\n\t\t// copy screen coordinates\n\t\t// DEPRECATED: remove in upcoming release\n\t\tevt.clientX = e.clientX;\n\t\tevt.clientY = e.clientY;\n\n\t\t// augment mouse event with real coordinates\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.translatePointerEventCoordinates(e, evt);\n\n\t\t// augment mouse event with target entity\n\t\tevt.target = this.mouseObjs ? _core_core__WEBPACK_IMPORTED_MODULE_0__.default.findPointerEventTargetByComponent(\"Mouse\", e) : null;\n\n\t\t// wrap original event into standard Qrafty event object\n\t\tevt.originalEvent = e;\n\n\t\treturn evt;\n\t},\n\n\t// this method will be called by MouseState iff triggerMouse event was valid\n\ttriggerMouseEvent: function (eventName, e) {\n\t\t// trigger event on MouseSystem itself\n\t\tthis.trigger(eventName, e);\n\n\t\t// special case: MouseOver & MouseOut\n\t\tvar over = this.over, closest = e.target;\n\t\tif (eventName === \"MouseMove\" && over !== closest) { // MouseOver target changed\n\t\t\t// if old MouseOver target wasn't null, send MouseOut\n\t\t\tif (over) {\n\t\t\t\te.eventName = \"MouseOut\";\n\t\t\t\te.target = over;\n\t\t\t\tover.trigger(\"MouseOut\", e);\n\t\t\t\te.eventName = \"MouseMove\";\n\t\t\t\te.target = closest;\n\t\t\t}\n\n\t\t\t// save new over entity\n\t\t\tthis.over = closest;\n\n\t\t\t// if new MouseOver target isn't null, send MouseOver\n\t\t\tif (closest) {\n\t\t\t\te.eventName = \"MouseOver\";\n\t\t\t\tclosest.trigger(\"MouseOver\", e);\n\t\t\t\te.eventName = \"MouseMove\";\n\t\t\t}\n\t\t}\n\n\t\t// TODO: move routing of events in future to controls system, make it similar to KeyboardSystem\n\t\t// try to find closest element that will also receive mouse event, whatever the event is\n\t\tif (closest) {\n\t\t\tclosest.trigger(eventName, e);\n\t\t}\n\t},\n\n\tdispatchEvent: function (e) {\n\t\tvar evt = this.prepareEvent(e);\n\t\tthis.triggerMouse(evt.eventName, evt);\n\t}\n}), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__mouseStateTemplate), {}, false);\n\n\n/**@\n * #Mouse\n * @category Input\n * @kind Component\n *\n * Provides the entity with mouse events.\n * Mouse events get dispatched to the closest (visible & `Mouse`-enhanced) entity to the source of the event (if available).\n * @note If you do not add this component, mouse events will not be triggered on the entity.\n *\n * Triggers all events described in `MouseSystem` and `MouseState`, these are:\n * @trigger MouseOver - when the mouse enters the entity - MouseEvent\n * @trigger MouseMove - when the mouse is over the entity and moves - MouseEvent\n * @trigger MouseOut - when the mouse leaves the entity - MouseEvent\n * @trigger MouseDown - when a mouse button is pressed on the entity - MouseEvent\n * @trigger MouseUp - when a mouse button is released on the entity - MouseEvent\n * @trigger Click - when the user clicks on the entity - MouseEvent\n * @trigger DoubleClick - when the user double clicks on the entity - MouseEvent\n *\n * @note If you're targeting mobile, you should know that by default Qrafty turns touch events into mouse events,\n * making mouse dependent components work with touch. However, if you need multitouch, you'll have\n * to make use of the Touch component instead, which can break compatibility with things which directly interact with the Mouse component.\n *\n * @example\n * ~~~\n * var myEntity = Qrafty.e('2D, Canvas, Color, Mouse')\n * .attr({x: 10, y: 10, w: 40, h: 40})\n * .color('red')\n * .bind('Click', function(MouseEvent){\n *   alert('clicked', MouseEvent);\n * });\n *\n * myEntity.bind('MouseUp', function(e) {\n *    if( e.mouseButton == Qrafty.mouseButtons.RIGHT )\n *        Qrafty.log(\"Clicked right button\");\n * })\n * ~~~\n *\n * @see MouseState, MouseSystem\n * @see Qrafty.multitouch\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Mouse\", {\n\trequired: \"AreaMap\",\n\n\tinit: function () {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").mouseObjs++;\n\t},\n\tremove: function() {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").mouseObjs--;\n\t}\n});\n\n/**@\n * #MouseDrag\n * @category Input\n * @kind Component\n *\n * Provides the entity with drag and drop mouse events.\n * @trigger Dragging - is triggered each frame the entity is being dragged - MouseEvent\n * @trigger StartDrag - is triggered when dragging begins - MouseEvent\n * @trigger StopDrag - is triggered when dragging ends - MouseEvent\n *\n * @see Mouse\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"MouseDrag\", {\n\t_dragging: false,\n\n\trequired: \"Mouse\",\n\tevents: {\n\t\t\"MouseDown\": \"_ondown\"\n\t},\n\n\tinit: function () {\n\t\t// TODO: remove this and instead lock on pointer control events in future\n\t\t// bind the this object for listeners called with the MouseSystem as the this object\n\t\tthis._ondown = this._ondown.bind(this);\n\t\tthis._ondrag = this._ondrag.bind(this);\n\t\tthis._onup = this._onup.bind(this);\n\t},\n\n\t// When dragging is enabled, this method is bound to the MouseDown crafty event\n\t_ondown: function (e) {\n\t\tif (e.mouseButton !== _core_core__WEBPACK_IMPORTED_MODULE_0__.default.mouseButtons.LEFT) return;\n\t\tthis.startDrag(e);\n\t},\n\n\t// While a drag is occurring, this method is bound to the mousemove DOM event\n\t_ondrag: function (e) {\n\t\t// ignore invalid 0 position - strange problem on ipad\n\t\tif (!this._dragging || e.realX === 0 || e.realY === 0) return false;\n\t\tthis.trigger(\"Dragging\", e);\n\t},\n\n\t// While a drag is occurring, this method is bound to mouseup DOM event\n\t_onup: function (e) {\n\t\tif (e.mouseButton !== _core_core__WEBPACK_IMPORTED_MODULE_0__.default.mouseButtons.LEFT) return;\n\t\tthis.stopDrag(e);\n\t},\n\n\t/**@\n     * #.startDrag\n     * @comp MouseDrag\n     * @kind Method\n     *\n     * @sign public this .startDrag(void)\n     *\n     * Make the entity produce drag events, essentially making the entity follow the mouse positions.\n     *\n     * @see .stopDrag\n     */\n\tstartDrag: function (e) {\n\t\tif (this._dragging) return;\n\t\tthis._dragging = true;\n\n\t\t// TODO: remove this and instead lock on pointer control events in future\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").bind(\"MouseMove\", this._ondrag);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").bind(\"MouseUp\", this._onup);\n\n\t\t// if event undefined, use the last known position of the mouse\n\t\tthis.trigger(\"StartDrag\", e || _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").lastMouseEvent);\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.stopDrag\n     * @comp MouseDrag\n     * @kind Method\n     *\n     * @sign public this .stopDrag(void)\n     *\n     * Stop the entity from producing drag events, essentially reproducing the drop.\n     *\n     * @see .startDrag\n     */\n\tstopDrag: function (e) {\n\t\tif (!this._dragging) return;\n\t\tthis._dragging = false;\n\n\t\t// TODO: remove this and instead lock on pointer control events in future\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").unbind(\"MouseMove\", this._ondrag);\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").unbind(\"MouseUp\", this._onup);\n\n\t\t// if event undefined, use the last known position of the mouse\n\t\tthis.trigger(\"StopDrag\", e || _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Mouse\").lastMouseEvent);\n\t\treturn this;\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/inputs/mouse.js?");

/***/ }),

/***/ "./src/inputs/pointer.js":
/*!*******************************!*\
  !*** ./src/inputs/pointer.js ***!
  \*******************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.findPointerEventTargetByComponent\n     * @category Input\n     * @kind Method\n     *\n     * @sign public Object .findPointerEventTargetByComponent(String comp, Number clientX, Number clientY)\n     * Finds closest entity with certain component at a given position.\n     * @param comp - Component name\n     * @param clientX - x coordinate in client space, usually taken from a pointer event\n     * @param clientY - y coordinate in client space, usually taken from a pointer event\n     * @returns The found entity, or null if no entity was found.\n     *\n     * @sign public Object .findPointerEventTargetByComponent(String comp, Event e)\n     * Finds closest entity with certain component at a given event.\n     * @param comp - Component name\n     * @param e - The pointer event, containing the target and the required properties `clientX` & `clientY`, which will be used as the query point\n     * @returns The found entity, or null if no entity was found.\n     *\n     * This method is used internally by the .mouseDispatch and .touchDispatch methods, but can be used otherwise for\n     * Canvas entities.\n     *\n     * Finds the top most entity (with the highest z) with a given component at a given point (x, y).\n     * For having a detection area specified for the enity, add the AreaMap component to the entity expected to be found.\n     *\n     */\n\tfindPointerEventTargetByComponent: function (comp, x, y) {\n\t\tvar tar = x.target || x.srcElement || _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.elem;\n\t\ty = typeof y !== \"undefined\" ? y : x.clientY;\n\t\tx = typeof x.clientX !== \"undefined\" ? x.clientX : x;\n\n\t\tvar closest = null, current, q, l, i, pos, maxz = -Infinity;\n\n\t\t//if it's a DOM element with component we are done\n\t\tif (tar.nodeName !== \"CANVAS\") {\n\t\t\twhile (typeof (tar.id) !== \"string\" && tar.id.indexOf(\"ent\") === -1) {\n\t\t\t\ttar = tar.parentNode;\n\t\t\t}\n\t\t\tvar ent = (0,_core_core__WEBPACK_IMPORTED_MODULE_0__.default)(parseInt(tar.id.replace(\"ent\", \"\"), 10));\n\t\t\tpos = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.domHelper.translate(x, y, ent._drawLayer);\n\t\t\tif (ent.__c[comp] && ent.isAt(pos.x, pos.y)) {\n\t\t\t\tclosest = ent;\n\t\t\t}\n\t\t}\n\n\t\t//else we search for an entity with component\n\t\tif (!closest) {\n\n\t\t\t// Loop through each layer\n\t\t\tfor (var layerIndex in _core_core__WEBPACK_IMPORTED_MODULE_0__.default._drawLayers) {\n\t\t\t\tvar layer = _core_core__WEBPACK_IMPORTED_MODULE_0__.default._drawLayers[layerIndex];\n\n\t\t\t\t// Skip a layer if it has no entities listening for pointer events\n\t\t\t\tif (layer._pointerEntities <= 0) continue;\n\n\t\t\t\t// Get the position in this layer\n\t\t\t\tpos = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.domHelper.translate(x, y, layer);\n\t\t\t\tq = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.map.unfilteredSearch({\n\t\t\t\t\t_x: pos.x,\n\t\t\t\t\t_y: pos.y,\n\t\t\t\t\t_w: 1,\n\t\t\t\t\t_h: 1\n\t\t\t\t});\n\n\t\t\t\tfor (i = 0, l = q.length; i < l; ++i) {\n\t\t\t\t\tcurrent = q[i];\n\t\t\t\t\tif (current._visible && current._drawLayer === layer && current._globalZ > maxz &&\n                        current.__c[comp] && current.isAt(pos.x, pos.y)) {\n\t\t\t\t\t\tmaxz = current._globalZ;\n\t\t\t\t\t\tclosest = current;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn closest;\n\t},\n\n\t/**@\n     * #Qrafty.translatePointerEventCoordinates\n     * @category Input\n     * @kind Method\n     *\n     * @sign public Object .translatePointerEventCoordinates(PointerEvent e[, PointerEvent out])\n     * @param e - Any pointer event with `clientX` and `clientY` properties, usually a `MouseEvent` or `Touch` object\n     * @param out - Optional pointer event to augment with coordinates instead\n     * @returns The pointer event, augmented with additional `realX` and `realY` properties\n     *\n     * Updates the passed event object to have two additional properties, `realX` and `realY`,\n     * which correspond to the point in actual world space the event happened.\n     *\n     * This method is used internally by the .mouseDispatch and .touchDispatch methods,\n     * but may be used for custom events.\n     *\n     * @see Qrafty.domHelper#Qrafty.domHelper.translate\n     */\n\ttranslatePointerEventCoordinates: function (e, out) {\n\t\tout = out || e;\n\n\t\t// Find the Qrafty position in the default coordinate set,\n\t\t// disregard the fact that the pointer event was related to a specific layer.\n\t\tvar pos = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.domHelper.translate(e.clientX, e.clientY, undefined, this.__pointerPos);\n\n\t\t// Set the mouse position based on standard viewport coordinates\n\t\tout.realX = pos.x;\n\t\tout.realY = pos.y;\n\t},\n\t__pointerPos: {x: 0, y: 0} // object to reuse\n});\n\n/**@\n * #AreaMap\n * @category Input\n * @kind Component\n *\n * Component used by Mouse and Touch.\n * Can be added to other entities for use with the Qrafty.findPointerEventTargetByComponent method.\n *\n * @see Button\n * @see Qrafty.polygon\n * @see Qrafty.findPointerEventTargetByComponent\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"AreaMap\", {\n\tinit: function () {\n\t\tif (this.has(\"Renderable\") && this._drawLayer) {\n\t\t\tthis._drawLayer._pointerEntities++;\n\t\t}\n\t},\n\n\tremove: function (isDestruction) {\n\t\tif (!isDestruction && this.has(\"Renderable\") && this._drawLayer) {\n\t\t\tthis._drawLayer._pointerEntities--;\n\t\t}\n\t},\n\n\tevents: {\n\t\t\"LayerAttached\": function (layer) {\n\t\t\tlayer._pointerEntities++;\n\t\t},\n\t\t\"LayerDetached\": function (layer) {\n\t\t\tlayer._pointerEntities--;\n\t\t}\n\t},\n\n\t/**@\n     * #.areaMap\n     * @comp AreaMap\n     * @kind Method\n     *\n     * @trigger NewAreaMap - when a new areaMap is assigned - Qrafty.polygon\n     *\n     * @sign public this .areaMap(Qrafty.polygon polygon)\n     * @param polygon - Instance of Qrafty.polygon used to check if the mouse coordinates are inside this region\n     *\n     * @sign public this .areaMap(Array coordinatePairs)\n     * @param coordinatePairs - Array of `x`, `y` coordinate pairs to generate a polygon\n     *\n     * @sign public this .areaMap(x1, y1,.., xN, yN)\n     * @param point# - List of `x`, `y` coordinate pairs to generate a polygon\n     *\n     * Assign a polygon to the entity so that pointer (mouse or touch) events will only be triggered if\n     * the coordinates are inside the given polygon.\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, DOM, Color, Mouse\")\n     *     .color(\"red\")\n     *     .attr({ w: 100, h: 100 })\n     *     .bind('MouseOver', function() {Qrafty.log(\"over\")})\n     *     .areaMap(0, 0, 50, 0, 50, 50, 0, 50);\n     *\n     * Qrafty.e(\"2D, Mouse\")\n     *     .areaMap([0, 0, 50, 0, 50, 50, 0, 50]);\n     *\n     * Qrafty.e(\"2D, Mouse\").areaMap(\n     *     new Qrafty.polygon([0, 0, 50, 0, 50, 50, 0, 50])\n     * );\n     * ~~~\n     *\n     * @see Qrafty.polygon\n     */\n\tareaMap: function (poly) {\n\t\t//create polygon\n\t\tif (arguments.length > 1) {\n\t\t\t//convert args to array to create polygon\n\t\t\tvar args = Array.prototype.slice.call(arguments, 0);\n\t\t\tpoly = new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.polygon(args);\n\t\t} else if (poly.constructor === Array) {\n\t\t\tpoly = new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.polygon(poly.slice());\n\t\t} else {\n\t\t\tpoly = poly.clone();\n\t\t}\n\n\t\tpoly.shift(this._x, this._y);\n\t\tthis.mapArea = poly;\n\t\tthis.attach(this.mapArea);\n\t\tthis.trigger(\"NewAreaMap\", poly);\n\t\treturn this;\n\t}\n});\n\n/**@\n * #Button\n * @category Input\n * @kind Component\n *\n * Provides the entity with touch or mouse functionality, depending on whether this is a pc\n * or mobile device, and also on multitouch configuration.\n *\n * @see Mouse\n * @see Touch\n * @see Qrafty.multitouch\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Button\", {\n\tinit: async function () {\n\t\tvar req = (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.mobile || (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.mobile && !_core_core__WEBPACK_IMPORTED_MODULE_0__.default.multitouch())) ? \"Mouse\" : \"Touch\";\n\t\tawait this.requires(req);\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/inputs/pointer.js?");

/***/ }),

/***/ "./src/inputs/touch.js":
/*!*****************************!*\
  !*** ./src/inputs/touch.js ***!
  \*****************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.multitouch\n     * @category Input\n     * @kind Method\n     *\n     * Enables/disables support for multitouch feature.\n     * @sign public this .multitouch(Boolean bool)\n     * @param bool - Turns multitouch on and off.  The initial state is off (false).\n     *\n     * Query whether multitouch is on or off.\n     * @sign public Boolean .multitouch()\n     * @returns Whether multitouch is currently enabled\n     *\n     * By default, touch events are treated as mouse events and are handled by the `MouseSystem`.\n     * To change this behaviour and handle events by the `TouchSystem`, enable multitouch.\n     *\n     * If this is set to true, it is expected that your entities have the `Touch` component instead of the `Mouse` component.\n     * If false (default), then only entities with the Mouse component will respond to touch.\n     * For simple use cases, tt's recommended to add the `Button` component instead, which requires the proper component depending on this feature.\n     *\n     * @note The multitouch feature is currently incompatible with the `Draggable` component and `Qrafty.viewport.mouselook`.\n     * @note When multitouch is not enabled, Qrafty will cancel touch events when forwarding them to the mouse system.\n     *\n     * @example\n     * ~~~\n     * Qrafty.multitouch(true);\n     * Qrafty.log(\"multitouch is \" + Qrafty.multitouch());\n     *\n     * Qrafty.e('2D, Canvas, Color, Button')\n     *    .attr({ x: 100, y: 100, w:200, h:200, z:1 })\n     *    .color('black')\n     *    .bind('TouchStart', function(e) { this.color('green'); });\n     * ~~~\n     * @see TouchSystem\n     * @see MouseSystem\n     * @see Button\n     * @see Touch\n     * @see Mouse\n     */\n\tmultitouch: function (bool) {\n\t\tif (typeof bool !== \"boolean\") return this._multitouch;\n\t\tthis._multitouch = bool;\n\t\treturn this;\n\t},\n\t_multitouch: false,\n\n\t_touchDispatch: (function () {\n\t\tvar touchSystem;\n\n\t\tvar startX = 0, // keeps track of start touch location\n\t\t\tstartY = 0; // keeps track of start touch location\n\n\t\tfunction mimicMouse (e) {\n\t\t\tvar type, first;\n\t\t\tif (e.type === \"touchstart\") type = \"mousedown\";\n\t\t\telse if (e.type === \"touchmove\") type = \"mousemove\";\n\t\t\telse if (e.type === \"touchend\") type = \"mouseup\";\n\t\t\telse if (e.type === \"touchcancel\") type = \"mouseup\";\n\t\t\telse if (e.type === \"touchleave\") type = \"mouseup\";\n\t\t\tif (e.touches && e.touches.length) {\n\t\t\t\tfirst = e.touches[0];\n\t\t\t} else if (e.changedTouches && e.changedTouches.length) {\n\t\t\t\tfirst = e.changedTouches[0];\n\t\t\t}\n\t\t\tvar simulatedEvent = document.createEvent(\"MouseEvent\");\n\t\t\tsimulatedEvent.initMouseEvent(type, true, true, window, 1,\n\t\t\t\tfirst.screenX,\n\t\t\t\tfirst.screenY,\n\t\t\t\tfirst.clientX,\n\t\t\t\tfirst.clientY,\n\t\t\t\tfalse, false, false, false, 0, e.relatedTarget\n\t\t\t);\n\t\t\tfirst.target.dispatchEvent(simulatedEvent);\n\n\t\t\t// trigger click when it should be triggered\n\t\t\tif (type === \"mousedown\") {\n\t\t\t\tstartX = first.clientX;\n\t\t\t\tstartY = first.clientY;\n\t\t\t} else if (type === \"mouseup\") {\n\t\t\t\tvar diffX = first.clientX - startX,\n\t\t\t\t\tdiffY = first.clientY - startY;\n\n\t\t\t\t// make sure that distance between touchstart and touchend smaller than some threshold,\n\t\t\t\t// e.g. <= 16 px\n\t\t\t\tif (diffX * diffX + diffY * diffY <= 256) {\n\t\t\t\t\ttype = \"click\";\n\t\t\t\t\tsimulatedEvent = document.createEvent(\"MouseEvent\");\n\t\t\t\t\tsimulatedEvent.initMouseEvent(type, true, true, window, 1,\n\t\t\t\t\t\tfirst.screenX,\n\t\t\t\t\t\tfirst.screenY,\n\t\t\t\t\t\tfirst.clientX,\n\t\t\t\t\t\tfirst.clientY,\n\t\t\t\t\t\tfalse, false, false, false, 0, e.relatedTarget\n\t\t\t\t\t);\n\t\t\t\t\tfirst.target.dispatchEvent(simulatedEvent);\n\t\t\t\t}\n\t\t\t}\n\t\t\te.preventDefault();\n\t\t}\n\n\t\treturn function(e) {\n\t\t\t// either dispatch real touch events\n\t\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default._multitouch) {\n\t\t\t\tif (!touchSystem) touchSystem = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\");\n\t\t\t\ttouchSystem.processEvent(e);\n\t\t\t\t// or mimic mouse events\n\t\t\t} else {\n\t\t\t\tmimicMouse(e);\n\t\t\t}\n\t\t};\n\t})()\n});\n\n/**@\n * #TouchSystem\n * @category Input\n * @kind System\n *\n * Provides access to touch point events.\n * @note Additional events and methods are inherited from the `TouchState` component.\n *\n * @trigger TouchOver - when a finger enters an entity - TouchPointEvent\n * @trigger TouchOut - when a finger leaves an entity - TouchPointEvent\n *\n * The event callbacks are triggered with the native [`TouchEvent`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent)\n * received by Qrafty's stage (`Qrafty.stage.elem`), which is wrapped in a standard Qrafty event object (see `TouchState`).\n * Note that for each changed [`Touch` point](https://developer.mozilla.org/en-US/docs/Web/API/Touch)) a separate\n * Qrafty TouchPointEvent event is triggered.\n *\n * These touch point events are triggered on the TouchSystem itself.\n * Additionally, they are dispatched to the closest (visible & `Touch`-enhanced) entity to the source of the event (if available).\n *\n * @note By default, touch events are treated as mouse events and are not triggered by this system.\n * To change this behaviour (and enable multitouch) use `Qrafty.multitouch`.\n *\n * @see TouchState, Touch\n * @see Qrafty.multitouch\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\", _core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call(_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend.call(new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__eventDispatcher(), {\n\tnormedEventNames: {\n\t\t\"touchstart\": \"TouchStart\",\n\t\t\"touchmove\": \"TouchMove\",\n\t\t\"touchend\": \"TouchEnd\",\n\t\t\"touchcancel\": \"TouchCancel\" // touchcancel is treated as touchend, but triggers a TouchCancel event\n\t},\n\n\t_evt: { // evt object to reuse\n\t\teventName:\"\",\n\t\tidentifier: -1,\n\t\ttarget: null,\n\t\tentity: null, // DEPRECATED: remove this in upcoming release\n\t\trealX: 0,\n\t\trealY: 0,\n\t\toriginalEvent: null\n\t},\n\n\t// Indicates how many entities have the Touch component, for performance optimization\n\t// Touch events are still routed to Qrafty.s('Touch') even if there are no entities with Touch component\n\ttouchObjs: 0,\n\n\t// current entites that are pointed at\n\tovers: {},\n\n\tprepareEvent: function (e, type) {\n\t\tvar evt = this._evt;\n\n\t\t// Normalize event name\n\t\tevt.eventName = this.normedEventNames[type] || type;\n\n\t\t// copy identifier\n\t\tevt.identifier = e.identifier;\n\n\t\t// augment touch event with real coordinates\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.translatePointerEventCoordinates(e, evt);\n\n\t\t// augment touch event with target entity\n\t\tevt.target = this.touchObjs ? _core_core__WEBPACK_IMPORTED_MODULE_0__.default.findPointerEventTargetByComponent(\"Touch\", e) : null;\n\t\t// DEPRECATED: remove this in upcoming release\n\t\tevt.entity = evt.target;\n\n\t\treturn evt;\n\t},\n\n\t// this method will be called by TouchState iff triggerTouch event was valid\n\ttriggerTouchEvent: function(eventName, e) {\n\t\t// trigger event on TouchSystem itself\n\t\tthis.trigger(eventName, e);\n\n\t\tvar identifier = e.identifier,\n\t\t\tclosest = e.target,\n\t\t\tover = this.overs[identifier];\n\n\t\tif (over) { // if old TouchOver target wasn't null, send TouchOut\n\t\t\tif ((eventName === \"TouchMove\" && over !== closest) || // if TouchOver target changed\n                eventName === \"TouchEnd\" || eventName === \"TouchCancel\") { // or TouchEnd occurred\n\n\t\t\t\te.eventName = \"TouchOut\";\n\t\t\t\te.target = over;\n\t\t\t\te.entity = over; // DEPRECATED: remove this in upcoming release\n\t\t\t\tover.trigger(\"TouchOut\", e);\n\t\t\t\te.eventName = eventName;\n\t\t\t\te.target = closest;\n\t\t\t\te.entity = closest; // DEPRECATED: remove this in upcoming release\n\n\t\t\t\t// delete old over entity\n\t\t\t\tdelete this.overs[identifier];\n\t\t\t}\n\t\t}\n\n\t\t// TODO: move routing of events in future to controls system, make it similar to KeyboardSystem\n\t\t// try to find closest element that will also receive touch event, whatever the event is\n\t\tif (closest) {\n\t\t\tclosest.trigger(eventName, e);\n\t\t}\n\n\t\tif (closest) { // if new TouchOver target isn't null, send TouchOver\n\t\t\tif (eventName === \"TouchStart\" || // if TouchStart occurred\n                (eventName === \"TouchMove\" && over !== closest)) { // or TouchOver target changed\n\n\t\t\t\te.eventName = \"TouchOver\";\n\t\t\t\tclosest.trigger(\"TouchOver\", e);\n\t\t\t\te.eventName = eventName;\n\n\t\t\t\t// save new over entity\n\t\t\t\tthis.overs[identifier] = closest;\n\t\t\t}\n\t\t}\n\t},\n\n\tdispatchEvent: function (e) {\n\t\tvar evt, touches = e.changedTouches;\n\t\tfor (var i = 0, l = touches.length; i < l; i++) {\n\t\t\tevt = this.prepareEvent(touches[i], e.type);\n\t\t\t// wrap original event into standard Qrafty event object\n\t\t\tevt.originalEvent = e;\n\t\t\tthis.triggerTouch(evt.eventName, evt);\n\t\t}\n\t}\n}), _core_core__WEBPACK_IMPORTED_MODULE_0__.default.__touchStateTemplate), {}, false);\n\n/**@\n * #Touch\n * @category Input\n * @kind Component\n *\n * Provides the entity with touch point events.\n * Touch point events get dispatched to the closest (visible & `Touch`-enhanced) entity to the source of the event (if available).\n * @note If you do not add this component, touch events will not be triggered on the entity.\n *\n * Triggers all events described in `TouchSystem` and `TouchState`, these are:\n * @trigger TouchOver - when a finger enters the entity - TouchPointEvent\n * @trigger TouchMove - when a finger is over the entity and moves - TouchPointEvent\n * @trigger TouchOut - when a finger leaves the entity - TouchPointEvent\n * @trigger TouchStart - when a finger is pressed on the entity - TouchPointEvent\n * @trigger TouchEnd - when a finger is raised over the entity - TouchPointEvent\n * @trigger TouchCancel - when a touch event has been disrupted in some way whilst over the entity - TouchPointEvent\n *\n * @note By default, touch events are treated as mouse events and are not triggered by this component.\n * To change this behaviour (and enable multitouch) use `Qrafty.multitouch`.\n *\n * @example\n * ~~~\n * Qrafty.multitouch(true);\n *\n * Qrafty.e('2D, Canvas, Color, Touch')\n *   .attr({x: 10, y: 10, w: 40, h: 40})\n *   .color('green')\n *   .bind('TouchOver', function(TouchPoint){\n *     Qrafty.log('A finger is over the entity', TouchPoint.identifier);\n *   })\n *   .bind('TouchMove', function(TouchPoint) {\n *     Qrafty.log('A finger moves over the entity at { x: ' + TouchPoint.realX + ', y: ' + TouchPoint.realY + ' } coordinates.');\n *   })\n *   .bind('TouchOut', function(TouchPoint){\n *     Qrafty.log('A finger is no longer over the entity', TouchPoint.identifier);\n *   });\n * ~~~\n *\n * @example\n * ~~~\n * Qrafty.multitouch(true);\n *\n * var myEntity1 = Qrafty.e('2D, Canvas, Color, Touch')\n *    .attr({x: 100, y: 100, w:200, h:200, z:1 })\n *    .color('black')\n *    .bind('TouchStart',function(e){ alert('big black box was touched', e); }),\n *  myEntity2 = Qrafty.e('2D, Canvas, Color, Touch')\n *    .attr({x: 40, y: 150, w:90, h:300, z:2 })\n *    .color('green')\n *    .bind('TouchStart',function(e){ alert('big green box was touched', e); });\n * ~~~\n *\n * @see TouchState, TouchSystem\n * @see Qrafty.multitouch\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Touch\", {\n\trequired: \"AreaMap\",\n\tinit: function () {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\").touchObjs++;\n\t},\n\tremove: function () {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.s(\"Touch\").touchObjs--;\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/inputs/touch.js?");

/***/ }),

/***/ "./src/inputs/util.js":
/*!****************************!*\
  !*** ./src/inputs/util.js ***!
  \****************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n// common base functionality for all EventDispatchers\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.__eventDispatcher = function EventDispatcher() {};\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.__eventDispatcher.prototype = {\n\t// this method should be setup as the entry callback for DOM events\n\tprocessEvent: function (e) {\n\t\tthis.dispatchEvent(e);\n\t\treturn this.preventBubbling(e);\n\t},\n\n\t// main method that handles logic of incoming DOM events\n\t// to be implemented by instances\n\tdispatchEvent: function (e) {\n\t\t// normalize the event and prepare it for dispatching to Qrafty, a system or entities\n\t\t// set e.eventName to proper event to be triggered\n\n\t\t// dispatch the element to Qrafty, the proper system or entities\n\t\t// find the entity to dispatch to (e.g. mouse events) or dispatch it globally (e.g. key events)\n\t},\n\n\t// prevents interaction with page (e.g. scrolling of page), if DOM events target Qrafty's stage\n\t// automatically called for all incoming DOM events\n\tpreventBubbling: function (e) {\n\t\t// only prevent something if DOM event targets Qrafty's stage\n\t\t// prevent bubbling up for all events except key events backspace and F1-F12.\n\t\t// prevent default actions for all events except key events backspace and F1-F12 and except actions on INPUT and TEXTAREA.\n\t\t// Among others this prevent the arrow keys from scrolling the parent page of an iframe hosting the game\n\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.selected && !(e.key === 8 || e.key >= 112 && e.key <= 135)) {\n\t\t\tif (e.stopPropagation) e.stopPropagation();\n\t\t\telse e.cancelBubble = true;\n\n\t\t\t// Don't prevent default actions if target node is input or textarea.\n\t\t\tif (!e.target || (e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\")) {\n\t\t\t\tif (e.preventDefault) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t} else {\n\t\t\t\t\te.returnValue = false;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n};\n\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.selected\n     * @category Input\n     * @kind Property\n     * @trigger QraftyFocus - is triggered when Qrafty's stage gets selected\n     * @trigger QraftyBlur - is triggered when Qrafty's stage is no longer selected\n     *\n     * Check whether Qrafty's stage (`Qrafty.stage.elem`) is currently selected.\n     *\n     * After a click occurs inside Qrafty's stage, this property is set to `true`.\n     * After a click occurs outside Qrafty's stage, this property is set to `false`.\n     *\n     * Defaults to true.\n     *\n     * @see Qrafty.stage#Qrafty.stage.elem\n     */\n\tselected: true,\n\n\tdetectBlur: function (e) {\n\t\tvar selected = ((e.clientX > _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.x && e.clientX < _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.x + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width) &&\n            (e.clientY > _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.y && e.clientY < _core_core__WEBPACK_IMPORTED_MODULE_0__.default.stage.y + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height));\n\n\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.selected && selected) {\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"QraftyFocus\");\n\t\t}\n\n\t\tif (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.selected && !selected) {\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"QraftyBlur\");\n\t\t}\n\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.selected = selected;\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/inputs/util.js?");

/***/ }),

/***/ "./src/isometric/diamond-iso.js":
/*!**************************************!*\
  !*** ./src/isometric/diamond-iso.js ***!
  \**************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.diamondIso\n     * @category 2D\n     * @kind CoreObject\n     * \n     * Place entities in a 45deg diamond isometric fashion. It is similar to isometric but has another grid locations\n     * In this mode, the x axis and y axis are aligned to the edges of tiles with x increasing being down and to the\n     * right and y being down and to the left.\n     */\n\tdiamondIso: {\n\t\t_tile: {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t},\n\t\tgetTileDimensions: function(){\n\t\t\treturn {w:this._tile.width,h:this._tile.height};\n\t\t},\n\t\t_map: {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t},\n\t\t_origin: {\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\t_tiles: [],\n\t\tgetTile: function(x,y,z){\n\t\t\treturn this._tiles[x][y][z];\n\t\t},\n\t\t/**@\n         * #Qrafty.diamondIso.init\n         * @comp Qrafty.diamondIso\n         * @kind Method\n         * \n         * @sign public this Qrafty.diamondIso.init(Number tileWidth,Number tileHeight,Number mapWidth,Number mapHeight)\n         * @param tileWidth - The size of base tile width's grid space in Pixel\n         * @param tileHeight - The size of base tile height grid space in Pixel\n         * @param mapWidth - The width of whole map in Tiles\n         * @param mapHeight - The height of whole map in Tiles\n         * @param x - the x coordinate of the TOP corner of the 0,0 tile\n         * @param y - the y coordinate of the TOP corner of the 0,0, tile\n         *\n         * Method used to initialize the size of the isometric placement.\n         * Recommended to use a size alues in the power of `2` (128, 64 or 32).\n         * This makes it easy to calculate positions and implement zooming.\n         *\n         * @example\n         * ~~~\n         * var iso = Qrafty.diamondIso.init(64,128,20,20);\n         * ~~~\n         *\n         * @see Qrafty.diamondIso.place\n         */\n\t\tinit: function (tw, th, mw, mh, x, y) {\n\t\t\tthis._tile.width = parseInt(tw, 10);\n\t\t\tthis._tile.height = parseInt(th, 10) || parseInt(tw, 10) / 2;\n\t\t\tthis._tile.r = this._tile.width / this._tile.height;\n\n\t\t\tthis._map.width = parseInt(mw, 10);\n\t\t\tthis._map.height = parseInt(mh, 10) || parseInt(mw, 10);\n\t\t\tfor (var i=0; i<mw; i++) {\n\t\t\t\tthis._tiles[i]=Array();\n\t\t\t\tfor (var j=0; j<mh; j++){\n\t\t\t\t\tthis._tiles[i][j]=Array();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.x = parseInt(x,10) || 0;\n\t\t\tthis.y = parseInt(y,10) || 0;\n\t\t\tthis.layerZLevel= (mw+mh+1);\n\t\t\treturn this;\n\t\t},\n\t\t/**@\n         * #Qrafty.diamondIso.place\n         * @comp Qrafty.diamondIso\n         * @kind Method\n         * \n         * @sign public this Qrafty.diamondIso.place(Entity tile,Number x, Number y, Number layer)\n         * @param x - The `x` position to place the tile\n         * @param y - The `y` position to place the tile\n         * @param layer - The `z` position to place the tile\n         * @param tile - The entity that should be position in the isometric fashion\n         *\n         * Use this method to place an entity in an isometric grid.\n         *\n         * @example\n         * ~~~\n         * var iso = Qrafty.diamondIso.init(64,128,20,20);\n         * isos.place(Qrafty.e('2D, DOM, Color').color('red').attr({w:128, h:128}),1,1,2);\n         * ~~~\n         *\n         * @see Qrafty.diamondIso.size\n         */\n\t\tplace: function (obj, x, y, layer) {\n\t\t\tvar pos = this.pos2px(x, y);\n\t\t\t//this calculation is weird because tile sprites are h*2\n\t\t\t//for tiles of size h in isometric\n\t\t\tvar spriteHeight =obj.h/this._tile.height;\n\t\t\tobj.x = pos.x;\n\t\t\tobj.y = pos.y - (spriteHeight-2)*this._tile.height - this._tile.height*layer;\n\t\t\tobj.z = this.getZAtLoc(x,y,layer);\n\t\t\tfor (var i=0; i<=spriteHeight-2; i++) {\n\t\t\t\tvar prevTile = this._tiles[x][y][layer+i];\n\t\t\t\tif (prevTile && prevTile !== obj){\n\t\t\t\t\tprevTile.destroy();\n\t\t\t\t}\n\t\t\t\tthis._tiles[x][y][layer+i] = obj;\n\t\t\t}\n\t\t\treturn this;\n\n\t\t},\n\t\tdetachTile: function(obj){\n\t\t\tfor (var _x=0; _x<this._map.width; _x++){\n\t\t\t\tfor (var _y=0; _y<this._map.height; _y++){\n\t\t\t\t\tvar len = this._tiles[_x][_y].length;\n\t\t\t\t\tfor(var _z=0; _z<len; _z++){\n\t\t\t\t\t\tif (this._tiles[_x][_y][_z] && obj === this._tiles[_x][_y][_z]){\n\t\t\t\t\t\t\tvar tHeight=obj.h/this._tile.height;\n\t\t\t\t\t\t\tfor (var i=0; i<tHeight; i++){\n\t\t\t\t\t\t\t\tthis._tiles[_x][_y][_z+i] = undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tx:_x,\n\t\t\t\t\t\t\t\ty:_y,\n\t\t\t\t\t\t\t\tz:_z\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tcenterAt: function (x, y) {\n\t\t\tvar pos = this.pos2px(x, y);\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.x = -pos.x + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width / 2 - this._tile.width;\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.y = -pos.y + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height / 2;\n\n\t\t},\n\t\tgetZAtLoc: function(x,y,layer){\n\t\t\treturn this.layerZLevel * layer + x+y;\n\t\t},\n\t\tpos2px: function (x, y) {\n\t\t\t/* This returns the correct coordinates to place the \n        object's top and left to fit inside the grid, which is\n        NOT inside of the tile for an isometric grid.  IF you\n        want the top corner of the diamond add tile width/2 */\n\t\t\treturn {\n\t\t\t\tx: this.x + ((x - y - 1) * this._tile.width / 2),\n\t\t\t\ty: this.y + ((x + y) * this._tile.height / 2)\n\t\t\t};\n\t\t},\n\t\tpx2pos: function (left, top) {\n\t\t\t/* This returns the x/y coordinates on z level 0.\n        @TODO add a specifying z level\n        */\n\t\t\tvar v1 = (top - this.y)/this._tile.height;\n\t\t\tvar v2 = (left - this.x)/this._tile.width;\n\t\t\tvar x = v1+v2;\n\t\t\tvar y = v1-v2;\n\t\t\tvar inX = x>0 && x<this._map.width;\n\t\t\tvar inY = y>0 && y<this._map.height;\n\t\t\tif (!inX || !inY){\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tx: ~~x,\n\t\t\t\ty: ~~y\n\t\t\t};\n\t\t},\n\t\tgetOverlappingTiles: function(x,y){\n\t\t\t/* This will find all of the tiles that might be at a given x/y in pixels */\n\t\t\tvar pos = this.px2pos(x,y);\n\t\t\tvar tiles = [];\n\t\t\tvar _x = ~~pos.x;\n\t\t\tvar _y = ~~pos.y;\n\t\t\tvar maxX = this._map.width - _x;\n\t\t\tvar maxY = this._map.height - _y;\n\t\t\tvar furthest = Math.min(maxX, maxY);\n\t\t\tvar obj = this._tiles[_x][_y][1];\n\t\t\tif (obj){\n\t\t\t\ttiles.push(obj);\n\t\t\t}\n\t\t\tfor (var i=1; i<furthest; i++){\n\t\t\t\tvar _obj= this._tiles[_x+i][_y+i][i];\n\t\t\t\tif (_obj){\n\t\t\t\t\ttiles.push(_obj);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tiles;\n\t\t},\n\t\tpolygon: function (obj) {\n\t\t\t/*I don't know what this is trying to do...*/\n\t\t\tobj.requires(\"Collision\");\n\t\t\tvar marginX = 0,\n\t\t\t\tmarginY = 0;\n\t\t\tvar points = [\n\t\t\t\tmarginX - 0, obj.h - marginY - this._tile.height / 2,\n\t\t\t\tmarginX - this._tile.width / 2, obj.h - marginY - 0,\n\t\t\t\tmarginX - this._tile.width, obj.h - marginY - this._tile.height / 2,\n\t\t\t\tmarginX - this._tile.width / 2, obj.h - marginY - this._tile.height\n\t\t\t];\n\t\t\tvar poly = new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.polygon(points);\n\t\t\treturn poly;\n\n\t\t}\n\t}\n\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/isometric/diamond-iso.js?");

/***/ }),

/***/ "./src/isometric/isometric.js":
/*!************************************!*\
  !*** ./src/isometric/isometric.js ***!
  \************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.isometric\n     * @category 2D\n     * @kind CoreObject\n     * \n     * Place entities in a 45deg isometric fashion. The alignment of this\n     * grid's axes for tile placement is 90 degrees.  If you are looking\n     * to have the grid of tile indicies for this.place aligned to the tiles\n     * themselves, use DiamondIso instead.\n     */\n\tisometric: {\n\t\t_tile: {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t},\n\t\t_elements: {},\n\t\t_pos: {\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\t_z: 0,\n\t\t/**@\n         * #Qrafty.isometric.size\n         * @comp Qrafty.isometric\n         * @kind Method\n         * \n         * @sign public this Qrafty.isometric.size(Number tileSize)\n         * @param tileSize - The size of the tiles to place.\n         *\n         * Method used to initialize the size of the isometric placement.\n         * Recommended to use a size values in the power of `2` (128, 64 or 32).\n         * This makes it easy to calculate positions and implement zooming.\n         *\n         * @example\n         * ~~~\n         * var iso = Qrafty.isometric.size(128);\n         * ~~~\n         *\n         * @see Qrafty.isometric.place\n         */\n\t\tsize: function (width, height) {\n\t\t\tthis._tile.width = width;\n\t\t\tthis._tile.height = height > 0 ? height : width / 2; //Setup width/2 if height isn't set\n\t\t\treturn this;\n\t\t},\n\t\t/**@\n         * #Qrafty.isometric.place\n         * @comp Qrafty.isometric\n         * @kind Method\n         * \n         * @sign public this Qrafty.isometric.place(Number x, Number y, Number z, Entity tile)\n         * @param x - The `x` position to place the tile\n         * @param y - The `y` position to place the tile\n         * @param z - The `z` position or height to place the tile\n         * @param tile - The entity that should be position in the isometric fashion\n         *\n         * Use this method to place an entity in an isometric grid.\n         *\n         * @example\n         * ~~~\n         * var iso = Qrafty.isometric.size(128);\n         * iso.place(2, 1, 0, Qrafty.e('2D, DOM, Color').color('red').attr({w:128, h:128}));\n         * ~~~\n         *\n         * @see Qrafty.isometric.size\n         */\n\t\tplace: function (x, y, z, obj) {\n\t\t\tvar pos = this.pos2px(x, y);\n\t\t\tpos.top -= z * (this._tile.height / 2);\n\t\t\tobj.x = pos.left + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._x;\n\t\t\tobj.y = pos.top + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._y;\n\t\t\tobj.z += z;\n\t\t\treturn this;\n\t\t},\n\t\t/**@\n         * #Qrafty.isometric.pos2px\n         * @comp Qrafty.isometric\n         * @kind Method\n         * \n         * @sign public Object Qrafty.isometric.pos2px(Number x,Number y)\n         * @param x - A position along the x axis\n         * @param y - A position along the y axis\n         * @return An object with `left` and `top` fields {left Number,top Number}\n         *\n         * This method converts a position in x and y coordinates to one in pixels\n         *\n         * @example\n         * ~~~\n         * var iso = Qrafty.isometric.size(128,96);\n         * var position = iso.pos2px(100,100); //Object { left=12800, top=4800}\n         * ~~~\n         */\n\t\tpos2px: function (x, y) {\n\t\t\treturn {\n\t\t\t\tleft: x * this._tile.width + (y & 1) * (this._tile.width / 2),\n\t\t\t\ttop: y * this._tile.height / 2\n\t\t\t};\n\t\t},\n\t\t/**@\n         * #Qrafty.isometric.px2pos\n         * @comp Qrafty.isometric\n         * @kind Method\n         * \n         * @sign public Object Qrafty.isometric.px2pos(Number left,Number top)\n         * @param top - Offset from the top in pixels\n         * @param left - Offset from the left in pixels\n         * @return An object with `x` and `y` fields representing the position\n         *\n         * This method converts a position in pixels to x,y coordinates\n         *\n         * @example\n         * ~~~\n         * var iso = Qrafty.isometric.size(128,96);\n         * var px = iso.pos2px(12800,4800);\n         * Qrafty.log(px); //Object { x=100, y=100}\n         * ~~~\n         */\n\t\tpx2pos: function (left, top) {\n\t\t\treturn {\n\t\t\t\tx: -Math.ceil(-left / this._tile.width - (top & 1) * 0.5),\n\t\t\t\ty: top / this._tile.height * 2\n\t\t\t};\n\t\t},\n\t\t/**@\n         * #Qrafty.isometric.centerAt\n         * @comp Qrafty.isometric\n         * @kind Method\n         * \n         * @sign public Obect Qrafty.isometric.centerAt()\n         * @returns An object with `top` and `left` fields represneting the viewport's current center\n         *\n         * @sign public this Qrafty.isometric.centerAt(Number x, Number y)\n         * @param x - The x position to center at\n         * @param y - The y position to center at\n         *\n         * This method centers the Viewport at an `x,y` location or gives the current centerpoint of the viewport\n         *\n         * @example\n         * ~~~\n         * var iso = Qrafty.isometric.size(128,96).centerAt(10,10); //Viewport is now moved\n         * //After moving the viewport by another event you can get the new center point\n         * Qrafty.log(iso.centerAt());\n         * ~~~\n         */\n\t\tcenterAt: function (x, y) {\n\t\t\tif (typeof x === \"number\" && typeof y === \"number\") {\n\t\t\t\tvar center = this.pos2px(x, y);\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._x = -center.left + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width / 2 - this._tile.width / 2;\n\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._y = -center.top + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height / 2 - this._tile.height / 2;\n\t\t\t\treturn this;\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\ttop: -_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._y + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height / 2 - this._tile.height / 2,\n\t\t\t\t\tleft: -_core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport._x + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width / 2 - this._tile.width / 2\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\t/**@\n         * #Qrafty.isometric.area\n         * @comp Qrafty.isometric\n         * @kind Method\n         * \n         * @sign public Object Qrafty.isometric.area()\n         * @return An obect with `x` and `y` fields, each of which have a start and end field.\n         * In other words, the object has this structure: `{x:{start Number,end Number},y:{start Number,end Number}}`\n         *\n         * This method returns an object representing the bounds of the viewport\n         *\n         * @example\n         * ~~~\n         * var iso = Qrafty.isometric.size(128,96).centerAt(10,10); //Viewport is now moved\n         * var area = iso.area(); //get the area\n         * for(var y = area.y.start;y <= area.y.end;y++){\n         *   for(var x = area.x.start ;x <= area.x.end;x++){\n         *       iso.place(x,y,0,Qrafty.e(\"2D,DOM,gras\")); //Display tiles in the Screen\n         *   }\n         * }\n         * ~~~\n         */\n\t\tarea: function () {\n\t\t\t//Get the center Point in the viewport\n\t\t\tvar center = this.centerAt();\n\t\t\tvar start = this.px2pos(-center.left + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width / 2, -center.top + _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height / 2);\n\t\t\tvar end = this.px2pos(-center.left - _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.width / 2, -center.top - _core_core__WEBPACK_IMPORTED_MODULE_0__.default.viewport.height / 2);\n\t\t\treturn {\n\t\t\t\tx: {\n\t\t\t\t\tstart: start.x,\n\t\t\t\t\tend: end.x\n\t\t\t\t},\n\t\t\t\ty: {\n\t\t\t\t\tstart: start.y,\n\t\t\t\t\tend: end.y\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/isometric/isometric.js?");

/***/ }),

/***/ "./src/qrafty-common.js":
/*!******************************!*\
  !*** ./src/qrafty-common.js ***!
  \******************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/core */ \"./src/core/core.js\");\n/* harmony import */ var _debug_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug/logging */ \"./src/debug/logging.js\");\n/* harmony import */ var _core_extensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/extensions */ \"./src/core/extensions.js\");\n/* harmony import */ var _core_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/components */ \"./src/core/components.js\");\n/* harmony import */ var _core_animation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/animation */ \"./src/core/animation.js\");\n/* harmony import */ var _core_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./core/model */ \"./src/core/model.js\");\n/* harmony import */ var _core_scenes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./core/scenes */ \"./src/core/scenes.js\");\n/* harmony import */ var _core_storage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./core/storage */ \"./src/core/storage.js\");\n/* harmony import */ var _core_time__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./core/time */ \"./src/core/time.js\");\n/* harmony import */ var _core_tween__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./core/tween */ \"./src/core/tween.js\");\n/* harmony import */ var _spatial_spatial_grid__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./spatial/spatial-grid */ \"./src/spatial/spatial-grid.js\");\n/* harmony import */ var _core_systems__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./core/systems */ \"./src/core/systems.js\");\n/* harmony import */ var _spatial_2d__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./spatial/2d */ \"./src/spatial/2d.js\");\n/* harmony import */ var _spatial_motion__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./spatial/motion */ \"./src/spatial/motion.js\");\n/* harmony import */ var _spatial_platform__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./spatial/platform */ \"./src/spatial/platform.js\");\n/* harmony import */ var _spatial_collision__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./spatial/collision */ \"./src/spatial/collision.js\");\n/* harmony import */ var _spatial_rect_manager__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./spatial/rect-manager */ \"./src/spatial/rect-manager.js\");\n/* harmony import */ var _spatial_math__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./spatial/math */ \"./src/spatial/math.js\");\n/* harmony import */ var _controls_controls_system__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./controls/controls-system */ \"./src/controls/controls-system.js\");\n/* harmony import */ var _controls_controls__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./controls/controls */ \"./src/controls/controls.js\");\n/* harmony import */ var _controls_keyboard__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./controls/keyboard */ \"./src/controls/keyboard.js\");\n/* harmony import */ var _controls_keycodes__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./controls/keycodes */ \"./src/controls/keycodes.js\");\n/* harmony import */ var _controls_mouse__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./controls/mouse */ \"./src/controls/mouse.js\");\n/* harmony import */ var _controls_touch__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./controls/touch */ \"./src/controls/touch.js\");\n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_core_core__WEBPACK_IMPORTED_MODULE_0__.default);\n\n//# sourceURL=webpack://qrafty-v2/./src/qrafty-common.js?");

/***/ }),

/***/ "./src/qrafty.js":
/*!***********************!*\
  !*** ./src/qrafty.js ***!
  \***********************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _qrafty_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./qrafty-common */ \"./src/qrafty-common.js\");\n/* harmony import */ var _core_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/loader */ \"./src/core/loader.js\");\n/* harmony import */ var _inputs_dom_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./inputs/dom-events */ \"./src/inputs/dom-events.js\");\n/* harmony import */ var _graphics_layers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./graphics/layers */ \"./src/graphics/layers.js\");\n/* harmony import */ var _graphics_canvas__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./graphics/canvas */ \"./src/graphics/canvas.js\");\n/* harmony import */ var _graphics_canvas_layer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./graphics/canvas-layer */ \"./src/graphics/canvas-layer.js\");\n/* harmony import */ var _graphics_webgl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./graphics/webgl */ \"./src/graphics/webgl.js\");\n/* harmony import */ var _graphics_webgl_layer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./graphics/webgl-layer */ \"./src/graphics/webgl-layer.js\");\n/* harmony import */ var _graphics_color__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./graphics/color */ \"./src/graphics/color.js\");\n/* harmony import */ var _graphics_dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./graphics/dom */ \"./src/graphics/dom.js\");\n/* harmony import */ var _graphics_dom_helper__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./graphics/dom-helper */ \"./src/graphics/dom-helper.js\");\n/* harmony import */ var _graphics_dom_layer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./graphics/dom-layer */ \"./src/graphics/dom-layer.js\");\n/* harmony import */ var _graphics_drawing__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./graphics/drawing */ \"./src/graphics/drawing.js\");\n/* harmony import */ var _graphics_gl_textures__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./graphics/gl-textures */ \"./src/graphics/gl-textures.js\");\n/* harmony import */ var _graphics_renderable__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./graphics/renderable */ \"./src/graphics/renderable.js\");\n/* harmony import */ var _graphics_html__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./graphics/html */ \"./src/graphics/html.js\");\n/* harmony import */ var _graphics_image__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./graphics/image */ \"./src/graphics/image.js\");\n/* harmony import */ var _graphics_particles__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./graphics/particles */ \"./src/graphics/particles.js\");\n/* harmony import */ var _graphics_sprite_animation__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./graphics/sprite-animation */ \"./src/graphics/sprite-animation.js\");\n/* harmony import */ var _graphics_sprite__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./graphics/sprite */ \"./src/graphics/sprite.js\");\n/* harmony import */ var _graphics_text__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./graphics/text */ \"./src/graphics/text.js\");\n/* harmony import */ var _graphics_viewport__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./graphics/viewport */ \"./src/graphics/viewport.js\");\n/* harmony import */ var _isometric_diamond_iso__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./isometric/diamond-iso */ \"./src/isometric/diamond-iso.js\");\n/* harmony import */ var _isometric_isometric__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./isometric/isometric */ \"./src/isometric/isometric.js\");\n/* harmony import */ var _inputs_util__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./inputs/util */ \"./src/inputs/util.js\");\n/* harmony import */ var _inputs_device__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./inputs/device */ \"./src/inputs/device.js\");\n/* harmony import */ var _inputs_keyboard__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./inputs/keyboard */ \"./src/inputs/keyboard.js\");\n/* harmony import */ var _inputs_lifecycle__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./inputs/lifecycle */ \"./src/inputs/lifecycle.js\");\n/* harmony import */ var _inputs_mouse__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./inputs/mouse */ \"./src/inputs/mouse.js\");\n/* harmony import */ var _inputs_pointer__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./inputs/pointer */ \"./src/inputs/pointer.js\");\n/* harmony import */ var _inputs_touch__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./inputs/touch */ \"./src/inputs/touch.js\");\n/* harmony import */ var _sound_sound__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./sound/sound */ \"./src/sound/sound.js\");\n/* harmony import */ var _debug_debug_layer__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./debug/debug-layer */ \"./src/debug/debug-layer.js\");\n/* harmony import */ var _aliases__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./aliases */ \"./src/aliases.js\");\n// Define common features\n//const Qrafty = import \"./qrafty-common.js\")(;\n;\n\n// Define features only available in browser environment\n\n\n\n\n// Needs to be required before any specific layers are\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Needs to be required before any specific inputs are\n\n\n\n\n\n\n\n\n\n\n\n\n// Define some aliases for renamed properties\n\n_aliases__WEBPACK_IMPORTED_MODULE_33__.default.defineAliases(_qrafty_common__WEBPACK_IMPORTED_MODULE_0__.default);\n\nif (window) {\n\twindow.Qrafty = _qrafty_common__WEBPACK_IMPORTED_MODULE_0__.default;\n\twindow.Crafty = _qrafty_common__WEBPACK_IMPORTED_MODULE_0__.default;\n}\n\n//module.exports = Qrafty;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_qrafty_common__WEBPACK_IMPORTED_MODULE_0__.default);\n\n//# sourceURL=webpack://qrafty-v2/./src/qrafty.js?");

/***/ }),

/***/ "./src/sound/sound.js":
/*!****************************!*\
  !*** ./src/sound/sound.js ***!
  \****************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\nconst document = window.document;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.audio\n     * @category Audio\n     * @kind CoreObject\n     *\n     * Add sound files and play them. Chooses best format for browser support.\n     * Due to the nature of HTML5 audio, three types of audio files will be\n     * required for cross-browser capabilities. These formats are MP3, Ogg and WAV.\n     * When sound was not muted on before pause, sound will be unmuted after unpause.\n     * When sound is muted Qrafty.pause() does not have any effect on sound\n     *\n     * The maximum number of sounds that can be played simultaneously is defined by Qrafty.audio.maxChannels.  The default value is 7.\n     */\n\taudio: {\n\n\t\tsounds: {},\n\t\tsupported: null,\n\t\tcodecs: { // Chart from jPlayer\n\t\t\togg: \"audio/ogg; codecs=\\\"vorbis\\\"\", //OGG\n\t\t\twav: \"audio/wav; codecs=\\\"1\\\"\", // PCM\n\t\t\twebma: \"audio/webm; codecs=\\\"vorbis\\\"\", // WEBM\n\t\t\tmp3: \"audio/mpeg; codecs=\\\"mp3\\\"\", //MP3\n\t\t\tm4a: \"audio/mp4; codecs=\\\"mp4a.40.2\\\"\" // AAC / MP4\n\t\t},\n\t\tvolume: 1, //Global Volume\n\t\tmuted: false,\n\t\tpaused: false,\n\t\tplayCheck: null,\n\t\t/**\n         * Function to setup supported formats\n         **/\n\t\t_canPlay: function () {\n\t\t\tthis.supported = {};\n\t\t\t// Without support, no formats are supported\n\t\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.audio)\n\t\t\t\treturn;\n\t\t\tvar audio = this.audioElement(),\n\t\t\t\tcanplay;\n\t\t\tfor (var i in this.codecs) {\n\t\t\t\tcanplay = audio.canPlayType(this.codecs[i]);\n\t\t\t\tif (canplay !== \"\" && canplay !== \"no\") {\n\t\t\t\t\tthis.supported[i] = true;\n\t\t\t\t} else {\n\t\t\t\t\tthis.supported[i] = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\n\t\t/**@\n         * #Qrafty.audio.supports\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public this Qrafty.audio.supports(String extension)\n         * @param extension - A file extension to check audio support for\n         *\n         * Return true if the browser thinks it can play the given file type, otherwise false\n         */\n\t\tsupports: function (extension) {\n\t\t\t// Build cache of supported formats, if necessary\n\t\t\tif (this.supported === null)\n\t\t\t\tthis._canPlay();\n\n\t\t\tif (this.supported[extension])\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t},\n\n\t\t/**\n         * Function to get an Audio Element\n         **/\n\t\taudioElement: function () {\n\t\t\t//IE does not support Audio Object\n\t\t\treturn typeof Audio !== \"undefined\" ? new Audio(\"\") : document.createElement(\"audio\");\n\t\t},\n\n\t\t/**@\n         * #Qrafty.audio.create\n         * @comp Qrafty.audio\n         * @kind Method\n         * @private\n         * \n         * @sign public this Qrafty.audio.create(String id, String url)\n         * @param id - A string to refer to sounds\n         * @param url - A string pointing to the sound file\n         *\n         * Creates an audio asset with the given id and resource.  `Qrafty.audio.add` is a more flexible interface that allows cross-browser compatibility.\n         *\n         * If the sound file extension is not supported, returns false; otherwise, returns the audio asset.\n         */\n\t\tcreate: function (id, path) {\n\t\t\t//check extension, return if not supported\n\t\t\tvar ext = path.substr(path.lastIndexOf(\".\") + 1).toLowerCase();\n\t\t\tif (!this.supports(ext))\n\t\t\t\treturn false;\n\n\t\t\t//initiate the audio element\n\t\t\tvar audio = this.audioElement();\n\t\t\taudio.id = id;\n\t\t\taudio.preload = \"auto\";\n\t\t\taudio.volume = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.volume;\n\t\t\taudio.src = path;\n\n\t\t\t//create an asset and metadata for the audio element\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.asset(path, audio);\n\t\t\tthis.sounds[id] = {\n\t\t\t\tobj: audio,\n\t\t\t\tplayed: 0,\n\t\t\t\tvolume: _core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.volume\n\t\t\t};\n\t\t\treturn this.sounds[id];\n\n\t\t},\n\n\t\t/**@\n         * #Qrafty.audio.add\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public this Qrafty.audio.add(String id, String url)\n         * @param id - A string to refer to sounds\n         * @param url - A string pointing to the sound file\n         * @sign public this Qrafty.audio.add(String id, Array urls)\n         * @param urls - Array of urls pointing to different format of the same sound, selecting the first that is playable\n         * @sign public this Qrafty.audio.add(Object map)\n         * @param map - key-value pairs where the key is the `id` and the value is either a `url` or `urls`\n         *\n         * Loads a sound to be played. Due to the nature of HTML5 audio,\n         * three types of audio files will be required for cross-browser capabilities.\n         * These formats are MP3, Ogg and WAV.\n         *\n         * Passing an array of URLs will determine which format the browser can play and select it over any other.\n         *\n         * Accepts an object where the key is the audio name and\n         * either a URL or an Array of URLs (to determine which type to use).\n         *\n         * The ID you use will be how you refer to that sound when using `Qrafty.audio.play`.\n         *\n         * @example\n         * ~~~\n         * //adding audio from an object\n         * Qrafty.audio.add({\n         *   shoot: [\"sounds/shoot.wav\",\n         *           \"sounds/shoot.mp3\",\n         *           \"sounds/shoot.ogg\"]\n         * });\n         *\n         * //adding a single sound\n         * Qrafty.audio.add(\"walk\", [\n         * \"sounds/walk.mp3\",\n         * \"sounds/walk.ogg\",\n         * \"sounds/walk.wav\"\n         * ]);\n         *\n         * //only one format\n         * Qrafty.audio.add(\"jump\", \"sounds/jump.mp3\");\n         * ~~~\n         */\n\t\tadd: function (id, url) {\n\t\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.audio)\n\t\t\t\treturn;\n\n\t\t\tvar src,\n\t\t\t\ta;\n\n\t\t\tif (arguments.length === 1 && typeof id === \"object\") {\n\t\t\t\tfor (var i in id) {\n\t\t\t\t\tfor (src in id[i]) {\n\t\t\t\t\t\ta = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.create(i, id[i][src]);\n\t\t\t\t\t\tif (a){\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof id === \"string\") {\n\t\t\t\tif (typeof url === \"string\") {\n\t\t\t\t\ta = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.create(id, url);\n\t\t\t\t}\n\n\t\t\t\tif (typeof url === \"object\") {\n\t\t\t\t\tfor (src in url) {\n\t\t\t\t\t\ta = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.create(id, url[src]);\n\t\t\t\t\t\tif (a)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\treturn a;\n\t\t},\n\t\t/**@\n         * #Qrafty.audio.play\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public this Qrafty.audio.play(String id)\n         * @sign public this Qrafty.audio.play(String id, Number repeatCount)\n         * @sign public this Qrafty.audio.play(String id, Number repeatCount, Number volume)\n         * @param id - A string to refer to sounds\n         * @param repeatCount - Repeat count for the file, where -1 stands for repeat forever.\n         * @param volume - volume can be a number between 0.0 and 1.0\n         * @returns The audio element used to play the sound.  Null if the call failed due to a lack of open channels.\n         *\n         * Will play a sound previously added by using the ID that was used in `Qrafty.audio.add`.\n         * Has a default maximum of 5 channels so that the same sound can play simultaneously unless all of the channels are playing.\n\n         * *Note that the implementation of HTML5 Audio is buggy at best.*\n         *\n         * @example\n         * ~~~\n         * Qrafty.audio.play(\"walk\");\n         *\n         * //play and repeat forever\n         * Qrafty.audio.play(\"backgroundMusic\", -1);\n         * Qrafty.audio.play(\"explosion\",1,0.5); //play sound once with volume of 50%\n         * ~~~\n         */\n\t\tplay: function (id, repeat, volume) {\n\t\t\tif (repeat === 0 || !_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.audio || !this.sounds[id])\n\t\t\t\treturn;\n\t\t\tvar s = this.sounds[id];\n\t\t\tvar c = this.getOpenChannel();\n\t\t\tif (!c)\n\t\t\t\treturn null;\n\t\t\tc.id = id;\n\t\t\tc.repeat = repeat;\n\t\t\tvar a = c.obj;\n\n\n\t\t\tc.volume = s.volume = s.obj.volume = volume || _core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.volume;\n\n\t\t\ta.volume = s.volume;\n\t\t\ta.src = s.obj.src;\n\n\t\t\tif (this.muted)\n\t\t\t\ta.volume = 0;\n\t\t\ta.play();\n\t\t\ts.played++;\n\t\t\tc.onEnd = function () {\n\t\t\t\tif (s.played < c.repeat || c.repeat === -1) {\n\t\t\t\t\tif (this.currentTime)\n\t\t\t\t\t\tthis.currentTime = 0;\n\t\t\t\t\tthis.play();\n\t\t\t\t\ts.played++;\n\t\t\t\t} else {\n\t\t\t\t\tc.active = false;\n\t\t\t\t\tthis.pause();\n\t\t\t\t\tthis.removeEventListener(\"ended\", c.onEnd, true);\n\t\t\t\t\tthis.currentTime = 0;\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.trigger(\"SoundComplete\", {\n\t\t\t\t\t\tid: c.id\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t};\n\t\t\ta.addEventListener(\"ended\", c.onEnd, true);\n\n\t\t\treturn a;\n\t\t},\n\n\n\n\t\t/**@\n         * #Qrafty.audio.setChannels\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public this Qrafty.audio.setChannels(Number n)\n         * @param n - The maximum number of channels\n         */\n\t\tmaxChannels: 7,\n\t\tsetChannels: function (n) {\n\t\t\tthis.maxChannels = n;\n\t\t\tif (n < this.channels.length)\n\t\t\t\tthis.channels.length = n;\n\t\t},\n\n\t\tchannels: [],\n\t\t// Finds an unused audio element, marks it as in use, and return it.\n\t\tgetOpenChannel: function () {\n\t\t\tfor (var i = 0; i < this.channels.length; i++) {\n\t\t\t\tvar chan = this.channels[i];\n\t\t\t\t/*\n                   * Second test looks for stuff that's out of use,\n                   * but fallen foul of Chromium bug 280417\n                   */\n\t\t\t\tif (chan.active === false ||\n                      chan.obj.ended && chan.repeat <= this.sounds[chan.id].played) {\n\t\t\t\t\tchan.active = true;\n\t\t\t\t\treturn chan;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If necessary, create a new element, unless we've already reached the max limit\n\t\t\tif (i < this.maxChannels) {\n\t\t\t\tvar c = {\n\t\t\t\t\tobj: this.audioElement(),\n\t\t\t\t\tactive: true,\n\t\t\t\t\t// Checks that the channel is being used to play sound id\n\t\t\t\t\t_is: function (id) {\n\t\t\t\t\t\treturn this.id === id && this.active;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.channels.push(c);\n\t\t\t\treturn c;\n\t\t\t}\n\t\t\t// In that case, return null\n\t\t\treturn null;\n\t\t},\n\n\t\t/**@\n         * #Qrafty.audio.remove\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public this Qrafty.audio.remove([String id])\n         * @param id - A string to refer to sounds\n         *\n         * Will stop the sound and remove all references to the audio object allowing the browser to free the memory.\n         * If no id is given, all sounds will be removed.\n         * \n         * This function uses audio path set in Qrafty.path in order to remove sound from the assets object.\n         *\n         * @example\n         * ~~~\n         * Qrafty.audio.remove(\"walk\");\n         * ~~~\n         */\n\t\tremove: function (id) {\n\t\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.audio)\n\t\t\t\treturn;\n\n\t\t\tvar s, filename, audioFolder = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.paths().audio;\n\n\t\t\tif (!id) {\n\t\t\t\tfor (var i in this.sounds) {\n\t\t\t\t\ts = this.sounds[i];\n\t\t\t\t\tfilename = s.obj.src.split(\"/\").pop();\n\t\t\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.stop(id);\n\t\t\t\t\tdelete _core_core__WEBPACK_IMPORTED_MODULE_0__.default.assets[audioFolder + filename];\n\t\t\t\t\tdelete _core_core__WEBPACK_IMPORTED_MODULE_0__.default.assets[s.obj.src];\n\t\t\t\t\tdelete _core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.sounds[id];\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this.sounds[id])\n\t\t\t\treturn;\n\n\t\t\ts = this.sounds[id];\n\t\t\tfilename = s.obj.src.split(\"/\").pop();\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.stop(id);\n\t\t\tdelete _core_core__WEBPACK_IMPORTED_MODULE_0__.default.assets[audioFolder + filename];\n\t\t\tdelete _core_core__WEBPACK_IMPORTED_MODULE_0__.default.assets[s.obj.src];\n\t\t\tdelete _core_core__WEBPACK_IMPORTED_MODULE_0__.default.audio.sounds[id];\n\t\t},\n\t\t/**@\n         * #Qrafty.audio.stop\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public this Qrafty.audio.stop([Number ID])\n         *\n         * Stops any playing sound. if id is not set, stop all sounds which are playing\n         *\n         * @example\n         * ~~~\n         * //all sounds stopped playing now\n         * Qrafty.audio.stop();\n         *\n         * ~~~\n         */\n\t\tstop: function (id) {\n\t\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.audio)\n\t\t\t\treturn;\n\t\t\tvar c;\n\t\t\tfor (var i in this.channels) {\n\t\t\t\tc = this.channels[i];\n\t\t\t\tif ( (!id && c.active) || c._is(id) ) {\n\t\t\t\t\tc.active = false;\n\t\t\t\t\tc.obj.pause();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t},\n\t\t/**\n         * #Qrafty.audio._mute\n         * @comp Qrafty.audio\n         * @kind Method\n         * @kind private\n         * \n         * @sign public this Qrafty.audio._mute([Boolean mute])\n         *\n         * Mute or unmute every Audio instance that is playing.\n         */\n\t\t_mute: function (mute) {\n\t\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.audio)\n\t\t\t\treturn;\n\t\t\tvar c;\n\t\t\tfor (var i in this.channels) {\n\t\t\t\tc = this.channels[i];\n\t\t\t\tc.obj.volume = mute ? 0 : c.volume;\n\t\t\t}\n\t\t\tthis.muted = mute;\n\t\t},\n\t\t/**@\n         * #Qrafty.audio.toggleMute\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public this Qrafty.audio.toggleMute()\n         *\n         * Mute or unmute every Audio instance that is playing. Toggles between\n         * pausing or playing depending on the state.\n         *\n         * @example\n         * ~~~\n         * //toggle mute and unmute depending on current state\n         * Qrafty.audio.toggleMute();\n         * ~~~\n         */\n\t\ttoggleMute: function () {\n\t\t\tif (!this.muted) {\n\t\t\t\tthis._mute(true);\n\t\t\t} else {\n\t\t\t\tthis._mute(false);\n\t\t\t}\n\n\t\t},\n\t\t/**@\n         * #Qrafty.audio.mute\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public this Qrafty.audio.mute()\n         *\n         * Mute every Audio instance that is playing.\n         *\n         * @example\n         * ~~~\n         * Qrafty.audio.mute();\n         * ~~~\n         */\n\t\tmute: function () {\n\t\t\tthis._mute(true);\n\t\t},\n\t\t/**@\n         * #Qrafty.audio.unmute\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public this Qrafty.audio.unmute()\n         *\n         * Unmute every Audio instance that is playing.\n         *\n         * @example\n         * ~~~\n         * Qrafty.audio.unmute();\n         * ~~~\n         */\n\t\tunmute: function () {\n\t\t\tthis._mute(false);\n\t\t},\n\n\t\t/**@\n         * #Qrafty.audio.pause\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public this Qrafty.audio.pause(string ID)\n         * @param {string} id - The id of the audio object to pause\n         *\n         * Pause the Audio instance specified by id param.\n         *\n         * @example\n         * ~~~\n         * Qrafty.audio.pause('music');\n         * ~~~\n         *\n         */\n\t\tpause: function (id) {\n\t\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.audio || !id || !this.sounds[id])\n\t\t\t\treturn;\n\t\t\tvar c;\n\t\t\tfor (var i in this.channels) {\n\t\t\t\tc = this.channels[i];\n\t\t\t\tif (c._is(id) && !c.obj.paused)\n\t\t\t\t\tc.obj.pause();\n\t\t\t}\n\n\t\t},\n\n\t\t/**@\n         * #Qrafty.audio.unpause\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public this Qrafty.audio.unpause(string ID)\n         * @param {string} id - The id of the audio object to unpause\n         *\n         * Resume playing the Audio instance specified by id param.\n         *\n         * @example\n         * ~~~\n         * Qrafty.audio.unpause('music');\n         * ~~~\n         *\n         */\n\t\tunpause: function (id) {\n\t\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.audio || !id || !this.sounds[id])\n\t\t\t\treturn;\n\t\t\tvar c;\n\t\t\tfor (var i in this.channels) {\n\t\t\t\tc = this.channels[i];\n\t\t\t\tif (c._is(id) && c.obj.paused)\n\t\t\t\t\tc.obj.play();\n\t\t\t}\n\t\t},\n\n\t\t/**@\n         * #Qrafty.audio.togglePause\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public this Qrafty.audio.togglePause(string ID)\n         * @param {string} id - The id of the audio object to pause/\n         *\n         * Toggle the pause status of the Audio instance specified by id param.\n         *\n         * @example\n         * ~~~\n         * Qrafty.audio.togglePause('music');\n         * ~~~\n         *\n         */\n\t\ttogglePause: function (id) {\n\t\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.audio || !id || !this.sounds[id])\n\t\t\t\treturn;\n\t\t\tvar c;\n\t\t\tfor (var i in this.channels) {\n\t\t\t\tc = this.channels[i];\n\t\t\t\tif (c._is(id)) {\n\t\t\t\t\tif (c.obj.paused) {\n\t\t\t\t\t\tc.obj.play();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc.obj.pause();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**@\n         * #Qrafty.audio.isPlaying\n         * @comp Qrafty.audio\n         * @kind Method\n         * \n         * @sign public Boolean Qrafty.audio.isPlaying(string ID)\n         * @param {string} id - The id of the audio object\n         * @return a Boolean indicating whether the audio is playing or not\n         *\n         * Check if audio with the given ID is playing or not (on at least one channel).\n         *\n         * @example\n         * ~~~\n         * var isPlaying = Qrafty.audio.isPlaying('music');\n         * ~~~\n         *\n         */\n\t\tisPlaying: function(id) {\n\t\t\tif (!_core_core__WEBPACK_IMPORTED_MODULE_0__.default.support.audio)\n\t\t\t\treturn false;\n\n\t\t\tfor (var i in this.channels) {\n\t\t\t\tif (this.channels[i]._is(id))\n\t\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/sound/sound.js?");

/***/ }),

/***/ "./src/spatial/2d.js":
/*!***************************!*\
  !*** ./src/spatial/2d.js ***!
  \***************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\nvar M = Math,\n\t//Mc = M.cos,\n\t//Ms = M.sin,\n\tPI = M.PI,\n\tDEG_TO_RAD = PI / 180;\n\n/**@\n * #2D\n * @category 2D\n * @kind Component\n * \n * Component for any entity that has a position on the stage.\n * @trigger Move - when the entity has moved - { _x:Number, _y:Number, _w:Number, _h:Number } - Old position\n * @trigger Invalidate - when the entity needs to be redrawn\n * @trigger Rotate - when the entity is rotated - { rotation:Number} - Rotation in degrees\n * @trigger Reorder - when the entity's z index has changed\n * @trigger Resize - when the entity's dimensions have changed - { axis: 'w' | 'h', amount: Number }\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"2D\", {\n\t/**@\n     * #.x\n     * @comp 2D\n     * @kind Property\n     * \n     * The `x` position on the stage. When modified, will automatically be redrawn.\n     * Is actually a getter/setter so when using this value for calculations and not modifying it,\n     * use the `._x` property.\n     * @see ._setter2d\n     */\n\t_x: 0,\n\t/**@\n     * #.y\n     * @kind Property\n     * \n     * @comp 2D\n     * The `y` position on the stage. When modified, will automatically be redrawn.\n     * Is actually a getter/setter so when using this value for calculations and not modifying it,\n     * use the `._y` property.\n     * @see ._setter2d\n     */\n\t_y: 0,\n\t/**@\n     * #.w\n     * @comp 2D\n     * @kind Property\n     * \n     * The width of the entity. When modified, will automatically be redrawn.\n     * Is actually a getter/setter so when using this value for calculations and not modifying it,\n     * use the `._w` property.\n     *\n     * Changing this value is not recommended as canvas has terrible resize quality and DOM will just clip the image.\n     * @see ._setter2d\n     */\n\t_w: 0,\n\t/**@\n     * #.h\n     * @comp 2D\n     * @kind Property\n     * \n     * The height of the entity. When modified, will automatically be redrawn.\n     * Is actually a getter/setter so when using this value for calculations and not modifying it,\n     * use the `._h` property.\n     *\n     * Changing this value is not recommended as canvas has terrible resize quality and DOM will just clip the image.\n     * @see ._setter2d\n     */\n\t_h: 0,\n\n\t/**@\n     * #.z\n     * @comp 2D\n     * @kind Property\n     * \n     * The `z` index on the stage. When modified, will automatically be redrawn.\n     * Is actually a getter/setter so when using this value for calculations and not modifying it,\n     * use the `._z` property.\n     *\n     * A higher `z` value will be closer to the front of the stage. A smaller `z` value will be closer to the back.\n     * A global Z index is produced based on its `z` value as well as the GID (which entity was created first).\n     * Therefore entities will naturally maintain order depending on when it was created if same z value.\n     *\n     * `z` is required to be an integer, e.g. `z=11.2` is not allowed.\n     * @see ._attr\n     */\n\t_z: 0,\n\n\t/**@\n     * #._globalZ\n     * @comp 2D\n     * @kind Property\n     * \n     * When two entities overlap, the one with the larger `_globalZ` will be on top of the other.\n     */\n\t_globalZ: null,\n\n\t/**@\n     * #.rotation\n     * @comp 2D\n     * @kind Property\n     * \n     * The rotation state of the entity, in clockwise degrees.\n     * `this.rotation = 0` sets it to its original orientation; `this.rotation = 10`\n     * sets it to 10 degrees clockwise from its original orientation;\n     * `this.rotation = -10` sets it to 10 degrees counterclockwise from its\n     * original orientation, etc.\n     *\n     * When modified, will automatically be redrawn. Is actually a getter/setter\n     * so when using this value for calculations and not modifying it,\n     * use the `._rotation` property.\n     *\n     * `this.rotation = 0` does the same thing as `this.rotation = 360` or `720` or\n     * `-360` or `36000` etc. So you can keep increasing or decreasing the angle for continuous\n     * rotation. (Numerical errors do not occur until you get to millions of degrees.)\n     *\n     * The default is to rotate the entity around its (initial) top-left corner; use\n     * `.origin()` to change that.\n     *\n     * @see ._setter2d, .origin\n     */\n\t_rotation: 0,\n\n\t_origin: null,\n\t_mbr: null,\n\t_entry: null,\n\t_children: null,\n\t_parent: null,\n\n\t// Setup all the properties that we need to define\n\tproperties: {\n\t\tx: {\n\t\t\tset: function (v) {\n\t\t\t\tthis._setter2d(\"_x\", v);\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true\n\t\t},\n\t\t_x: {enumerable:false},\n\n\t\ty: {\n\t\t\tset: function (v) {\n\t\t\t\tthis._setter2d(\"_y\", v);\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true\n\t\t},\n\t\t_y: {enumerable:false},\n\n\t\tw: {\n\t\t\tset: function (v) {\n\t\t\t\tthis._setter2d(\"_w\", v);\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn this._w;\n\t\t\t},\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true\n\t\t},\n\t\t_w: {enumerable:false},\n\n\t\th: {\n\t\t\tset: function (v) {\n\t\t\t\tthis._setter2d(\"_h\", v);\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn this._h;\n\t\t\t},\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true\n\t\t},\n\t\t_h: {enumerable:false},\n\n\t\tz: {\n\t\t\tset: function (v) {\n\t\t\t\tthis._setter2d(\"_z\", v);\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true\n\t\t},\n\t\t_z: {enumerable:false},\n\n\t\trotation: {\n\t\t\tset: function (v) {\n\t\t\t\tthis._setter2d(\"_rotation\", v);\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn this._rotation;\n\t\t\t},\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true\n\t\t},\n\t\t_rotation: {enumerable:false},\n        \n\t\t/**@\n         * #.ox\n         * @comp 2D\n         * @kind Property\n         * \n         * The `x` position on the stage of the origin. When modified, will set the underlying `x` value of the entity.\n         * \n         * @see .origin\n         */\n\t\tox: {\n\t\t\tset: function (v) {\n\t\t\t\tvar x = v - this._origin.x;\n\t\t\t\tthis._setter2d(\"_x\", x);\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn this._x + this._origin.x;\n\t\t\t},\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true\n\t\t},\n\n\t\t/**@\n         * #.oy\n         * @comp 2D\n         * @kind Property\n         * \n         * The `y` position on the stage of the origin. When modified, will set the underlying `y` value of the entity.\n         * \n         * @see .origin\n         */\n\t\toy: {\n\t\t\tset: function (v) {\n\t\t\t\tvar y = v - this._origin.y;\n\t\t\t\tthis._setter2d(\"_y\", y);\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn this._y + this._origin.y;\n\t\t\t},\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true\n\t\t}\n\t},\n\n\tinit: function () {\n\t\tthis._globalZ = this[0];\n\t\tthis._origin = {\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t};\n\n\t\t// offsets for the basic bounding box\n\t\tthis._bx1 = 0;\n\t\tthis._bx2 = 0;\n\t\tthis._by1 = 0;\n\t\tthis._by2 = 0;\n\n\t\tthis._children = [];\n\n\t\t//insert self into the HashMap\n\t\tthis._entry = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.map.insert(this);\n        \n\n\t\t//when object changes, update HashMap\n\t\tthis.bind(\"Move\", function (e) {\n\t\t\t// Choose the largest bounding region that exists\n\t\t\tvar area = this._cbr || this._mbr || this;\n\t\t\tthis._entry.update(area);\n\t\t\t// Move children (if any) by the same amount\n\t\t\tif (this._children.length > 0) {\n\t\t\t\tthis._cascade(e);\n\t\t\t}\n\t\t});\n\n\t\tthis.bind(\"Rotate\", function (e) {\n\t\t\t// Choose the largest bounding region that exists\n\t\t\tvar old = this._cbr || this._mbr || this;\n\t\t\tthis._entry.update(old);\n\t\t\t// Rotate children (if any) by the same amount\n\t\t\tif (this._children.length > 0) {\n\t\t\t\tthis._cascadeRotation(e);\n\t\t\t}\n\t\t});\n\n\t\t//when object is removed, remove from HashMap and destroy attached children\n\t\tthis.bind(\"Remove\", function () {\n\t\t\tif (this._children) {\n\t\t\t\tfor (var i = 0; i < this._children.length; i++) {\n\t\t\t\t\t// delete the child's _parent link, or else the child will splice itself out of\n\t\t\t\t\t// this._children while destroying itself (which messes up this for-loop iteration).\n\t\t\t\t\tdelete this._children[i]._parent;\n\n\t\t\t\t\t// Destroy child if possible (It's not always possible, e.g. the polygon attached\n\t\t\t\t\t// by areaMap has no .destroy(), it will just get garbage-collected.)\n\t\t\t\t\tif (this._children[i].destroy) {\n\t\t\t\t\t\tthis._children[i].destroy();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._children = [];\n\t\t\t}\n\n\t\t\tif (this._parent) {\n\t\t\t\tthis._parent.detach(this);\n\t\t\t}\n\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.map.remove(this._entry);\n\n\t\t\tthis.detach();\n\t\t});\n\t},\n\n\tevents: {\n\t\t\"Freeze\":function(){\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.map.remove(this._entry);\n\t\t},\n\t\t\"Unfreeze\":function(){\n\t\t\tthis._entry = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.map.insert(this, this._entry);\n\t\t}\n\t}, \n\n\t/**@\n     * #.offsetBoundary\n     * @comp 2D\n     * @kind Method\n     * \n     * Extends the MBR of the entity by a specified amount.\n     * \n     * @trigger BoundaryOffset - when the MBR offset changes\n     * @sign public this .offsetBoundary(Number dx1, Number dy1, Number dx2, Number dy2)\n     * @param dx1 - Extends the MBR to the left by this amount\n     * @param dy1 - Extends the MBR upward by this amount\n     * @param dx2 - Extends the MBR to the right by this amount\n     * @param dy2 - Extends the MBR downward by this amount\n     *\n     * @sign public this .offsetBoundary(Number offset)\n     * @param offset - Extend the MBR in all directions by this amount\n     *\n     * You would most likely use this function to ensure that custom canvas rendering beyond the extent of the entity's normal bounds is not clipped.\n     */\n\toffsetBoundary: function(x1, y1, x2, y2){\n\t\tif (arguments.length === 1)\n\t\t\ty1 = x2 = y2 = x1;\n\t\tthis._bx1 = x1;\n\t\tthis._bx2 = x2;\n\t\tthis._by1 = y1;\n\t\tthis._by2 = y2;\n\t\tthis.trigger(\"BoundaryOffset\");\n\t\tthis._calculateMBR();\n\t\treturn this;\n\t},\n\n\t/**\n     * Calculates the MBR when rotated some number of radians about an origin point o.\n     * Necessary on a rotation, or a resize\n     */\n\n\t_calculateMBR: function () {\n\t\tvar ox = this._origin.x + this._x,\n\t\t\toy = this._origin.y + this._y,\n\t\t\trad = -this._rotation * DEG_TO_RAD;\n\t\t// axis-aligned (unrotated) coordinates, relative to the origin point\n\t\tvar dx1 = this._x - this._bx1 - ox,\n\t\t\tdx2 = this._x + this._w + this._bx2 - ox,\n\t\t\tdy1 = this._y - this._by1 - oy,\n\t\t\tdy2 = this._y + this._h + this._by2 - oy;\n\n\t\tvar ct = Math.cos(rad),\n\t\t\tst = Math.sin(rad);\n\t\t// Special case 90 degree rotations to prevent rounding problems\n\t\tct = (ct < 1e-10 && ct > -1e-10) ? 0 : ct;\n\t\tst = (st < 1e-10 && st > -1e-10) ? 0 : st;\n\n\t\t// Calculate the new points relative to the origin, then find the new (absolute) bounding coordinates!\n\t\tvar x0 =   dx1 * ct + dy1 * st,\n\t\t\ty0 = - dx1 * st + dy1 * ct,\n\t\t\tx1 =   dx2 * ct + dy1 * st,\n\t\t\ty1 = - dx2 * st + dy1 * ct,\n\t\t\tx2 =   dx2 * ct + dy2 * st,\n\t\t\ty2 = - dx2 * st + dy2 * ct,\n\t\t\tx3 =   dx1 * ct + dy2 * st,\n\t\t\ty3 = - dx1 * st + dy2 * ct,\n\t\t\tminx = Math.floor(Math.min(x0, x1, x2, x3) + ox),\n\t\t\tminy = Math.floor(Math.min(y0, y1, y2, y3) + oy),\n\t\t\tmaxx = Math.ceil(Math.max(x0, x1, x2, x3) + ox),\n\t\t\tmaxy = Math.ceil(Math.max(y0, y1, y2, y3) + oy);\n\t\tif (!this._mbr) {\n\t\t\tthis._mbr = {\n\t\t\t\t_x: minx,\n\t\t\t\t_y: miny,\n\t\t\t\t_w: maxx - minx,\n\t\t\t\t_h: maxy - miny\n\t\t\t};\n\t\t} else {\n\t\t\tthis._mbr._x = minx;\n\t\t\tthis._mbr._y = miny;\n\t\t\tthis._mbr._w = maxx - minx;\n\t\t\tthis._mbr._h = maxy - miny;\n\t\t}\n\n\t\t// If a collision hitbox exists AND sits outside the entity, find a bounding box for both.\n\t\t// `_cbr` contains information about a bounding circle of the hitbox. \n\t\t// The bounds of `_cbr` will be the union of the `_mbr` and the bounding box of that circle.\n\t\t// This will not be a minimal region, but since it's only used for the broad phase pass it's good enough. \n\t\t//\n\t\t// cbr is calculated by the `_checkBounds` method of the \"Collision\" component\n\t\tif (this._cbr) {\n\t\t\tvar cbr = this._cbr;\n\t\t\tvar cx = cbr.cx, cy = cbr.cy, r = cbr.r;\n\t\t\tvar cx2 = ox + (cx + this._x - ox) * ct + (cy + this._y - oy) * st;\n\t\t\tvar cy2 = oy - (cx + this._x - ox) * st + (cy + this._y - oy) * ct;\n\t\t\tcbr._x = Math.min(cx2 - r, minx);\n\t\t\tcbr._y = Math.min(cy2 - r, miny);\n\t\t\tcbr._w = Math.max(cx2 + r, maxx) - cbr._x;\n\t\t\tcbr._h = Math.max(cy2 + r, maxy) - cbr._y;\n\t\t}\n\n\t},\n\n\t/**\n     * Handle changes that need to happen on a rotation\n     */\n\t_rotate: function (v) {\n\t\t//var theta = -1 * (v % 360); //angle always between 0 and 359\n\t\tvar difference = this._rotation - v;\n\t\t// skip if there's no rotation!\n\t\tif (difference === 0)\n\t\t\treturn;\n\t\telse\n\t\t\tthis._rotation = v;\n\n\t\tthis._calculateMBR();\n\n\t\tthis.trigger(\"Rotate\", difference);\n\t},\n\n\t/**@\n     * #.area\n     * @comp 2D\n     * @kind Method\n     * \n     * @sign public Number .area(void)\n     * Calculates the area of the entity\n     */\n\tarea: function () {\n\t\treturn this._w * this._h;\n\t},\n\n\t/**@\n     * #.intersect\n     * @comp 2D\n     * @kind Method\n     * \n     * @sign public Boolean .intersect(Number x, Number y, Number w, Number h)\n     * @param x - X position of the rect\n     * @param y - Y position of the rect\n     * @param w - Width of the rect\n     * @param h - Height of the rect\n     * @sign public Boolean .intersect(Object rect)\n     * @param rect - An object that must have the `_x, _y, _w, _h` values as properties\n     *\n     * Determines if this entity intersects a rectangle.  If the entity is rotated, its MBR is used for the test.\n     */\n\tintersect: function (x, y, w, h) {\n\t\tvar rect, mbr = this._mbr || this;\n\t\tif (typeof x === \"object\") {\n\t\t\trect = x;\n\t\t} else {\n\t\t\trect = {\n\t\t\t\t_x: x,\n\t\t\t\t_y: y,\n\t\t\t\t_w: w,\n\t\t\t\t_h: h\n\t\t\t};\n\t\t}\n\n\t\treturn mbr._x < rect._x + rect._w && mbr._x + mbr._w > rect._x &&\n            mbr._y < rect._y + rect._h && mbr._y + mbr._h > rect._y;\n\t},\n\n\t/**@\n     * #.within\n     * @comp 2D\n     * @kind Method\n     * \n     * @sign public Boolean .within(Number x, Number y, Number w, Number h)\n     * @param x - X position of the rect\n     * @param y - Y position of the rect\n     * @param w - Width of the rect\n     * @param h - Height of the rect\n     * @sign public Boolean .within(Object rect)\n     * @param rect - An object that must have the `_x, _y, _w, _h` values as properties\n     *\n     * Determines if this current entity is within another rectangle.\n     */\n\twithin: function (x, y, w, h) {\n\t\tvar rect, mbr = this._mbr || this;\n\t\tif (typeof x === \"object\") {\n\t\t\trect = x;\n\t\t} else {\n\t\t\trect = {\n\t\t\t\t_x: x,\n\t\t\t\t_y: y,\n\t\t\t\t_w: w,\n\t\t\t\t_h: h\n\t\t\t};\n\t\t}\n\n\t\treturn rect._x <= mbr._x && rect._x + rect._w >= mbr._x + mbr._w &&\n            rect._y <= mbr._y && rect._y + rect._h >= mbr._y + mbr._h;\n\t},\n\n\t/**@\n     * #.contains\n     * @comp 2D\n     * @kind Method\n     * \n     * @sign public Boolean .contains(Number x, Number y, Number w, Number h)\n     * @param x - X position of the rect\n     * @param y - Y position of the rect\n     * @param w - Width of the rect\n     * @param h - Height of the rect\n     * @sign public Boolean .contains(Object rect)\n     * @param rect - An object that must have the `_x, _y, _w, _h` values as properties.\n     *\n     * Determines if the rectangle is within the current entity.  If the entity is rotated, its MBR is used for the test.\n     */\n\tcontains: function (x, y, w, h) {\n\t\tvar rect, mbr = this._mbr || this;\n\t\tif (typeof x === \"object\") {\n\t\t\trect = x;\n\t\t} else {\n\t\t\trect = {\n\t\t\t\t_x: x,\n\t\t\t\t_y: y,\n\t\t\t\t_w: w,\n\t\t\t\t_h: h\n\t\t\t};\n\t\t}\n\n\t\treturn rect._x >= mbr._x && rect._x + rect._w <= mbr._x + mbr._w &&\n            rect._y >= mbr._y && rect._y + rect._h <= mbr._y + mbr._h;\n\t},\n\n\t/**@\n     * #.pos\n     * @comp 2D\n     * @kind Method\n     * \n     * @sign public Object .pos([Object pos])\n     * @param pos - an object to use as output\n     * @returns an object with `_x`, `_y`, `_w`, and `_h` properties; if an object is passed in, it will be reused rather than creating a new object.\n     *\n     * Return an object containing a copy of this entity's bounds (`_x`, `_y`, `_w`, and `_h` values).\n     *\n     * @note The keys have an underscore prefix. This is due to the x, y, w, h properties\n     * being setters and getters that wrap the underlying properties with an underscore (_x, _y, _w, _h).\n     */\n\tpos: function (pos) {\n\t\tpos = pos || {};\n\t\tpos._x = (this._x);\n\t\tpos._y = (this._y);\n\t\tpos._w = (this._w);\n\t\tpos._h = (this._h);\n\t\treturn pos;\n\t},\n\n\t/**@\n     * #.mbr\n     * @comp 2D\n     * @kind Method\n     * \n     * @sign public Object .mbr([Object mbr])\n     * @param mbr - an object to use as output\n     * @returns an object with `_x`, `_y`, `_w`, and `_h` properties; if an object is passed in, it will be reused rather than creating a new object.\n     *\n     * Return an object containing a copy of this entity's minimum bounding rectangle.\n     * The MBR encompasses a rotated entity's bounds.\n     * If there is no rotation on the entity it will return its bounds (`.pos()`) instead.\n     *\n     * @note The keys have an underscore prefix. This is due to the x, y, w, h properties\n     * being setters and getters that wrap the underlying properties with an underscore (_x, _y, _w, _h).\n     *\n     * @see .pos\n     */\n\tmbr: function (mbr) {\n\t\tmbr = mbr || {};\n\t\tif (!this._mbr) {\n\t\t\treturn this.pos(mbr);\n\t\t} else {\n\t\t\tmbr._x = (this._mbr._x);\n\t\t\tmbr._y = (this._mbr._y);\n\t\t\tmbr._w = (this._mbr._w);\n\t\t\tmbr._h = (this._mbr._h);\n\t\t\treturn mbr;\n\t\t}\n\t},\n\n\t/**@\n     * #.isAt\n     * @comp 2D\n     * @kind Method\n     * \n     * @sign public Boolean .isAt(Number x, Number y)\n     * @param x - X position of the point\n     * @param y - Y position of the point\n     *\n     * Determines whether a point is contained by the entity. Unlike other methods,\n     * an object can't be passed. The arguments require the x and y value.\n     *\n     * The given point is tested against the first of the following that exists: a mapArea associated with \"Mouse\", the hitarea associated with \"Collision\", or the object's MBR.\n     */\n\tisAt: function (x, y) {\n\t\tif (this.mapArea) {\n\t\t\treturn this.mapArea.containsPoint(x, y);\n\t\t} else if (this.map) {\n\t\t\treturn this.map.containsPoint(x, y);\n\t\t}\n\t\tvar mbr = this._mbr || this;\n\t\treturn mbr._x <= x && mbr._x + mbr._w >= x &&\n            mbr._y <= y && mbr._y + mbr._h >= y;\n\t},\n\n\t/**@\n     * #.move\n     * @comp 2D\n     * @kind Method\n     * \n     * @sign public this .move(String dir, Number by)\n     * @param dir - Direction to move (n,s,e,w,ne,nw,se,sw)\n     * @param by - Amount to move in the specified direction\n     *\n     * Quick method to move the entity in a direction (n, s, e, w, ne, nw, se, sw) by an amount of pixels.\n     */\n\tmove: function (dir, by) {\n\t\tif (dir.charAt(0) === \"n\") this.y -= by;\n\t\tif (dir.charAt(0) === \"s\") this.y += by;\n\t\tif (dir === \"e\" || dir.charAt(1) === \"e\") this.x += by;\n\t\tif (dir === \"w\" || dir.charAt(1) === \"w\") this.x -= by;\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.shift\n     * @comp 2D\n     * @kind Method\n     * \n     * @sign public this .shift(Number x, Number y, Number w, Number h)\n     * @param x - Amount to move X\n     * @param y - Amount to move Y\n     * @param w - Amount to widen\n     * @param h - Amount to increase height\n     *\n     * Shift or move the entity by an amount. Use negative values\n     * for an opposite direction.\n     */\n\tshift: function (x, y, w, h) {\n\t\tif (x || y) this._setPosition(this._x + x, this._y + y);\n\t\tif (w) this.w += w;\n\t\tif (h) this.h += h;\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #._cascade\n     * @comp 2D\n     * @kind Method\n     * @private\n     * \n     * @sign public void ._cascade(e)\n     * @param e - An object describing the motion\n     *\n     * Move the entity's children according to a certain motion.\n     * This method is part of a function bound to \"Move\": It is used\n     * internally for ensuring that when a parent moves, the child also\n     * moves in the same way.\n     */\n\t_cascade: function (e) {\n\t\tif (!e) return; //no change in position\n\t\tvar i = 0,\n\t\t\tchildren = this._children,\n\t\t\tl = children.length,\n\t\t\tobj;\n\n\t\t//use current position\n\t\tvar dx = this._x - e._x,\n\t\t\tdy = this._y - e._y,\n\t\t\tdw = this._w - e._w,\n\t\t\tdh = this._h - e._h;\n\n\t\tfor (; i < l; ++i) {\n\t\t\tobj = children[i];\n\t\t\tif (obj.__frozen) continue;\n\t\t\tobj.shift(dx, dy, dw, dh);\n\t\t}\n        \n\t},\n    \n\t/**@\n     * #._cascadeRotation\n     * @comp 2D\n     * @kind Method\n     * @private\n     * \n     * @sign public void ._cascade(deg)\n     * @param deg - The amount of rotation in degrees\n     *\n     * Move the entity's children the specified amount\n     * This method is part of a function bound to \"Move\": It is used\n     * internally for ensuring that when a parent moves, the child also\n     * moves in the same way.\n     */\n\t_cascadeRotation: function(deg) {\n\t\tif (!deg) return;\n\t\tvar i = 0,\n\t\t\tchildren = this._children,\n\t\t\tl = children.length,\n\t\t\tobj;\n\t\t// precalculate rotation info\n\t\tvar drad = deg * DEG_TO_RAD;\n\t\tvar cos = Math.cos(drad);\n\t\tvar sin = Math.sin(drad);\n\t\t// Avoid some rounding problems\n\t\tcos = (-1e-10 < cos && cos < 1e-10) ? 0 : cos;\n\t\tsin = (-1e-10 < sin && sin < 1e-10) ? 0 : sin;\n\t\tvar ox = this._origin.x + this._x;\n\t\tvar oy = this._origin.y + this._y;\n\n\t\tfor (; i < l; ++i) {\n\t\t\tobj = children[i];\n\t\t\tif (obj.__frozen) continue;\n\t\t\tif (\"rotate\" in obj) obj.rotate(deg, ox, oy, cos, sin);\n\t\t}\n\t},\n\n\t/**@\n     * #.attach\n     * @comp 2D\n     * @kind Method\n     * \n     * @sign public this .attach(Entity obj[, .., Entity objN])\n     * @param obj - Child entity(s) to attach\n     *\n     * Sets one or more entities to be children, with the current entity (`this`)\n     * as the parent. When the parent moves or rotates, its children move or\n     * rotate by the same amount. (But not vice-versa: If you move a child, it\n     * will not move the parent.) When the parent is destroyed, its children are\n     * destroyed.\n     *\n     * For any entity, `this._children` is the array of its children entity\n     * objects (if any), and `this._parent` is its parent entity object (if any).\n     *\n     * As many objects as wanted can be attached, and a hierarchy of objects is\n     * possible by attaching.\n     */\n\tattach: function () {\n\t\tvar i = 0,\n\t\t\targ = arguments,\n\t\t\tl = arguments.length,\n\t\t\tobj;\n\t\tfor (; i < l; ++i) {\n\t\t\tobj = arg[i];\n\t\t\tif (obj._parent) {\n\t\t\t\tobj._parent.detach(obj);\n\t\t\t}\n\t\t\tobj._parent = this;\n\t\t\tthis._children.push(obj);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.detach\n     * @comp 2D\n     * @kind Method\n     * \n     * @sign public this .detach([Entity obj])\n     * @param obj - The entity to detach. Left blank will remove all attached entities\n     *\n     * Stop an entity from following the current entity. Passing no arguments will stop\n     * every entity attached.\n     */\n\tdetach: function (obj) {\n\t\tvar i;\n\t\t//if nothing passed, remove all attached objects\n\t\tif (!obj) {\n\t\t\tfor (i = 0; i < this._children.length; i++) {\n\t\t\t\tthis._children[i]._parent = null;\n\t\t\t}\n\t\t\tthis._children = [];\n\t\t\treturn this;\n\t\t}\n\n\t\t//if obj passed, find the handler and unbind\n\t\tfor (i = 0; i < this._children.length; i++) {\n\t\t\tif (this._children[i] === obj) {\n\t\t\t\tthis._children.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\tobj._parent = null;\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.origin\n     * @comp 2D\n     * @kind Method\n     * \n     * @sign public this .origin(Number x, Number y)\n     * @param x - Pixel value of origin offset on the X axis\n     * @param y - Pixel value of origin offset on the Y axis\n     *\n     * @sign public this .origin(String offset)\n     * @param offset - Alignment identifier, which is a combination of center, top, bottom, middle, left and right\n     *\n     * Set the origin point of an entity for it to rotate around.\n     * \n     * The properties `ox` and `oy` map to the coordinates of the origin on the stage; setting them moves the entity.\n     * In contrast, this method sets the origin relative to the entity itself.\n     *\n     * @triggers OriginChanged -- after the new origin is assigned\n     * \n     * @example\n     * ~~~\n     * this.origin(\"top left\")\n     * this.origin(\"center\")\n     * this.origin(\"bottom right\")\n     * this.origin(\"middle right\")\n     * ~~~\n     *\n     * The origin should be set before changing the `rotation`,\n     * since it does not apply retroactively.\n     * Additionally, setting the origin via an alignment identifier works only\n     * after the entity's dimensions have been set.\n     * These points are shown in the following example:\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D\")\n     *       .attr({w: 100, h: 100})\n     *       .origin('center')\n     *       .attr({x: 25, y: 25, rotation: 180});\n     * ~~~\n     *\n     * @see .rotation, .ox, .oy\n     */\n\torigin: function (x, y) {\n\t\t//text based origin\n\t\tif (typeof x === \"string\") {\n\t\t\tif (x === \"centre\" || x === \"center\" || x.indexOf(\" \") === -1) {\n\t\t\t\tx = this._w / 2;\n\t\t\t\ty = this._h / 2;\n\t\t\t} else {\n\t\t\t\tvar cmd = x.split(\" \");\n\t\t\t\tif (cmd[0] === \"top\") y = 0;\n\t\t\t\telse if (cmd[0] === \"bottom\") y = this._h;\n\t\t\t\telse if (cmd[0] === \"middle\" || cmd[1] === \"center\" || cmd[1] === \"centre\") y = this._h / 2;\n\n\t\t\t\tif (cmd[1] === \"center\" || cmd[1] === \"centre\" || cmd[1] === \"middle\") x = this._w / 2;\n\t\t\t\telse if (cmd[1] === \"left\") x = 0;\n\t\t\t\telse if (cmd[1] === \"right\") x = this._w;\n\t\t\t}\n\t\t}\n\n\t\tthis._origin.x = x;\n\t\tthis._origin.y = y;\n\t\tthis.trigger(\"OriginChanged\");\n\t\treturn this;\n\t},\n\n\t/**\n     * Method for rotation rather than through a setter\n     * \n     * Pass in degree amount, origin coordinate and precalculated cos/sin\n     */\n\trotate: function (deg, ox, oy, cos, sin) {\n\t\tvar x2, y2;\n\t\tx2 =  (this._x + this._origin.x - ox) * cos + (this._y + this._origin.y - oy) * sin + (ox - this._origin.x);\n\t\ty2 =  (this._y + this._origin.y - oy) * cos - (this._x + this._origin.x - ox) * sin + (oy - this._origin.y);\n\t\tthis._setter2d(\"_rotation\", this._rotation - deg);\n\t\tthis._setter2d(\"_x\", x2 );\n\t\tthis._setter2d(\"_y\", y2 );\n\t},\n\n\t// A separate setter for the common case of moving an entity along both axes\n\t_setPosition: function(x, y) {\n\t\tif (x === this._x && y === this._y) return;\n\t\tvar old = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.rectManager._pool.copy(this);\n\t\tvar mbr = this._mbr;\n\t\tif (mbr) {\n\t\t\tmbr._x -= this._x - x;\n\t\t\tmbr._y -= this._y - y;\n\t\t\t// cbr is a non-minimal bounding rectangle that contains both hitbox and mbr\n\t\t\t// It will exist only when the collision hitbox sits outside the entity\n\t\t\tif (this._cbr){\n\t\t\t\tthis._cbr._x -= this._x - x;\n\t\t\t\tthis._cbr._y -= this._y - y;\n\t\t\t}\n\t\t}\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis.trigger(\"Move\", old);\n\t\tthis.trigger(\"Invalidate\");\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.rectManager._pool.recycle(old);\n\t},\n\n\t// This is a setter method for all 2D properties including\n\t// x, y, w, h, and rotation.\n\t_setter2d: function (name, value) {\n\t\t// Return if there is no change\n\t\tif (this[name] === value) {\n\t\t\treturn;\n\t\t}\n\t\t//keep a reference of the old positions\n\t\tvar old = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.rectManager._pool.copy(this);\n\n\t\tvar mbr;\n\t\t//if rotation, use the rotate method\n\t\tif (name === \"_rotation\") {\n\t\t\tthis._rotate(value); // _rotate triggers \"Rotate\"\n\t\t\t//set the global Z and trigger reorder just in case\n\t\t} else if (name === \"_x\" || name === \"_y\") {\n\t\t\t// mbr is the minimal bounding rectangle of the entity\n\t\t\tmbr = this._mbr;\n\t\t\tif (mbr) {\n\t\t\t\tmbr[name] -= this[name] - value;\n\t\t\t\t// cbr is a non-minimal bounding rectangle that contains both hitbox and mbr\n\t\t\t\t// It will exist only when the collision hitbox sits outside the entity\n\t\t\t\tif (this._cbr){\n\t\t\t\t\tthis._cbr[name] -= this[name] - value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis[name] = value;\n\n\t\t\tthis.trigger(\"Move\", old);\n\n\t\t} else if (name === \"_h\" || name === \"_w\") {\n\t\t\tmbr = this._mbr;\n\n\t\t\tvar oldValue = this[name];\n\t\t\tthis[name] = value;\n\t\t\tif (mbr) {\n\t\t\t\tthis._calculateMBR();\n\t\t\t}\n\t\t\tif (name === \"_w\") {\n\t\t\t\tthis.trigger(\"Resize\", {\n\t\t\t\t\taxis: \"w\",\n\t\t\t\t\tamount: value - oldValue\n\t\t\t\t});\n\t\t\t} else if (name === \"_h\") {\n\t\t\t\tthis.trigger(\"Resize\", {\n\t\t\t\t\taxis: \"h\",\n\t\t\t\t\tamount: value - oldValue\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.trigger(\"Move\", old);\n\n\t\t} else if (name === \"_z\") {\n\t\t\tvar intValue = value << 0;\n\t\t\tvalue = value === intValue ? intValue : intValue+1;\n\t\t\tthis._globalZ = value * 100000 + this[0]; //magic number 10^5 is the max num of entities\n\t\t\tthis[name] = value;\n\t\t\tthis.trigger(\"Reorder\");\n\t\t}\n\n\t\t//everything will assume the value\n\t\tthis[name] = value;\n\n\t\t// flag for redraw\n\t\tthis.trigger(\"Invalidate\");\n\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.rectManager._pool.recycle(old);\n\t}\n});\n\n\n\n\n/**@\n * #Qrafty.polygon\n * @category 2D\n * @kind Class\n *\n * The constructor for a polygon object used for hitboxes and click maps. Takes a set of points as an\n * argument, giving alternately the x and y coordinates of the polygon's vertices in order.\n *\n * For a polygon of `n` edges exactly `n` vertex coordinate pairs should be passed to the constructor.\n * It is advised to pass the vertices in a clockwise order.\n *\n * The constructor accepts the coordinates as either a single array or as a set of individual arguments.\n * If passed an array, the current implementation will use that array internally -- do not attempt to reuse it.\n *\n * When creating a polygon for an entity, each point should be offset or relative from the entities `x` and `y`\n * (don't include the absolute values as it will automatically calculate this).\n *\n *\n * @example\n * Two ways to create a triangle with vertices at `(50, 0)`, `(100, 100)` and `(0, 100)`.\n * ~~~\n * new Qrafty.polygon([50, 0, 100, 100, 0, 100]);\n * new Qrafty.polygon(50, 0, 100, 100, 0, 100);\n * ~~~\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.polygon = function (poly) {\n\tif (arguments.length > 1) {\n\t\tpoly = Array.prototype.slice.call(arguments, 0);\n\t}\n\tthis.points = poly;\n};\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.polygon.prototype = {\n\t/**@\n     * #.containsPoint\n     * @comp Qrafty.polygon\n     * @kind Method\n     * \n     * @sign public Boolean .containsPoint(Number x, Number y)\n     * @param x - X position of the point\n     * @param y - Y position of the point\n     *\n     * Method is used to determine if a given point is contained by the polygon.\n     *\n     * @example\n     * ~~~\n     * var poly = new Qrafty.polygon([50, 0, 100, 100, 0, 100]);\n     * poly.containsPoint(50, 50); //TRUE\n     * poly.containsPoint(0, 0); //FALSE\n     * ~~~\n     */\n\tcontainsPoint: function (x, y) {\n\t\tvar p = this.points, l = p.length/2,\n\t\t\ti, j, c = false;\n\n\t\tfor (i = 0, j = l - 1; i < l; j = i++) {\n\t\t\tif (((p[2*i+1] > y) !== (p[2*j+1] > y)) && (x < (p[2*j] - p[2*i]) * (y - p[2*i+1]) / (p[2*j+1] - p[2*i+1]) + p[2*i])) {\n\t\t\t\tc = !c;\n\t\t\t}\n\t\t}\n\n\t\treturn c;\n\t},\n\n\t/**@\n     * #.shift\n     * @comp Qrafty.polygon\n     * @kind Method\n     * \n     * @sign public void .shift(Number x, Number y)\n     * @param x - Amount to shift the `x` axis\n     * @param y - Amount to shift the `y` axis\n     *\n     * Shifts every single point in the polygon by the specified amount.\n     *\n     * @example\n     * ~~~\n     * var poly = new Qrafty.polygon([50, 0, 100, 100, 0, 100]);\n     * poly.shift(5,5);\n     * //[[55, 5, 105, 5, 5, 105];\n     * ~~~\n     */\n\tshift: function (x, y) {\n\t\tvar i = 0, p =this.points,\n\t\t\tl = p.length;\n\t\tfor (; i < l; i+=2) {\n\t\t\tp[i] += x;\n\t\t\tp[i+1] += y;\n\t\t}\n\t},\n\n\t/**@\n     * #.clone\n     * @comp Qrafty.polygon\n     * @kind Method\n     * \n     * @sign public void .clone()\n     * \n     * Returns a clone of the polygon.\n     *\n     * @example\n     * ~~~\n     * var poly = new Qrafty.polygon([50, 0, 100, 100, 0, 100]);\n     * var shiftedpoly = poly.clone().shift(5,5);\n     * //[55, 5, 105, 5, 5, 105], but the original polygon is unchanged\n     * ~~~\n     */\n\tclone: function() {\n\t\t//Shallow clone, but points should be full of Number primitives that are copied\n\t\treturn new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.polygon(this.points.slice(0));\n\t},\n\n\trotate: function (deg, ox, oy, cos, sin) {\n\t\tvar i = 0, p = this.points,\n\t\t\tl = p.length,\n\t\t\tx, y;\n\n\t\tfor (; i < l; i+=2) {\n\n\t\t\tx = ox + (p[i] - ox) * cos + (p[i+1] - oy) * sin;\n\t\t\ty = oy - (p[i] - ox) * sin + (p[i+1] - oy) * cos;\n\n\t\t\tp[i] = x;\n\t\t\tp[i+1] = y;\n\t\t}\n\t},\n\n\t/**@\n     * #.intersectRay\n     * @comp Qrafty.polygon\n     * @kind Method\n     * \n     * @sign public Number .intersectRay(Object origin, Object direction)\n     * @param origin - the point of origin from which the ray will be cast. The object must contain the properties `_x` and `_y`.\n     * @param direction - the direction the ray will be cast. It must be normalized. The object must contain the properties `x` and `y`.\n     * @returns a Number indicating the distance from the ray's origin to the closest intersection point of the polygon.\n     *          Returns `Infinity` if there is no intersection.\n     *\n     * Find the distance to the closest intersection point of the supplied ray with any of this polygon's segments.\n     *\n     * @example\n     * ~~~\n     * var poly = new Qrafty.polygon([0,0, 50,0, 50,50, 0,50]);\n     *\n     * var origin = {_x: -1, _y: 25};\n     * var direction = new Qrafty.math.Vector2D(1, 0).normalize();;\n     *\n     * var distance = poly.intersectRay(origin, direction);\n     * Qrafty.log('Distance from origin to closest intersection point', distance); // logs '1'\n     * ~~~\n     */\n\n\t// Note that for the algorithm to work, the points of the polygon have to be defined\n\t// either clock-wise or counter-clock-wise\n\t//\n\t// Segment-segment intersection is described here: http://stackoverflow.com/a/565282/3041008\n\t// see dot projection: http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/vector/#Projection\n\t//\n\t// origin = {_x, _y}\n\t// direction = {x, y}, must be normalized\n\t// edge = end - start (of segment)\n\t//\n\t//\n\t// # Segment - segment intersection equation\n\t// origin + d * direction = start + e * edge\n\t//\n\t// ## Solving for d\n\t// (origin + d * direction) x edge = (start + e * edge) x edge\n\t// edge x edge == 0\n\t// d = (start − origin) × edge / (direction × edge)\n\t// d_nominator = (start - origin) x edge =\n\t//      (start.x - origin.x, start.y - origin.y) x (edge.x, edge.y) =\n\t//      (start.x - origin.x) * edge.y - (start.y - origin.y) * edge.x\n\t// d_denominator = direction x edge =\n\t//      (direction.x, direction.y) x (edge.x, edge.y) =\n\t//      direction.x * edge.y - direction.y * edge.x\n\t//\n\t// ## Solving for e\n\t// (origin + d * direction) x direction = (start + e * edge) x direction\n\t// direction x direction == 0\n\t// edge factor must be in interval [0, 1]\n\t// e = (start − origin) × direction / (direction × edge)\n\t// e_nominator = (start − origin) × direction =\n\t//      (start.x - origin.x) * direction.y - (start.y - origin.y) * direction.x\n\t// e_denominator = d_denominator\n\t//\n\t//\n\t// # If segments are colinear (both nominator and denominator == 0),\n\t//    then minDistance is min(d0, d1) >= 0,\n\t//    get d0, d1 by doing dot projection onto normalized direction vector\n\t//\n\t// origin + d0*direction = start\n\t// d0*direction = (start - origin)\n\t// -> d0 = (start - origin) • direction =\n\t//      (start.x - origin.x, start.y - origin.y) • (direction.x, direction.y) =\n\t//      (start.x - origin.x) * direction.x + (start.y - origin.y) * direction.y\n\t//\n\t// origin + d1*direction = end\n\t// d1*direction = end - origin\n\t// -> d1 = (end - origin) • direction =\n\t//      (end.x - origin.x, end.y - origin.y) • (direction.x, direction.y) =\n\t//      (end.x - origin.x) * direction.x + (end.y - origin.y) * direction.y\n\tintersectRay: function (origin, direction) {\n\t\tvar points = this.points,\n\t\t\tminDistance = Infinity;\n\t\tvar d, d_nom,\n\t\t\te, e_nom,\n\t\t\tdenom;\n\n\t\tvar originX = origin._x, directionX = direction.x,\n\t\t\toriginY = origin._y, directionY = direction.y;\n\n\t\tvar i = 0, l = points.length;\n\t\tvar startX = points[l - 2], endX, edgeX,\n\t\t\tstartY = points[l - 1], endY, edgeY;\n\t\tfor (; i < l; i += 2) {\n\t\t\tendX = points[i];\n\t\t\tendY = points[i+1];\n\t\t\tedgeX = endX - startX;\n\t\t\tedgeY = endY - startY;\n\n\t\t\td_nom = (startX - originX) * edgeY      - (startY - originY) * edgeX;\n\t\t\te_nom = (startX - originX) * directionY - (startY - originY) * directionX;\n\t\t\tdenom = directionX * edgeY - directionY * edgeX;\n\n\t\t\tif (denom !== 0) {\n\t\t\t\td = d_nom / denom;\n\t\t\t\te = e_nom / denom;\n\n\t\t\t\tif (e >= 0 && e <= 1 && d >= 0 && d < minDistance)\n\t\t\t\t\tminDistance = d;\n\n\t\t\t} else if (d_nom === 0 || e_nom === 0) {\n\n\t\t\t\td = (startX - originX) * directionX + (startY - originY) * directionY;\n\t\t\t\tif (d >= 0 && d < minDistance)\n\t\t\t\t\tminDistance = d;\n\n\t\t\t\td = (endX - originX) * directionX + (endY - originY) * directionY;\n\t\t\t\tif (d >= 0 && d < minDistance)\n\t\t\t\t\tminDistance = d;\n\t\t\t}\n\n\t\t\tstartX = endX;\n\t\t\tstartY = endY;\n\t\t}\n\n\t\treturn minDistance;\n\t}\n};\n\n/**@\n * #Qrafty.circle\n * @category 2D\n * @kind Class\n * \n * Circle object used for hitboxes and click maps. Must pass a `x`, a `y` and a `radius` value.\n *\n *@example\n * ~~~\n * var centerX = 5,\n *     centerY = 10,\n *     radius = 25;\n *\n * new Qrafty.circle(centerX, centerY, radius);\n * ~~~\n *\n * When creating a circle for an entity, each point should be offset or relative from the entities `x` and `y`\n * (don't include the absolute values as it will automatically calculate this).\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.circle = function (x, y, radius) {\n\tthis.x = x;\n\tthis.y = y;\n\tthis.radius = radius;\n\n\t// Creates an octagon that approximate the circle for backward compatibility.\n\tthis.points = [];\n\tvar theta;\n\n\tfor (var i = 0; i < 16; i+=2) {\n\t\ttheta = i * Math.PI / 8;\n\t\tthis.points[i] = this.x + (Math.sin(theta) * radius);\n\t\tthis.points[i+1] = this.y + (Math.cos(theta) * radius);\n\t}\n};\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.circle.prototype = {\n\t/**@\n     * #.containsPoint\n     * @comp Qrafty.circle\n     * @kind Method\n     * \n     * @sign public Boolean .containsPoint(Number x, Number y)\n     * @param x - X position of the point\n     * @param y - Y position of the point\n     *\n     * Method is used to determine if a given point is contained by the circle.\n     *\n     * @example\n     * ~~~\n     * var circle = new Qrafty.circle(0, 0, 10);\n     * circle.containsPoint(0, 0); //TRUE\n     * circle.containsPoint(50, 50); //FALSE\n     * ~~~\n     */\n\tcontainsPoint: function (x, y) {\n\t\tvar radius = this.radius,\n\t\t\tdeltaX = this.x - x,\n\t\t\tdeltaY = this.y - y;\n\n\t\treturn (deltaX * deltaX + deltaY * deltaY) < (radius * radius);\n\t},\n\n\t/**@\n     * #.shift\n     * @comp Qrafty.circle\n     * @kind Method\n     * \n     * @sign public void .shift(Number x, Number y)\n     * @param x - Amount to shift the `x` axis\n     * @param y - Amount to shift the `y` axis\n     *\n     * Shifts the circle by the specified amount.\n     *\n     * @example\n     * ~~~\n     * var circle = new Qrafty.circle(0, 0, 10);\n     * circle.shift(5,5);\n     * //{x: 5, y: 5, radius: 10};\n     * ~~~\n     */\n\tshift: function (x, y) {\n\t\tthis.x += x;\n\t\tthis.y += y;\n\n\t\tvar i = 0, p = this.points,\n\t\t\tl = p.length;\n\t\tfor (; i < l; i+=2) {\n\t\t\tp[i] += x;\n\t\t\tp[i+1] += y;\n\t\t}\n\t},\n\n\trotate: function () {\n\t\t// We are a circle, we don't have to rotate :)\n\t}\n};\n\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.matrix = function (m) {\n\tthis.mtx = m;\n\tthis.width = m[0].length;\n\tthis.height = m.length;\n};\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.matrix.prototype = {\n\tx: function (other) {\n\t\tif (this.width !== other.height) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar result = [];\n\t\tfor (var i = 0; i < this.height; i++) {\n\t\t\tresult[i] = [];\n\t\t\tfor (var j = 0; j < other.width; j++) {\n\t\t\t\tvar sum = 0;\n\t\t\t\tfor (var k = 0; k < this.width; k++) {\n\t\t\t\t\tsum += this.mtx[i][k] * other.mtx[k][j];\n\t\t\t\t}\n\t\t\t\tresult[i][j] = sum;\n\t\t\t}\n\t\t}\n\t\treturn new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.matrix(result);\n\t},\n\n\n\te: function (row, col) {\n\t\t//test if out of bounds\n\t\tif (row < 1 || row > this.mtx.length || col < 1 || col > this.mtx[0].length) return null;\n\t\treturn this.mtx[row - 1][col - 1];\n\t}\n};\n\n\n//# sourceURL=webpack://qrafty-v2/./src/spatial/2d.js?");

/***/ }),

/***/ "./src/spatial/collision.js":
/*!**********************************!*\
  !*** ./src/spatial/collision.js ***!
  \**********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\nconst DEG_TO_RAD = Math.PI / 180, EPSILON = 1e-6;\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/**@\n     * #Qrafty.raycast\n     * @category 2D\n     * @kind Method\n     * \n     * @sign public Array .raycast(Object origin, Object direction[, Number maxDistance][, String comp][, Boolean sort])\n     * @param origin - the point of origin from which the ray will be cast. The object must contain the properties `_x` and `_y`.\n     * @param direction - the direction the ray will be cast. It must be normalized. The object must contain the properties `x` and `y`.\n     * @param maxDistance - the maximum distance up to which intersections will be found.\n     *                      This is an optional parameter defaulting to `Infinity`.\n     *                      If it's `Infinity` find all intersections.\n     *                      If it's negative find only first intersection (if there is one).\n     *                      If it's positive find all intersections up to that distance.\n     * @param comp - check for intersection with entities that have this component applied to them.\n     *               This is an optional parameter that is disabled by default.\n     * @param sort - whether to sort the returned array by increasing distance.\n     *               May be disabled to slightly improve performance if sorted results are not needed.\n     *               Defaults to `true`.\n     * @returns an array of raycast-results that may be empty, if no intersection has been found.\n     *          Otherwise, each raycast-result looks like `{obj: Entity, distance: Number, x: Number, y: Number}`,\n     *          describing which `obj` entity has intersected the ray at intersection point `x`,`y`, `distance` px away from `origin`.\n     *\n     * Cast a ray from its `origin` in the `direction` and\n     * report entities that intersect with it, given the parameter constraints.\n     *\n     * Raycasting only reports entities, that have the `Collision` component applied to them.\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, Collision\")\n     *       .setName('First entity')\n     *       .attr({x: 0, y: 0, w: 10, h: 10});\n     *\n     * Qrafty.e(\"2D, Collision\")\n     *       .setName('Second entity')\n     *       .attr({x: 20, y: 20, w: 10, h: 10});\n     *\n     * var origin = {_x: -25, _y: -25};\n     * var direction = new Qrafty.math.Vector2D(1, 1).normalize();\n     *\n     * var results = Qrafty.raycast(origin, direction, -1); // find only 1st intersection\n     * Qrafty.log('Intersections found', results.length); // logs '1'\n     *\n     * var result = results[0];\n     * Qrafty.log('1st intersection:');\n     * Qrafty.log('Entity name:', result.obj.getName()); // logs 'First entity'\n     * Qrafty.log('Distance from origin to intersection point', result.distance); // logs '25 * Math.sqrt(2)'\n     * Qrafty.log('Intersection point:', result.x, result.y); // logs '0' '0'\n     * ~~~\n     *\n     * @see Qrafty.polygon#.intersectRay\n     * @see Qrafty.map#Qrafty.map.traverseRay\n     */\n\n\t// origin = {_x, _y}\n\t// direction = {x, y}, must be normalized\n\t//\n\t// Add approximate ray intersection with bounding rectangle,\n\t// before doing exact ray intersection if needed in future.\n\t// https://gist.github.com/mucaho/77846e9fc0cd3c8b600c\n\traycast: function(origin, direction) {\n\t\t// default parameters\n\t\tvar comp = \"obj\",\n\t\t\tmaxDistance = Infinity,\n\t\t\tsort = true;\n\t\t// optional arguments\n\t\tvar argument, type;\n\t\tfor (var i = 2, l = arguments.length; i < l; ++i) {\n\t\t\targument = arguments[i];\n\t\t\ttype = typeof argument;\n\t\t\tif (type === \"number\") maxDistance = argument + EPSILON; // make it inclusive\n\t\t\telse if (type === \"string\") comp = argument;\n\t\t\telse if (type === \"boolean\") sort = argument;\n\t\t}\n\n\t\tvar ox = origin._x,\n\t\t\toy = origin._y,\n\t\t\tdx = direction.x,\n\t\t\tdy = direction.y;\n\n\n\t\tvar alreadyChecked = {},\n\t\t\tresults = [];\n\n\n\t\tif (maxDistance < 0) { // find first intersection\n\n\t\t\tvar closestObj = null,\n\t\t\t\tminDistance = Infinity;\n\n\t\t\t// traverse map\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.map.traverseRay(origin, direction, function(obj, previousCellDistance) {\n\t\t\t\t// check if we advanced to next cell\n\t\t\t\t//      then report closest object from previous cell\n\t\t\t\t//          if intersection point is in previous cell\n\t\t\t\tif (closestObj && minDistance < previousCellDistance) {\n\t\t\t\t\tresults.push({\n\t\t\t\t\t\tobj: closestObj,\n\t\t\t\t\t\tdistance: minDistance,\n\t\t\t\t\t\tx: ox + minDistance * dx,\n\t\t\t\t\t\ty: oy + minDistance * dy\n\t\t\t\t\t});\n\t\t\t\t\tclosestObj = null;\n\t\t\t\t\tminDistance = Infinity;\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// object must contain polygon hitbox, the specified component and must not already be checked\n\t\t\t\tif (!obj.map || !obj.__c[comp] || alreadyChecked[obj[0]]) return;\n\t\t\t\talreadyChecked[obj[0]] = true;\n\n\t\t\t\t// do exact intersection test\n\t\t\t\tvar distance = obj.map.intersectRay(origin, direction);\n\t\t\t\tif (distance < minDistance) {\n\t\t\t\t\tclosestObj = obj;\n\t\t\t\t\tminDistance = distance;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// in case traversal ended and we haven't yet pushed nearest intersecting object\n\t\t\tif (closestObj) {\n\t\t\t\tresults.push({\n\t\t\t\t\tobj: closestObj,\n\t\t\t\t\tdistance: minDistance,\n\t\t\t\t\tx: ox + minDistance * dx,\n\t\t\t\t\ty: oy + minDistance * dy\n\t\t\t\t});\n\t\t\t}\n\n\t\t} else { // find intersections up to max distance\n\n\t\t\t// traverse map\n\t\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.map.traverseRay(origin, direction, function(obj, previousCellDistance) {\n\t\t\t\t// check if we advanced to next cell\n\t\t\t\t//      then cancel traversal if previousCellDistance > maxDistance\n\t\t\t\tif (previousCellDistance > maxDistance) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// object must contain polygon hitbox, the specified component and must not already be checked\n\t\t\t\tif (!obj.map || !obj.__c[comp] || alreadyChecked[obj[0]]) return;\n\t\t\t\talreadyChecked[obj[0]] = true;\n\n\t\t\t\t// do exact intersection test\n\t\t\t\tvar distance = obj.map.intersectRay(origin, direction);\n\t\t\t\tif (distance < maxDistance) {\n\t\t\t\t\tresults.push({\n\t\t\t\t\t\tobj: obj,\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\tx: ox + distance * dx,\n\t\t\t\t\t\ty: oy + distance * dy\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\n\t\tif (sort) results.sort(function(a, b) { return a.distance - b.distance; });\n\n\n\t\treturn results;\n\t}\n});\n\n/**@\n * #Collision\n * @category 2D\n * @kind Component\n * \n * @trigger HitOn - Triggered when collisions occur. Will not trigger again until collisions of this type cease, or an event is requested once more (using `resetHitChecks(component)`). - { hitData }\n * @trigger HitOff - Triggered when collision with a specific component type ceases - String - componentName\n *\n * Component to detect collision between any two convex polygons.\n *\n * If collision checks are registered for multiple component and collisions with\n * multiple types occur simultaniously, each collision will cause an individual\n * event to fire.\n *\n * @note All data received from events is only valid for the duration of the event's callback.\n * If you wish to preserve the data, make a copy of it.\n *\n * For a description of collision event data (hitData above), see the documentation for\n * `.hit()`.\n *\n * @see 2D\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Collision\", {\n\tinit: async function () {\n\t\tawait this.requires(\"2D\");\n\t\tthis._collisionData = {};\n\n\t\tthis.collision();\n\t},\n\n\t// Run by Qrafty when the component is removed\n\tremove: function() {\n\t\tthis._cbr = null;\n\t\tthis.unbind(\"Resize\", this._resizeMap);\n\t\tthis.unbind(\"Resize\", this._checkBounds);\n\t},\n\n\t/**@\n     * #.collision\n     * @comp Collision\n     * @kind Method\n     *\n     * @trigger NewHitbox - when a new hitbox is assigned - Qrafty.polygon\n     *\n     * @sign public this .collision([Qrafty.polygon polygon])\n     * @param polygon - Optional Qrafty.polygon object that will act as the hit area.\n     *\n     * @sign public this .collision([Array coordinatePairs])\n     * @param coordinatePairs - Optional array of x, y coordinate pairs to generate a hit area polygon.\n     *\n     * @sign public this .collision([x1, y1,.., xN, yN])\n     * @param point# - Optional list of x, y coordinate pairs to generate a hit area polygon.\n     *\n     * Constructor that takes a polygon, an array of points or a list of points to use as the hit area,\n     * with points being relative to the object's position in its unrotated state.\n     *\n     * The hit area must be a convex shape and not concave for collision detection to work properly.\n     *\n     * If no parameter is passed, the x, y, w, h properties of the entity will be used, and the hitbox will be resized when the entity is.\n     *\n     * If a hitbox is set that is outside of the bounds of the entity itself, there will be a small performance penalty as it is tracked separately.\n     *\n     * In order for your custom hitbox to have any effect, you have to add the `Collision` component to all other entities this entity needs to collide with using this custom hitbox.\n     * On the contrary the collisions will be resolved using the default hitbox. See `.hit()` - `MBR` represents default hitbox collision, `SAT` represents custom hitbox collision.\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, Collision\").collision(\n     *     new Qrafty.polygon([50, 0,  100, 100,  0, 100])\n     * );\n     *\n     * Qrafty.e(\"2D, Collision\").collision([50, 0,  100, 100,  0, 100]);\n     *\n     * Qrafty.e(\"2D, Collision\").collision(50, 0,  100, 100,  0, 100);\n     * ~~~\n     *\n     * @see Qrafty.polygon\n     */\n\tcollision: function (polygon) {\n\t\t// Unbind anything bound to \"Resize\"\n\t\tthis.unbind(\"Resize\", this._resizeMap);\n\t\tthis.unbind(\"Resize\", this._checkBounds);\n\n\t\tif (!polygon) {\n\t\t\t// If no polygon is specified, then a polygon is created that matches the bounds of the entity\n\t\t\t// It will be adjusted on a \"Resize\" event\n\t\t\tpolygon = new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.polygon([0, 0, this._w, 0, this._w, this._h, 0, this._h]);\n\t\t\tthis.bind(\"Resize\", this._resizeMap);\n\t\t\tthis._cbr = null;\n\t\t} else {\n\t\t\t// Otherwise, we set the specified hitbox, converting from a list of arguments to a polygon if necessary\n\t\t\tif (arguments.length > 1) {\n\t\t\t\t//convert args to array to create polygon\n\t\t\t\tvar args = Array.prototype.slice.call(arguments, 0);\n\t\t\t\tpolygon = new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.polygon(args);\n\t\t\t\t// Otherwise, we set the specified hitbox, converting from an array of points to a polygon if necessary\n\t\t\t} else if (polygon.constructor === Array) {\n\t\t\t\t//Clone the array so we don't modify it for anything else that might be using it\n\t\t\t\tpolygon = new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.polygon(polygon.slice());\n\t\t\t\t// Otherwise, we set the specified hitbox\n\t\t\t} else {\n\t\t\t\t//Clone the polygon so we don't modify it for anything else that might be using it\n\t\t\t\tpolygon = polygon.clone();\n\t\t\t}\n\t\t\t// Check to see if the polygon sits outside the entity, and set _cbr appropriately\n\t\t\t// On resize, the new bounds will be checked if necessary\n\t\t\tthis._findBounds(polygon.points);\n\t\t}\n\n\t\t// If the entity is currently rotated, the points in the hitbox must also be rotated\n\t\tif (this.rotation) {\n\t\t\tpolygon.rotate(\n\t\t\t\tthis.rotation,\n\t\t\t\tthis._origin.x,\n\t\t\t\tthis._origin.y,\n\t\t\t\tMath.cos(-this.rotation * DEG_TO_RAD),\n\t\t\t\tMath.sin(-this.rotation * DEG_TO_RAD));\n\t\t}\n\n\t\t// Finally, assign the hitbox, and attach it to the \"Collision\" entity\n\t\tthis.map = polygon;\n\t\tthis.attach(this.map);\n\t\tthis.map.shift(this._x, this._y);\n\t\tthis.trigger(\"NewHitbox\", polygon);\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.cbr\n     * @comp Collision\n     * @kind Method\n     * \n     * @sign public Object .cbr([Object cbr])\n     * @param cbr - an object to use as output\n     * @returns an object with `_x`, `_y`, `_w`, and `_h` properties; if an object is passed in, it will be reused rather than creating a new object.\n     *\n     * Return an object containing a copy of this entity's collision bounding rectangle.\n     * The CBR encompasses both the entity's custom collision hitbox and its MBR.\n     * If the custom collision hitbox does not sit outside the entity it will return the entity's minimum bounding rectangle (`.mbr()`) instead.\n     *\n     * @note The keys have an underscore prefix. This is due to the x, y, w, h properties\n     * being setters and getters that wrap the underlying properties with an underscore (_x, _y, _w, _h).\n     *\n     * @see 2D#.mbr\n     */\n\tcbr: function (cbr) {\n\t\tcbr = cbr || {};\n\t\tif (!this._cbr) {\n\t\t\treturn this.mbr(cbr);\n\t\t} else {\n\t\t\tcbr._x = (this._cbr._x);\n\t\t\tcbr._y = (this._cbr._y);\n\t\t\tcbr._w = (this._cbr._w);\n\t\t\tcbr._h = (this._cbr._h);\n\t\t\treturn cbr;\n\t\t}\n\t},\n\n\t// If the hitbox is set by hand, it might extend beyond the entity.\n\t// In such a case, we need to track this separately.\n\t// This function finds a (non-minimal) bounding circle around the hitbox.\n\t//\n\t// It uses a pretty naive algorithm to do so, for more complicated options see [wikipedia](http://en.wikipedia.org/wiki/Bounding_sphere).\n\t_findBounds: function(points) {\n\t\tvar minX = Infinity, maxX = -Infinity, minY=Infinity, maxY=-Infinity;\n\t\tvar l = points.length;\n\n\t\t// Calculate the MBR of the points by finding the min/max x and y\n\t\tfor (var i=0; i<l; i+=2) {\n\t\t\tif (points[i] < minX)\n\t\t\t\tminX = points[i];\n\t\t\tif (points[i] > maxX)\n\t\t\t\tmaxX = points[i];\n\t\t\tif (points[i+1] < minY)\n\t\t\t\tminY = points[i+1];\n\t\t\tif (points[i+1] > maxY)\n\t\t\t\tmaxY = points[i+1];\n\t\t}\n\n\t\t// This describes a circle centered on the MBR of the points, with a diameter equal to its diagonal\n\t\t// It will be used to find a rough bounding box round the points, even if they've been rotated\n\t\tvar cbr = {\n\t\t\tcx: (minX + maxX) / 2,\n\t\t\tcy: (minY + maxY) / 2,\n\t\t\tr: Math.sqrt((maxX - minX)*(maxX - minX) + (maxY - minY)*(maxY - minY)) / 2\n\t\t};\n\n\t\t// We need to worry about resizing, but only if resizing could possibly change whether the hitbox is in or out of bounds\n\t\t// Thus if the upper-left corner is out of bounds, then there's no need to recheck on resize\n\t\tif (minX >= 0 && minY >= 0) {\n\t\t\tthis._checkBounds = function() {\n\t\t\t\tif (this._cbr === null && this._w < maxX || this._h < maxY) {\n\t\t\t\t\tthis._cbr = cbr;\n\t\t\t\t\tthis._calculateMBR();\n\t\t\t\t} else if (this._cbr) {\n\t\t\t\t\tthis._cbr = null;\n\t\t\t\t\tthis._calculateMBR();\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.bind(\"Resize\", this._checkBounds);\n\t\t}\n\n\t\t// If the hitbox is within the entity, _cbr is null\n\t\t// Otherwise, set it, and immediately calculate the bounding box.\n\t\tif (minX >= 0 && minY >= 0 && maxX <= this._w && maxY <= this._h) {\n\t\t\tthis._cbr = null;\n\t\t\treturn false;\n\t\t} else {\n\t\t\tthis._cbr = cbr;\n\t\t\tthis._calculateMBR();\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t// The default behavior is to match the hitbox to the entity.\n\t// This function will change the hitbox when a \"Resize\" event triggers.\n\t_resizeMap: function (e) {\n\t\tvar dx, dy, rot = this.rotation * DEG_TO_RAD,\n\t\t\tpoints = this.map.points;\n\n\t\t// Depending on the change of axis, move the corners of the rectangle appropriately\n\t\tif (e.axis === \"w\") {\n\t\t\tif (rot) {\n\t\t\t\tdx = e.amount * Math.cos(rot);\n\t\t\t\tdy = e.amount * Math.sin(rot);\n\t\t\t} else {\n\t\t\t\tdx = e.amount;\n\t\t\t\tdy = 0;\n\t\t\t}\n\n\t\t\t// \"top right\" point shifts on change of w\n\t\t\tpoints[2] += dx;\n\t\t\tpoints[3] += dy;\n\t\t} else {\n\t\t\tif (rot) {\n\t\t\t\tdy = e.amount * Math.cos(rot);\n\t\t\t\tdx = -e.amount * Math.sin(rot);\n\t\t\t} else {\n\t\t\t\tdx = 0;\n\t\t\t\tdy = e.amount;\n\t\t\t}\n\n\t\t\t// \"bottom left\" point shifts on change of h\n\t\t\tpoints[6] += dx;\n\t\t\tpoints[7] += dy;\n\t\t}\n\n\t\t// \"bottom right\" point shifts on either change\n\t\tpoints[4] += dx;\n\t\tpoints[5] += dy;\n\t},\n\n\t/**@\n     * #.hit\n     * @comp Collision\n     * @kind Method\n     * \n     * @sign public Array .hit(String component[, Array results])\n     * @param component - Check collision with entities that have this component\n     * applied to them.\n     * @param results - If a results array is supplied, any collisions will be appended to it \n     * @return `null` if there is no collision. If a collision is detected,\n     * returns an Array of collision data objects (see below).\n     * If the results parameter was passed, it will be used as the return value.\n     *\n     * Tests for collisions with entities that have the specified component applied to them.\n     * If a collision is detected, data regarding the collision will be present in the array \n     * returned by this method. If no collisions occur, this method returns `null`.\n     *\n     * When testing for collisions, if both entities have the `Collision` component, then \n     * the collision test will use the Separating Axis Theorem (SAT), and provide more detailed\n     * information about the collision.  Otherwise, it will be a simple test of whether the\n     * minimal bounding rectangles (MBR) overlap.\n     * \n     * Following is a description of a collision data object that this method may\n     * return: The returned collision data will be an Array of Objects with the\n     * type of collision used, the object collided and if the type used was SAT (a polygon was used as the hitbox) then an amount of overlap.\n     * ~~~\n     * [{\n     *    obj: [entity],\n     *    type: [\"MBR\" or \"SAT\"],\n     *    overlap: [number],\n     *    nx: [number],\n     *    ny: [number]\n     * }]\n     * ~~~\n     *\n     * All collision results will have these properties:\n     * - **obj:** The entity with which the collision occured.\n     * - **type:** Collision detection method used. One of:\n     *   - *MBR:* Standard axis aligned rectangle intersection (`.intersect` in the 2D component).\n     *   - *SAT:* Collision between any two convex polygons. Used when both colliding entities have the `Collision` component applied to them.\n     * \n     * If the collision result type is **SAT** then there will be three additional properties, which\n     * represent the minimum translation vector (MTV) -- the direction and distance of the minimal translation\n     * that will result in non-overlapping entities.\n     * - **overlap:** The magnitude of the translation vector.\n     * - **nx:** The x component of the MTV.\n     * - **ny:** The y component of the MTV.\n     *\n     * These additional properties (returned only when both entities have the \"Collision\" component)\n     * are useful when providing more natural collision resolution.\n     *\n     * If you want more fine-grained control consider using `Qrafty.map.search()`.\n     *\n     * @example\n     * Resolving collisions with static colliders (walls) for moving entity (player).\n     * ~~~\n     * Qrafty.e(\"2D, Fourway, Collision, player\")\n     *       .attr({x: 32, y: 32, w: 32, h: 32})\n     *       .collision([0, 16, 16, 0, 32, 16, 16, 32])\n     *       .fourway()\n     *       .bind('Move', function(evt) { // after player moved\n     *         var hitDatas, hitData;\n     *         if ((hitDatas = this.hit('wall'))) { // check for collision with walls\n     *           hitData = hitDatas[0]; // resolving collision for just one collider\n     *           if (hitData.type === 'SAT') { // SAT, advanced collision resolution\n     *             // move player back by amount of overlap\n     *             this.x -= hitData.overlap * hitData.nx;\n     *             this.y -= hitData.overlap * hitData.ny;\n     *           } else { // MBR, simple collision resolution\n     *             // move player to previous position \n     *             this.x = evt._x;\n     *             this.y = evt._y;\n     *           }\n     *         }\n     *       });\n     * ~~~\n     *\n     * @see Qrafty.map#Qrafty.map.search\n     */\n\t_collisionHitDupes: [],\n\t_collisionHitResults: [],\n\thit: function (component, results) {\n\t\tvar area = this._cbr || this._mbr || this;\n\t\tvar searchResults = this._collisionHitResults;\n\t\tsearchResults.length = 0;\n\t\tsearchResults = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.map.unfilteredSearch(area, searchResults);\n\t\tvar l = searchResults.length;\n\t\tif (!l) {\n\t\t\treturn null;\n\t\t}\n\t\tvar  i = 0,\n\t\t\tdupes = this._collisionHitDupes,\n\t\t\tid, obj;\n\n\t\tresults = results || [];\n\t\tdupes.length = 0;\n\n\t\tfor (; i < l; ++i) {\n\t\t\tobj = searchResults[i];\n\n\t\t\tif (!obj) continue;\n\t\t\tid = obj[0];\n\n\t\t\t//check if not added to hash and that actually intersects\n\t\t\tif (!dupes[id] && this[0] !== id && obj.__c[component]){\n\t\t\t\tdupes[id] = obj;\n\t\t\t\tif (obj.map) {\n\t\t\t\t\tvar SAT = this._SAT(this.map, obj.map);\n\t\t\t\t\tif (SAT) {\n\t\t\t\t\t\tresults.push(SAT);\n\t\t\t\t\t\tSAT.obj = obj;\n\t\t\t\t\t\tSAT.type = \"SAT\";\n\t\t\t\t\t}\n\t\t\t\t} else if (_core_core__WEBPACK_IMPORTED_MODULE_0__.default.rectManager.overlap(area, obj._cbr || obj._mbr || obj)){\n\t\t\t\t\tresults.push({\n\t\t\t\t\t\tobj: obj,\n\t\t\t\t\t\ttype: \"MBR\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!results.length) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn results;\n\t},\n\n\t/**@\n     * #.onHit\n     * @comp Collision\n     * @kind Method\n     * \n     * @sign public this .onHit(String component, Function callbackOn[, Function callbackOff])\n     * @param component - Component to check collisions for.\n     * @param callbackOn - Callback method to execute upon collision with the component.\n     *                     The first argument passed  will be the results of the collision check in the same format documented for `hit()`.\n     *                     The second argument passed will be a Boolean indicating whether the collision with a component occurs for the first time.\n     * @param callbackOff - Callback method executed once as soon as collision stops.  No arguments are passed.\n     *\n     * Creates an `UpdateFrame` event calling `.hit()` each frame.  When a collision is detected the `callbackOn` will be invoked.\n     *\n     * Note that the `callbackOn` will be invoked every frame the collision is active, not just the first time the collision occurs.\n     * Use the second argument passed to `callbackOn` to differentiate that, which will be `true` if it's the first time the collision occurs.\n     *\n     * If you want more fine-grained control consider using `.checkHits()`, `.hit()` or even `Qrafty.map.search()`.\n     *\n     * @example\n     * Respond to collisions between player and bullets.\n     * ~~~\n     * Qrafty.e(\"2D, Collision, player\")\n     *       .attr({ health: 100 })\n     *       .onHit('bullet', function(hitDatas) { // on collision with bullets\n     *         for (var i = 0, l = hitDatas.length; i < l; ++i) { // for each bullet hit\n     *           hitDatas[i].obj.destroy(); // destroy the bullet\n     *           this.health -= 25; // player looses health\n     *           if (this.health <= 0) // once player's health depletes\n     *             this.destroy(); // player dies\n     *         }\n     *       });\n     * ~~~\n     *\n     * @see .checkHits\n     * @see .hit\n     * @see Qrafty.map#Qrafty.map.search\n     */\n\tonHit: function (component, callbackOn, callbackOff) {\n\t\tvar justHit = false;\n\t\tthis.bind(\"UpdateFrame\", function () {\n\t\t\tvar hitData = this.hit(component);\n\t\t\tif (hitData) {\n\t\t\t\tcallbackOn.call(this, hitData, !justHit);\n\t\t\t\tjustHit = true;\n\t\t\t} else if (justHit) {\n\t\t\t\tif (typeof callbackOff === \"function\") {\n\t\t\t\t\tcallbackOff.call(this);\n\t\t\t\t}\n\t\t\t\tjustHit = false;\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t},\n\n\t/**\n     * This is a helper method for creating collisions handlers set up by `checkHits`. Do not call this directly.\n     *\n     * @param {String} component - The name of the component for which this handler checks for collisions.\n     * @param {Object} collisionData - Collision data object used to track collisions with the specified component.\n     *\n     * @see .checkHits\n     */\n\t_createCollisionHandler: function(component, collisionData) {\n\t\treturn function() {\n\t\t\tvar hitData = this.hit(component);\n\n\t\t\tif (collisionData.occurring === true) {\n\t\t\t\tif (hitData !== null) {\n\t\t\t\t\t// The collision is still in progress\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcollisionData.occurring = false;\n\t\t\t\tthis.trigger(\"HitOff\", component);\n\t\t\t} else if (hitData !== null) {\n\t\t\t\tcollisionData.occurring = true;\n\t\t\t\tthis.trigger(\"HitOn\", hitData);\n\t\t\t}\n\t\t};\n\t},\n\n\t/**@\n     * #.checkHits\n     * @comp Collision\n     * @kind Method\n     * \n     * @sign public this .checkHits(String componentList)\n     * @param componentList - A comma seperated list of components to check for collisions with.\n     * @sign public this .checkHits(String component1[, .., String componentN])\n     * @param component# - A component to check for collisions with.\n     *\n     * Performs collision checks against all entities that have at least one of\n     * the components specified when calling this method. If collisions occur,\n     * a \"HitOn\" event containing the collision information will be fired for the\n     * entity on which this method was invoked. See the documentation for `.hit()`\n     * for a description of collision data contained in the event.\n     * When a collision that was reported ends, a corresponding \"HitOff\" event\n     * will be fired.\n     *\n     * Calling this method more than once for the same component type will not\n     * cause redundant hit checks.\n     *\n     * If you want more fine-grained control consider using `.hit()` or even `Qrafty.map.search()`.\n     *\n     * @note Hit checks are performed on each new frame (using\n     * the *UpdateFrame* event). It is entirely possible for object to move in\n     * said frame after the checks were performed (even if the more is the\n     * result of *UpdateFrame*, as handlers run in no particular order). In such\n     * a case, the hit events will not fire until the next check is performed in\n     * the following frame.\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, Collision\")\n     *     .checkHits('Solid') // check for collisions with entities that have the Solid component in each frame\n     *     .bind(\"HitOn\", function(hitData) {\n     *         Qrafty.log(\"Collision with Solid entity occurred for the first time.\");\n     *     })\n     *     .bind(\"HitOff\", function(comp) {\n     *         Qrafty.log(\"Collision with Solid entity ended.\");\n     *     });\n     * ~~~\n     *\n     * @see .hit\n     * @see Qrafty.map#Qrafty.map.search\n     */\n\tcheckHits: function () {\n\t\tvar components = arguments;\n\t\tvar i = 0;\n\n\t\tif (components.length === 1) {\n\t\t\tcomponents = components[0].split(/\\s*,\\s*/);\n\t\t}\n\n\t\tfor (; i < components.length; ++i) {\n\t\t\tvar component = components[i];\n\t\t\tvar collisionData = this._collisionData[component];\n\n\t\t\tif (collisionData !== undefined) {\n\t\t\t\t// There is already a handler for collision with this component\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._collisionData[component] = collisionData = { occurring: false, handler: null };\n\t\t\tcollisionData.handler = this._createCollisionHandler(component, collisionData);\n\n\t\t\tthis.bind(\"UpdateFrame\", collisionData.handler);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.ignoreHits\n     * @comp Collision\n     * @kind Method\n     *\n     * @sign public this .ignoreHits()\n     *\n     * @sign public this .ignoreHits(String componentList)\n     * @param componentList - A comma separated list of components to stop checking\n     * for collisions with.\n     *\n     * @sign public this .ignoreHits(String component1[, .., String componentN])\n     * @param component# - A component to stop checking for collisions with.\n     *\n     * Stops checking for collisions with all, or certain, components. If called\n     * without arguments, this method will cause all collision checks on the\n     * entity to cease. To disable checks for collisions with specific\n     * components, specify the components as a comma separated string or as\n     * a set of arguments.\n     *\n     * Calling this method with component names for which there are no collision\n     * checks has no effect.\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, Collision\")\n     *     .checkHits('Solid')\n     *     ...\n     *     .ignoreHits('Solid'); // stop checking for collisions with entities that have the Solid component\n     * ~~~\n     */\n\tignoreHits: function () {\n\t\tvar components = arguments;\n\t\tvar i = 0;\n\t\tvar collisionData;\n\n\t\tif (components.length === 0) {\n\t\t\tfor (collisionData in this._collisionData) {\n\t\t\t\tthis.unbind(\"UpdateFrame\", collisionData.handler);\n\t\t\t}\n\n\t\t\tthis._collisionData = {};\n\t\t}\n\n\t\tif (components.length === 1) {\n\t\t\tcomponents = components[0].split(/\\s*,\\s*/);\n\t\t}\n\n\t\tfor (; i < components.length; ++i) {\n\t\t\tvar component = components[i];\n\t\t\tcollisionData = this._collisionData[component];\n\n\t\t\tif (collisionData === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.unbind(\"UpdateFrame\", collisionData.handler);\n\t\t\tdelete this._collisionData[component];\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.resetHitChecks\n     * @comp Collision\n     * @kind Method\n     * \n     * @sign public this .resetHitChecks()\n     * @sign public this .resetHitChecks(String componentList)\n     * @param componentList - A comma seperated list of components to re-check\n     * for collisions with.\n     * @sign public this .resetHitChecks(String component1[, .., String componentN])\n     * @param component# - A component to re-check for collisions with.\n     *\n     * Causes collision events to be received for collisions that are already\n     * taking place (normally, an additional event would not fire before said\n     * collisions cease and happen another time).\n     * If called without arguments, this method will cause all collision checks on the\n     * entity to fire events once more. To re-check for collisions with specific\n     * components, specify the components as a comma separated string or as\n     * a set of arguments.\n     *\n     * Calling this method with component names for which there are no collision\n     * checks has no effect.\n     *\n     * @example\n     * ~~~\n     * // this example fires the HitOn event each frame the collision with the Solid entity is active, instead of just the first time the collision occurs.\n     * Qrafty.e(\"2D, Collision\")\n     *     .checkHits('Solid')\n     *     .bind(\"HitOn\", function(hitData) {\n     *         Qrafty.log(\"Collision with Solid entity was reported in this frame again!\");\n     *         this.resetHitChecks('Solid'); // fire the HitOn event in the next frame also, if the collision is still active.\n     *     })\n     * ~~~\n     */\n\tresetHitChecks: function() {\n\t\tvar components = arguments;\n\t\tvar i = 0;\n\t\tvar collisionData;\n\n\t\tif (components.length === 0) {\n\t\t\tfor (collisionData in this._collisionData) {\n\t\t\t\tthis._collisionData[collisionData].occurring = false;\n\t\t\t}\n\t\t}\n\n\t\tif (components.length === 1) {\n\t\t\tcomponents = components[0].split(/\\s*,\\s*/);\n\t\t}\n\n\t\tfor (; i < components.length; ++i) {\n\t\t\tvar component = components[i];\n\t\t\tcollisionData = this._collisionData[component];\n\n\t\t\tif (collisionData === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcollisionData.occurring = false;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t_SAT: function (poly1, poly2) {\n\t\tvar i = 0,\n\t\t\tpoints1 = poly1.points, points2 = poly2.points,\n\t\t\tl = points1.length/2,\n\t\t\tj, k = points2.length/2,\n\t\t\tnx=0, ny=0,\n\t\t\tlength,\n\t\t\tmin1, min2,\n\t\t\tmax1, max2,\n\t\t\tinterval,\n\t\t\tMTV = -Infinity,\n\t\t\tMNx = null,\n\t\t\tMNy = null,\n\t\t\tdot,\n\t\t\tnp;\n\n\t\t//loop through the edges of Polygon 1\n\t\tfor (; i < l; i++) {\n\t\t\tnp = (i === l - 1 ? 0 : i + 1);\n\n\t\t\t//generate the normal for the current edge\n\t\t\tnx = -(points1[2*i+1] - points1[2*np+1]);\n\t\t\tny = (points1[2*i] - points1[2*np]);\n\n\t\t\t//normalize the vector\n\t\t\tlength = Math.sqrt(nx * nx + ny * ny);\n\t\t\tnx /= length;\n\t\t\tny /= length;\n\n\t\t\t//default min max\n\t\t\tmin1 = min2 = Infinity;\n\t\t\tmax1 = max2 = -Infinity;\n\n\t\t\t//project all vertices from poly1 onto axis\n\t\t\tfor (j = 0; j < l; ++j) {\n\t\t\t\tdot = points1[2*j] * nx + points1[2*j+1] * ny;\n\t\t\t\tif (dot > max1) max1 = dot;\n\t\t\t\tif (dot < min1) min1 = dot;\n\t\t\t}\n\n\t\t\t//project all vertices from poly2 onto axis\n\t\t\tfor (j = 0; j < k; ++j) {\n\t\t\t\tdot = points2[2*j] * nx + points2[2*j+1] * ny;\n\t\t\t\tif (dot > max2) max2 = dot;\n\t\t\t\tif (dot < min2 ) min2 = dot;\n\t\t\t}\n\n\t\t\t//calculate the minimum translation vector should be negative\n\t\t\tif (min1 < min2) {\n\t\t\t\tinterval = min2 - max1;\n\t\t\t\tnx = -nx;\n\t\t\t\tny = -ny;\n\t\t\t} else {\n\t\t\t\tinterval = min1 - max2;\n\t\t\t}\n\n\t\t\t//exit early if positive\n\t\t\tif (interval >= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (interval > MTV) {\n\t\t\t\tMTV = interval;\n\t\t\t\tMNx = nx;\n\t\t\t\tMNy = ny;\n\t\t\t}\n\t\t}\n\n\t\t//loop through the edges of Polygon 2\n\t\tfor (i = 0; i < k; i++) {\n\t\t\tnp = (i === k - 1 ? 0 : i + 1);\n\n\t\t\t//generate the normal for the current edge\n\t\t\tnx = -(points2[2*i+1] - points2[2*np+1]);\n\t\t\tny = (points2[2*i] - points2[2*np]);\n\n\t\t\t//normalize the vector\n\t\t\tlength = Math.sqrt(nx * nx + ny * ny);\n\t\t\tnx /= length;\n\t\t\tny /= length;\n\n\t\t\t//default min max\n\t\t\tmin1 = min2 = Infinity;\n\t\t\tmax1 = max2 = -Infinity;\n\n\t\t\t//project all vertices from poly1 onto axis\n\t\t\tfor (j = 0; j < l; ++j) {\n\t\t\t\tdot = points1[2*j] * nx + points1[2*j+1] * ny;\n\t\t\t\tif (dot > max1) max1 = dot;\n\t\t\t\tif (dot < min1) min1 = dot;\n\t\t\t}\n\n\t\t\t//project all vertices from poly2 onto axis\n\t\t\tfor (j = 0; j < k; ++j) {\n\t\t\t\tdot = points2[2*j] * nx + points2[2*j+1] * ny;\n\t\t\t\tif (dot > max2) max2 = dot;\n\t\t\t\tif (dot < min2) min2 = dot;\n\t\t\t}\n\n\t\t\t//calculate the minimum translation vector should be negative\n\t\t\tif (min1 < min2) {\n\t\t\t\tinterval = min2 - max1;\n\t\t\t\tnx = -nx;\n\t\t\t\tny = -ny;\n\t\t\t} else {\n\t\t\t\tinterval = min1 - max2;\n\t\t\t}\n\n\t\t\t//exit early if positive\n\t\t\tif (interval >= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (interval > MTV) {\n\t\t\t\tMTV = interval;\n\t\t\t\tMNx = nx;\n\t\t\t\tMNy = ny;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toverlap: MTV,\n\t\t\tnx: MNx,\n\t\t\tny: MNy\n\t\t};\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/spatial/collision.js?");

/***/ }),

/***/ "./src/spatial/math.js":
/*!*****************************!*\
  !*** ./src/spatial/math.js ***!
  \*****************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #Qrafty.math\n * @category Utilities\n * @kind CoreObj\n *\n * A set of utility functions for common (and not so common) operations.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.math = {\n\t/**@\n     * #Qrafty.math.abs\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public this Qrafty.math.abs(Number n)\n     * @param n - Some value.\n     * @return Absolute value.\n     *\n     * Returns the absolute value.\n     */\n\tabs: function (x) {\n\t\treturn x < 0 ? -x : x;\n\t},\n\n\t/**@\n     * #Qrafty.math.amountOf\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public Number Qrafty.math.amountOf(Number checkValue, Number minValue, Number maxValue)\n     * @param checkValue - Value that should checked with minimum and maximum.\n     * @param minValue - Bottom of the range\n     * @param maxValue - Top of the range\n     * @return The position of the checked value in a coordinate system normalized such that `minValue` is 0 and `maxValue` is 1.\n     *\n     * If checkValue is within the range, this will return a number between 0 and 1.\n     */\n\tamountOf: function (checkValue, minValue, maxValue) {\n\t\tif (minValue < maxValue) return (checkValue - minValue) / (maxValue - minValue);\n\t\treturn (checkValue - maxValue) / (minValue - maxValue);\n\t},\n\n\n\t/**@\n     * #Qrafty.math.clamp\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public Number Qrafty.math.clamp(Number value, Number min, Number max)\n     * @param value - A value.\n     * @param max - Maximum that value can be.\n     * @param min - Minimum that value can be.\n     * @return The value between minimum and maximum.\n     *\n     * Restricts a value to be within a specified range.\n     */\n\tclamp: function (value, min, max) {\n\t\tif (value > max) return max;\n\t\tif (value < min) return min;\n\t\treturn value;\n\t},\n\n\t/**@\n     * #Qrafty.math.degToRad\n     * Converts angle from degree to radian.\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public Number degToRad(angleInDeg)\n     * @param angleInDeg - The angle in degrees.\n     * @return The angle in radians.\n     */\n\tdegToRad: function (angleInDeg) {\n\t\treturn angleInDeg * Math.PI / 180;\n\t},\n\n\t/**@\n     * #Qrafty.math.distance\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public Number Qrafty.math.distance(Number x1, Number y1, Number x2, Number y2)\n     * @param x1 - First x coordinate.\n     * @param y1 - First y coordinate.\n     * @param x2 - Second x coordinate.\n     * @param y2 - Second y coordinate.\n     * @return The distance between the two points.\n     *\n     * Distance between two points.\n     */\n\tdistance: function (x1, y1, x2, y2) {\n\t\tvar squaredDistance = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.math.squaredDistance(x1, y1, x2, y2);\n\t\treturn Math.sqrt(parseFloat(squaredDistance));\n\t},\n\n\t/**@\n     * #Qrafty.math.lerp\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public Number Qrafty.math.lerp(Number value1, Number value2, Number amount)\n     * @param value1 - One value.\n     * @param value2 - Another value.\n     * @param amount - Amount of value2 to value1.\n     * @return Linear interpolated value.\n     *\n     * Linear interpolation. Passing amount with a value of 0 will cause value1 to be returned,\n     * a value of 1 will cause value2 to be returned.\n     */\n\tlerp: function (value1, value2, amount) {\n\t\treturn value1 + (value2 - value1) * amount;\n\t},\n\n\t/**@\n     * #Qrafty.math.negate\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public Number Qrafty.math.negate(Number percent)\n     * @param percent - The probability of returning `-1`\n     * @return 1 or -1.\n     *\n     * Returns `1` or `-1` randomly.\n     */\n\tnegate: function (percent) {\n\t\tif (Math.random() < percent) return -1;\n\t\treturn 1;\n\t},\n\n\t/**@\n     * #Qrafty.math.radToDeg\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public Number Qrafty.math.radToDeg(Number angle)\n     * @param angleInRad - The angle in radian.\n     * @return The angle in degree.\n     *\n     * Converts angle from radian to degree.\n     */\n\tradToDeg: function (angleInRad) {\n\t\treturn angleInRad * 180 / Math.PI;\n\t},\n\n\t/**@\n     * #Qrafty.math.randomElementOfArray\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public Object Qrafty.math.randomElementOfArray(Array array)\n     * @param array - A specific array.\n     * @return A random element of a specific array.\n     *\n     * Returns a random element of a specific array.\n     */\n\trandomElementOfArray: function (array) {\n\t\treturn array[Math.floor(array.length * Math.random())];\n\t},\n\n\t/**@\n     * #Qrafty.math.randomInt\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public Number Qrafty.math.randomInt(Number start, Number end)\n     * @param start - Smallest int value that can be returned.\n     * @param end - Biggest int value that can be returned.\n     * @return A random int.\n     *\n     * Returns a random int within a specific range.\n     */\n\trandomInt: function (start, end) {\n\t\treturn start + Math.floor((1 + end - start) * Math.random());\n\t},\n\n\t/**@\n     * #Qrafty.math.randomNumber\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public Number Qrafty.math.randomNumber(Number start, Number end)\n     * @param start - Smallest number value that can be returned.\n     * @param end - Biggest number value that can be returned.\n     * @return A random number.\n     *\n     * Returns a random number in within a specific range.\n     */\n\trandomNumber: function (start, end) {\n\t\treturn start + (end - start) * Math.random();\n\t},\n\n\t/**@\n     * #Qrafty.math.squaredDistance\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public Number Qrafty.math.squaredDistance(Number x1, Number y1, Number x2, Number y2)\n     * @param x1 - First x coordinate.\n     * @param y1 - First y coordinate.\n     * @param x2 - Second x coordinate.\n     * @param y2 - Second y coordinate.\n     * @return The squared distance between the two points.\n     *\n     * Squared distance between two points.\n     */\n\tsquaredDistance: function (x1, y1, x2, y2) {\n\t\treturn (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n\t},\n\n\t/**@\n     * #Qrafty.math.withinRange\n     * @comp Qrafty.math\n     * @kind Method\n     * \n     * @sign public Boolean Qrafty.math.withinRange(Number value, Number min, Number max)\n     * @param value - The specific value.\n     * @param min - Minimum value.\n     * @param max - Maximum value.\n     * @return Returns true if value is within a specific range.\n     *\n     * Check if a value is within a specific range.\n     */\n\twithinRange: function (value, min, max) {\n\t\treturn (value >= min && value <= max);\n\t}\n};\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.math.Vector2D = (function () {\n\t/**@\n     * #Qrafty.math.Vector2D\n     * @category 2D\n     * @kind Class\n     * @public\n     * \n     * @class This is a general purpose 2D vector class\n     *\n     * Vector2D has the following constructors:\n     *\n     * @sign public {Vector2D} new Vector2D();\n     * @returns {Vector2D} A new vector with x and y equal to 0 \n     * \n     * @sign public {Vector2D} new Vector2D(Number x, Number y);\n     * @param {Number} x - The initial x value\n     * @param {Number} y - The initial y value\n     * @returns {Vector2D} - A new vector with the given x and y values\n     * \n     * @sign public {Vector2D} new Vector2D(Vector2D vector);\n     * @param {Vector2D} vector - A vector to copy\n     * @returns {Vector2D} A new vector with the copied x and y values\n     * \n     * @example\n     * ```\n     * var v1 = new Qrafty.math.Vector2D(3, 5);\n     * var v2 = new Qrafty.math.Vector2D(v1);\n     * ```\n     * \n     */\n\n\tfunction Vector2D(x, y) {\n\t\tif (x instanceof Vector2D) {\n\t\t\tthis.x = x.x;\n\t\t\tthis.y = x.y;\n\t\t} else if (arguments.length === 2) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t} else if (arguments.length > 0)\n\t\t\tthrow \"Unexpected number of arguments for Vector2D()\";\n\t} // class Vector2D\n\n\tVector2D.prototype.x = 0;\n\tVector2D.prototype.y = 0;\n\n\t/**@\n     * #.add\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * @public\n     *\n     * Adds the passed vector to this vector\n     *\n     * @sign public {Vector2D} add(Vector2D vecRH);\n     * @param {Vector2D} vecRH - The vector to add\n     * @returns {Vector2D} The resulting modified vector\n     */\n\tVector2D.prototype.add = function (vecRH) {\n\t\tthis.x += vecRH.x;\n\t\tthis.y += vecRH.y;\n\t\treturn this;\n\t}; // add\n\n\t/**@\n     * #.angleBetween\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * @public\n     *\n     * Calculates the angle between the passed vector and this vector, using <0,0> as the point of reference.\n     * Angles returned have the range (−π, π].\n     *\n     * @sign public {Number} angleBetween(Vector2D vecRH);\n     * @param {Vector2D} vecRH - The vector to compare\n     * @returns {Number} the angle between the two vectors in radians\n     */\n\tVector2D.prototype.angleBetween = function (vecRH) {\n\t\treturn Math.atan2(this.x * vecRH.y - this.y * vecRH.x, this.x * vecRH.x + this.y * vecRH.y);\n\t};\n\n\t/**@\n     * #.angleTo\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     *\n     * Calculates the angle to the passed vector from this vector, using this vector as the point of reference.\n     *\n     * @public\n     * @sign public {Number} angleTo(Vector2D vecRH);\n     * @param {Vector2D} vecRH - The vector to compare\n     * @returns {Number} the angle to the passed vector in radians\n     */\n\tVector2D.prototype.angleTo = function (vecRH) {\n\t\treturn Math.atan2(vecRH.y - this.y, vecRH.x - this.x);\n\t};\n\n\t/**@\n     * #.clone\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     *\n     * Creates and exact, numeric copy of this vector\n     *\n     * @public\n     * @sign public {Vector2D} clone();\n     * @returns {Vector2D} the new vector\n     */\n\tVector2D.prototype.clone = function () {\n\t\treturn new Vector2D(this);\n\t}; // clone\n\n\t/**@\n     * #.distance\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     *\n     * Calculates the distance from this vector to the passed vector.\n     *\n     * @public\n     * @sign public {Number} distance(Vector2D vecRH);\n     * @param {Vector2D} vecRH - The passed vector\n     * @returns {Number} the distance between the two vectors\n     */\n\tVector2D.prototype.distance = function (vecRH) {\n\t\treturn Math.sqrt((vecRH.x - this.x) * (vecRH.x - this.x) + (vecRH.y - this.y) * (vecRH.y - this.y));\n\t}; // distance\n\n\t/**@\n     * #.distanceSq\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     *\n     * Calculates the squared distance from this vector to the passed vector.\n     * This function avoids calculating the square root, thus being slightly faster than .distance( ).\n     *\n     * @public\n     * @sign public {Number} distanceSq(Vector2D vecRH);\n     * @param {Vector2D} vecRH - The passed vector\n     * @returns {Number} the squared distance between the two vectors\n     * \n     * @see .distance\n     */\n\tVector2D.prototype.distanceSq = function (vecRH) {\n\t\treturn (vecRH.x - this.x) * (vecRH.x - this.x) + (vecRH.y - this.y) * (vecRH.y - this.y);\n\t}; // distanceSq\n\n\t/**@\n     * #.divide\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     *\n     * Divides this vector by the passed vector.\n     *\n     * @public\n     * @sign public {Vector2D} divide(Vector2D vecRH);\n     * @param {Vector2D} vecRH - The passed vector\n     * @returns {Vector2D} this vector after dividing\n     */\n\tVector2D.prototype.divide = function (vecRH) {\n\t\tthis.x /= vecRH.x;\n\t\tthis.y /= vecRH.y;\n\t\treturn this;\n\t}; // divide\n\n\t/**@\n     * #.dotProduct\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     *\n     * Calculates the dot product of this and the passed vectors\n     *\n     * @public\n     * @sign public {Number} dotProduct(Vector2D vecRH);\n     * @param {Vector2D} vecRH - The passed vector\n     * @returns {Number} the resultant dot product\n     */\n\tVector2D.prototype.dotProduct = function (vecRH) {\n\t\treturn this.x * vecRH.x + this.y * vecRH.y;\n\t}; // dotProduct\n\n\t/**@\n     * #.crossProduct\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     *\n     * Calculates the z component of the cross product of the two vectors augmented to 3D.\n     *\n     * @public\n     * @sign public {Number} crossProduct(Vector2D vecRH);\n     * @param {Vector2D} vecRH - The passed vector\n     * @returns {Number} the resultant cross product\n     */\n\tVector2D.prototype.crossProduct = function (vecRH) {\n\t\treturn this.x * vecRH.y - this.y * vecRH.x;\n\t}; // crossProduct\n\n\t/**@\n     * #.equals\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     *\n     * Determines if this vector is numerically equivalent to the passed vector.\n     *\n     * @public\n     * @sign public {Boolean} equals(Vector2D vecRH);\n     * @param {Vector2D} vecRH - The passed vector\n     * @returns {Boolean} true if the vectors are equivalent\n     */\n\tVector2D.prototype.equals = function (vecRH) {\n\t\treturn vecRH instanceof Vector2D &&\n            this.x === vecRH.x && this.y === vecRH.y;\n\t}; // equals\n\n\t/**@\n     * #.perpendicular\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     *\n     * Calculates a new vector that is perpendicular to this vector.\n     * The perpendicular vector has the same magnitude as this vector and is obtained by a counter-clockwise rotation of 90° of this vector.\n     *\n     * @public\n     * @sign public {Vector2D} perpendicular([Vector2D result]);\n     * @param {Vector2D} [result] - An optional parameter to save the result in\n     * @returns {Vector2D} the perpendicular vector\n     */\n\tVector2D.prototype.perpendicular = function (result) {\n\t\tresult = result || new Vector2D();\n\t\treturn result.setValues(-this.y, this.x);\n\t}; // perpendicular\n\n\t/**@\n     * #.getNormal\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     *\n     * Calculates a new right-handed unit vector that is perpendicular to the line created by this and the passed vector.\n     *\n     * @public\n     * @sign public {Vector2D} getNormal(Vector2D vecRH[, Vector2D result]);\n     * @param {Vector2D} vecRH - The passed vector\n     * @param {Vector2D} [result] - An optional parameter to save the result in\n     * @returns {Vector2D} the new normal vector\n     */\n\tVector2D.prototype.getNormal = function (vecRH, result) {\n\t\tresult = result || new Vector2D();\n\t\treturn result.setValues(vecRH.y - this.y, this.x - vecRH.x).normalize();\n\t}; // getNormal\n\n\t/**@\n     * #.isZero\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     *\n     * Determines if this vector is equal to <0,0>\n     *\n     * @public\n     * @sign public {Boolean} isZero();\n     * @returns {Boolean} true if this vector is equal to <0,0>\n     */\n\tVector2D.prototype.isZero = function () {\n\t\treturn this.x === 0 && this.y === 0;\n\t}; // isZero\n\n\t/**@\n     * #.magnitude\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     *\n     * Calculates the magnitude of this vector.\n     * Note: Function objects in JavaScript already have a 'length' member, hence the use of magnitude instead.\n     *\n     * @public\n     * @sign public {Number} magnitude();\n     * @returns {Number} the magnitude of this vector\n     */\n\tVector2D.prototype.magnitude = function () {\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t}; // magnitude\n\n\t/**@\n     * #.magnitudeSq\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     * Calculates the square of the magnitude of this vector.\n     * This function avoids calculating the square root, thus being slightly faster than .magnitude( ).\n     *\n     * @public\n     * @sign public {Number} magnitudeSq();\n     * @returns {Number} the square of the magnitude of this vector\n     * @see .magnitude\n     */\n\tVector2D.prototype.magnitudeSq = function () {\n\t\treturn this.x * this.x + this.y * this.y;\n\t}; // magnitudeSq\n\n\t/**@\n     * #.multiply\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     * Multiplies this vector by the passed vector, using component-wise multiplciation\n     *\n     * @public\n     * @sign public {Vector2D} multiply(Vector2D vecRH);\n     * @param {Vector2D} vecRH - The passed vector\n     * @returns {Vector2D} this vector after multiplying\n     */\n\tVector2D.prototype.multiply = function (vecRH) {\n\t\tthis.x *= vecRH.x;\n\t\tthis.y *= vecRH.y;\n\t\treturn this;\n\t}; // multiply\n\n\t/**@\n     * #.negate\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     * Negates this vector (ie. <-x,-y>)\n     *\n     * @public\n     * @sign public {Vector2D} negate();\n     * @returns {Vector2D} this vector after negation\n     */\n\tVector2D.prototype.negate = function () {\n\t\tthis.x = -this.x;\n\t\tthis.y = -this.y;\n\t\treturn this;\n\t}; // negate\n\n\t/**@\n     * #.normalize\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     * Normalizes this vector (scales the vector so that its new magnitude is 1)\n     * For vectors where magnitude is 0, <1,0> is returned.\n     *\n     * @public\n     * @sign public {Vector2D} normalize();\n     * @returns {Vector2D} this vector after normalization\n     */\n\tVector2D.prototype.normalize = function () {\n\t\tvar lng = Math.sqrt(this.x * this.x + this.y * this.y);\n\n\t\tif (lng === 0) {\n\t\t\t// default due East\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t} else {\n\t\t\tthis.x /= lng;\n\t\t\tthis.y /= lng;\n\t\t} // else\n\n\t\treturn this;\n\t}; // normalize\n\n\t/**@\n     * #.scale\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     * Scales this vector by the passed amount(s)\n     *\n     * @public\n     * @sign public {Vector2D} scale(Number scale);\n     * @param {Number} scale - The amount to scale by\n     * @returns {Vector2D} this after scaling\n     * \n     * @sign public {Vector2D} scale(Number scalarX, Number scalarY);\n     * @param {Number} scalarX - The amount to scale x by\n     * @param {Number} [scalarY] - The amount to scale y by\n     * @returns {Vector2D} this after scaling\n     */\n\tVector2D.prototype.scale = function (scalarX, scalarY) {\n\t\tif (scalarY === undefined)\n\t\t\tscalarY = scalarX;\n\n\t\tthis.x *= scalarX;\n\t\tthis.y *= scalarY;\n\n\t\treturn this;\n\t}; // scale\n\n\t/**@\n     * #.scaleToMagnitude\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     * Scales this vector such that its new magnitude is equal to the passed value.\n     *\n     * @public\n     * @sign public {Vector2D} scaleToMagnitude(Number mag);\n     * @param {Number} mag - The desired magnitude\n     * @returns {Vector2D} this vector after scaling\n     */\n\tVector2D.prototype.scaleToMagnitude = function (mag) {\n\t\tvar k = mag / this.magnitude();\n\t\tthis.x *= k;\n\t\tthis.y *= k;\n\t\treturn this;\n\t}; // scaleToMagnitude\n\n\t/**@\n     * #.setValues\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     * Sets the values of this vector using a passed vector or pair of numbers.\n     *\n     * @public\n     * @sign public {Vector2D} setValues(Vector2D vector);\n     * @param {Vector2D} vector - a vector to copy\n     * @returns {Vector2D} this vector after copying the values\n     * \n     * @sign public {Vector2D} setValues(Number x, Number y);\n     * @param {Number} x - The x value to set\n     * @param {Number} y - The y value to set\n     * @returns {Vector2D} this vector after setting the values\n     */\n\tVector2D.prototype.setValues = function (x, y) {\n\t\tif (x instanceof Vector2D) {\n\t\t\tthis.x = x.x;\n\t\t\tthis.y = x.y;\n\t\t} else {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t} // else\n\n\t\treturn this;\n\t}; // setValues\n\n\t/**@\n     * #.subtract\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     * Subtracts the passed vector from this vector.\n     *\n     * @public\n     * @sign public {Vector2D} subtract(Vector2D vecRH);\n     * @param {Vector2D} vecRH - the passed vector to subtract\n     * @returns {vector2D} this vector after subtracting\n     */\n\tVector2D.prototype.subtract = function (vecRH) {\n\t\tthis.x -= vecRH.x;\n\t\tthis.y -= vecRH.y;\n\t\treturn this;\n\t}; // subtract\n\n\t/**@\n     * #.toString\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     * Returns a string representation of this vector.\n     *\n     * @public\n     * @sign public {String} toString();\n     * @returns {String} A representation like \"Vector2D(4, 7)\"\n     */\n\tVector2D.prototype.toString = function () {\n\t\treturn \"Vector2D(\" + this.x + \", \" + this.y + \")\";\n\t}; // toString\n\n\t/**@\n     * #.translate\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     * Translates (moves) this vector by the passed amounts.\n     * If dy is omitted, dx is used for both axes.\n     *\n     * @public\n     * @sign public {Vector2D} translate(Number dx[, Number dy]);\n     * @param {Number} dx - The amount to shift by\n     * @param {Number} [dy] - The amount to shift along the y axis\n     * @returns {Vector2D} this vector after translating\n     */\n\tVector2D.prototype.translate = function (dx, dy) {\n\t\tif (dy === undefined)\n\t\t\tdy = dx;\n\n\t\tthis.x += dx;\n\t\tthis.y += dy;\n\n\t\treturn this;\n\t}; // translate\n\n\t/**@\n     * #.tripleProduct\n     * @comp Qrafty.math.Vector2D\n     * @kind Method\n     * \n     * Calculates the triple product of three vectors.\n     * triple vector product = b(a•c) - a(b•c)\n     *\n     * @public\n     * @static\n     * @sign public {Vector2D} tripleProduct(Vector2D a, Vector2D b, Vector2D c, [Vector2D result]);\n     * @param {Vector2D} a - The first vector\n     * @param {Vector2D} b - The second vector\n     * @param {Vector2D} c - The third vector\n     * @param {Vector2D} [result] - An optional parameter to save the result in\n     * @return {Vector2D} the triple product as a new vector\n     */\n\tVector2D.tripleProduct = function (a, b, c, result) {\n\t\tresult = result || new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.math.Vector2D();\n\t\tvar ac = a.dotProduct(c);\n\t\tvar bc = b.dotProduct(c);\n\t\treturn result.setValues(b.x * ac - a.x * bc, b.y * ac - a.y * bc);\n\t};\n\n\treturn Vector2D;\n})();\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.math.Matrix2D = (function () {\n\t/**@\n     * #Qrafty.math.Matrix2D\n     * @category 2D\n     * @kind Class\n     * \n     * @class This is a 2D Matrix2D class. It is 3x3 to allow for affine transformations in 2D space.\n     * The third row is always assumed to be [0, 0, 1].\n     *\n     * Matrix2D uses the following form, as per the whatwg.org specifications for canvas.transform():\n     * [a, c, e]\n     * [b, d, f]\n     * [0, 0, 1]\n     *\n     * @public\n     * @sign public {Matrix2D} new Matrix2D();\n     * @returns {Matrix2D} A new identity matrix\n     * \n     * @sign public {Matrix2D} new Matrix2D(Matrix2D matrix);\n     * @param {Matrix2D} matrix - a matrix to copy\n     * @returns {Matrix2D} A new instance whose entries are copied from the passed matrix\n     * \n     * @sign public {Matrix2D} new Matrix2D(Number a, Number b, Number c, Number d, Number e, Number f);\n     * @param {Number=1} a - (m11) Horizontal scale\n     * @param {Number=0} b - (m12) Horizontal skew\n     * @param {Number=0} c - (m21) Vertical skew\n     * @param {Number=1} d - (m22) Vertical scale\n     * @param {Number=0} e - (dx) Horizontal translation\n     * @param {Number=0} f - (dy) Vertical translation\n     * @returns {Matrix2D} A new instance whose entries are set from the passed arguments\n     * \n     * @example\n     * ```\n     * // Create the following translation matrix:\n     * // [1, 0, 5]\n     * // [0, 1, 7]\n     * // [0, 0, 1]\n     * var m = new Qrafty.math.Matrix2D(1, 0, 0, 1, 5, 7);\n     * ```\n     */\n\tfunction Matrix2D (a, b, c, d, e, f) {\n\t\tif (a instanceof Matrix2D) {\n\t\t\tthis.a = a.a;\n\t\t\tthis.b = a.b;\n\t\t\tthis.c = a.c;\n\t\t\tthis.d = a.d;\n\t\t\tthis.e = a.e;\n\t\t\tthis.f = a.f;\n\t\t} else if (arguments.length === 6) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t\tthis.d = d;\n\t\t\tthis.e = e;\n\t\t\tthis.f = f;\n\t\t} else if (arguments.length > 0)\n\t\t\tthrow \"Unexpected number of arguments for Matrix2D()\";\n\t} // class Matrix2D\n\n\tMatrix2D.prototype.a = 1;\n\tMatrix2D.prototype.b = 0;\n\tMatrix2D.prototype.c = 0;\n\tMatrix2D.prototype.d = 1;\n\tMatrix2D.prototype.e = 0;\n\tMatrix2D.prototype.f = 0;\n\n\t/**@\n     * #.apply\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     * \n     * Applies the matrix transformations to the passed object\n     *\n     * @public\n     * @sign public {Vector2D} apply(Vector2D vecRH);\n     * @param {Vector2D} vecRH - vector to be transformed\n     * @returns {Vector2D} the passed vector object after transforming\n     */\n\tMatrix2D.prototype.apply = function (vecRH) {\n\t\t// I'm not sure of the best way for this function to be implemented. Ideally\n\t\t// support for other objects (rectangles, polygons, etc) should be easily\n\t\t// addable in the future. Maybe a function (apply) is not the best way to do\n\t\t// this...?\n\n\t\tvar tmpX = vecRH.x;\n\t\tvecRH.x = tmpX * this.a + vecRH.y * this.c + this.e;\n\t\tvecRH.y = tmpX * this.b + vecRH.y * this.d + this.f;\n\t\t// no need to homogenize since the third row is always [0, 0, 1]\n\n\t\treturn vecRH;\n\t}; // apply\n\n\t/**@\n     * #.clone\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     * \n     * Creates an exact, numeric copy of the current matrix\n     *\n     * @public\n     * @sign public {Matrix2D} clone();\n     * @returns {Matrix2D} The cloned matrix\n     */\n\tMatrix2D.prototype.clone = function () {\n\t\treturn new Matrix2D(this);\n\t}; // clone\n\n\t/**@\n     * #.combine\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     *\n     * Multiplies this matrix with another, overriding the values of this matrix.\n     * The passed matrix is assumed to be on the right-hand side.\n     *\n     * @public\n     * @sign public {Matrix2D} combine(Matrix2D mtrxRH);\n     * @param {Matrix2D} mtrxRH - The passed matrix\n     * @returns {Matrix2D} this matrix after combination\n     */\n\tMatrix2D.prototype.combine = function (mtrxRH) {\n\t\tvar tmp = this.a;\n\t\tthis.a = tmp * mtrxRH.a + this.b * mtrxRH.c;\n\t\tthis.b = tmp * mtrxRH.b + this.b * mtrxRH.d;\n\t\ttmp = this.c;\n\t\tthis.c = tmp * mtrxRH.a + this.d * mtrxRH.c;\n\t\tthis.d = tmp * mtrxRH.b + this.d * mtrxRH.d;\n\t\ttmp = this.e;\n\t\tthis.e = tmp * mtrxRH.a + this.f * mtrxRH.c + mtrxRH.e;\n\t\tthis.f = tmp * mtrxRH.b + this.f * mtrxRH.d + mtrxRH.f;\n\t\treturn this;\n\t}; // combine\n\n\t/**@\n     * #.equals\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     *\n     * Checks for the numeric element-wise equality of this matrix versus another.\n     *\n     * @public\n     * @sign public {Boolean} equals(Matrix2D mtrxRH);\n     * @param {Matrix2D} mtrxRH - The matrix to check equality with\n     * @returns {Boolean} true if the two matrices are numerically equal\n     */\n\tMatrix2D.prototype.equals = function (mtrxRH) {\n\t\treturn mtrxRH instanceof Matrix2D &&\n            this.a === mtrxRH.a && this.b === mtrxRH.b && this.c === mtrxRH.c &&\n            this.d === mtrxRH.d && this.e === mtrxRH.e && this.f === mtrxRH.f;\n\t}; // equals\n\n\t/**@\n     * #.determinant\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     *\n     * Calculates the determinant of this matrix\n     *\n     * @public\n     * @sign public {Number} determinant();\n     * @returns {Number} det(this matrix)\n     */\n\tMatrix2D.prototype.determinant = function () {\n\t\treturn this.a * this.d - this.b * this.c;\n\t}; // determinant\n\n\t/**@\n     * #.invert\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     *\n     * Inverts this matrix if possible\n     *\n     * @public\n     * @sign public {Matrix2D} invert();\n     * @returns {Matrix2D} this inverted matrix or the original matrix on failure\n     * @see .isInvertible\n     */\n\tMatrix2D.prototype.invert = function () {\n\t\tvar det = this.determinant();\n\n\t\t// matrix is invertible if its determinant is non-zero\n\t\tif (det !== 0) {\n\t\t\tvar old = {\n\t\t\t\ta: this.a,\n\t\t\t\tb: this.b,\n\t\t\t\tc: this.c,\n\t\t\t\td: this.d,\n\t\t\t\te: this.e,\n\t\t\t\tf: this.f\n\t\t\t};\n\t\t\tthis.a = old.d / det;\n\t\t\tthis.b = -old.b / det;\n\t\t\tthis.c = -old.c / det;\n\t\t\tthis.d = old.a / det;\n\t\t\tthis.e = (old.c * old.f - old.e * old.d) / det;\n\t\t\tthis.f = (old.e * old.b - old.a * old.f) / det;\n\t\t} // if\n\n\t\treturn this;\n\t}; // invert\n\n\t/**@\n     * #.isIdentity\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     * \n     * Returns true if this matrix is the identity matrix\n     *\n     * @public\n     * @sign public {Boolean} isIdentity();\n     * @returns {Boolean} true if this matrix is an identity matrix\n     */\n\tMatrix2D.prototype.isIdentity = function () {\n\t\treturn this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1 && this.e === 0 && this.f === 0;\n\t}; // isIdentity\n\n\t/**@\n     * #.isInvertible\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     * \n     * Determines is this matrix is invertible.\n     *\n     * @public\n     * @sign public {Boolean} isInvertible();\n     * @returns {Boolean} true if this matrix is invertible\n     * @see .invert\n     */\n\tMatrix2D.prototype.isInvertible = function () {\n\t\treturn this.determinant() !== 0;\n\t}; // isInvertible\n\n\t/**@\n     * #.preRotate\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     * \n     * Applies a counter-clockwise pre-rotation to this matrix\n     *\n     * @public\n     * @sign public {Matrix2D} preRotate(Number rads);\n     * @param {number} rads - angle to rotate in radians\n     * @returns {Matrix2D} this matrix after pre-rotation\n     */\n\tMatrix2D.prototype.preRotate = function (rads) {\n\t\tvar nCos = Math.cos(rads);\n\t\tvar nSin = Math.sin(rads);\n\n\t\tvar tmp = this.a;\n\t\tthis.a = nCos * tmp - nSin * this.b;\n\t\tthis.b = nSin * tmp + nCos * this.b;\n\t\ttmp = this.c;\n\t\tthis.c = nCos * tmp - nSin * this.d;\n\t\tthis.d = nSin * tmp + nCos * this.d;\n\n\t\treturn this;\n\t}; // preRotate\n\n\t/**@\n     * #.preScale\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     * \n     * Applies a pre-scaling to this matrix, applied to the a, b, c, and d elements.\n     * \n     * If two arguments are supplied, a and c are multiplied by scalarX, b, and d by scalarY.\n     *\n     * @public\n     * @sign public {Matrix2D} preScale(Number scalarX[, Number scalarY]);\n     * @param {Number} scalarX - The amount to scale\n     * @param {Number} [scalarY] - scalarX is used if scalarY is undefined\n     * @returns {Matrix2D} this after pre-scaling\n     */\n\tMatrix2D.prototype.preScale = function (scalarX, scalarY) {\n\t\tif (scalarY === undefined)\n\t\t\tscalarY = scalarX;\n\n\t\tthis.a *= scalarX;\n\t\tthis.b *= scalarY;\n\t\tthis.c *= scalarX;\n\t\tthis.d *= scalarY;\n\n\t\treturn this;\n\t}; // preScale\n\n\t/**@\n     * #.preTranslate\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     * \n     * Applies a pre-translation to this matrix\n     *\n     * @public\n     * @sign public {Matrix2D} preTranslate(Number dx, Number dy);\n     * @param {Number} dx - The amount to shift the e component\n     * @param {Number} dy - The amount to shift the f component\n     * @returns {Matrix2D} this matrix after pre-translation\n     * \n     * @sign public {Matrix2D} preTranslate(Vector2D vector);\n     * @param {Vector2D} vector - The vector to shift (e, f) by.\n     * @returns {Matrix2D} this matrix after pre-translation\n     */\n\tMatrix2D.prototype.preTranslate = function (dx, dy) {\n\t\tif (typeof dx === \"number\") {\n\t\t\tthis.e += dx;\n\t\t\tthis.f += dy;\n\t\t} else {\n\t\t\tthis.e += dx.x;\n\t\t\tthis.f += dx.y;\n\t\t} // else\n\n\t\treturn this;\n\t}; // preTranslate\n\n\t/**@\n     * #.rotate\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     * \n     * Applies a counter-clockwise post-rotation to this matrix\n     *\n     * @public\n     * @sign public {Matrix2D} rotate(Number rads);\n     * @param {Number} rads - angle to rotate in radians\n     * @returns {Matrix2D} this matrix after rotation\n     */\n\tMatrix2D.prototype.rotate = function (rads) {\n\t\tvar nCos = Math.cos(rads);\n\t\tvar nSin = Math.sin(rads);\n\n\t\tvar tmp = this.a;\n\t\tthis.a = nCos * tmp - nSin * this.b;\n\t\tthis.b = nSin * tmp + nCos * this.b;\n\t\ttmp = this.c;\n\t\tthis.c = nCos * tmp - nSin * this.d;\n\t\tthis.d = nSin * tmp + nCos * this.d;\n\t\ttmp = this.e;\n\t\tthis.e = nCos * tmp - nSin * this.f;\n\t\tthis.f = nSin * tmp + nCos * this.f;\n\n\t\treturn this;\n\t}; // rotate\n\n\t/**@\n     * #.scale\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     * \n     * Applies a post-scaling to this matrix, modifying components a-f.\n     * \n     * If two arguments are passed, scalarX is used for components a, c, and e; scalarY for b, d, and f.\n     *\n     * @public\n     * @sign public {Matrix2D} scale(Number scalarX[, Number scalarY]);\n     * @param {Number} scalarX The amount to scale by along the x axis\n     * @param {Number} [scalarY] scalarX is used if scalarY is undefined\n     * @returns {Matrix2D} this after post-scaling\n     */\n\tMatrix2D.prototype.scale = function (scalarX, scalarY) {\n\t\tif (scalarY === undefined)\n\t\t\tscalarY = scalarX;\n\n\t\tthis.a *= scalarX;\n\t\tthis.b *= scalarY;\n\t\tthis.c *= scalarX;\n\t\tthis.d *= scalarY;\n\t\tthis.e *= scalarX;\n\t\tthis.f *= scalarY;\n\n\t\treturn this;\n\t}; // scale\n\n\t/**@\n     * #.setValues\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     * \n     * Sets the values of this matrix.\n     *\n     * @public\n     * @sign public {Matrix2D} setValues(Matrix2D matrix);\n     * @param {Matrix2D} matrix - A matrix to copy the values from\n     * @returns {Matrix2D} This matrix after copying the values\n     * \n     * @sign public {Matrix2D} setValues(Number a, Number b, Number c, Number d, Number e, Number f);\n     * When used as a translation matrix, the 6 elements have particular meanings.\n     * @param {Number} a - (m11) Horizontal scale\n     * @param {Number} b - (m12) Horizontal skew\n     * @param {Number} c - (m21) Vertical skew\n     * @param {Number} d - (m22) Vertical scale\n     * @param {Number} e - (dx) Horizontal translation\n     * @param {Number} f - (dy) Vertical translation\n     * @returns {Matrix2D} this matrix containing the new values\n     */\n\tMatrix2D.prototype.setValues = function (a, b, c, d, e, f) {\n\t\tif (a instanceof Matrix2D) {\n\t\t\tthis.a = a.a;\n\t\t\tthis.b = a.b;\n\t\t\tthis.c = a.c;\n\t\t\tthis.d = a.d;\n\t\t\tthis.e = a.e;\n\t\t\tthis.f = a.f;\n\t\t} else {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t\tthis.d = d;\n\t\t\tthis.e = e;\n\t\t\tthis.f = f;\n\t\t} // else\n\n\t\treturn this;\n\t}; // setValues\n\n\t/**@\n     * #.toString\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     * \n     * Returns the string representation of this matrix.\n     *\n     * @public\n     * @sign public {String} toString();\n     * @returns {String} A string representation like \"Matrix2D([a, c, e], [b, d, f], [0, 0, 1])\"\n     */\n\tMatrix2D.prototype.toString = function () {\n\t\treturn \"Matrix2D([\" + this.a + \", \" + this.c + \", \" + this.e +\n            \"] [\" + this.b + \", \" + this.d + \", \" + this.f + \"] [0, 0, 1])\";\n\t}; // toString\n\n\t/**@\n     * #.translate\n     * @comp Qrafty.math.Matrix2D\n     * @kind Method\n     * \n     * Applies a post-translation to this matrix\n     *\n     * @public\n     * @sign public {Matrix2D} translate(Vector2D vector);\n     * @param {Vector2D} vector - the vector to translate by\n     * @returns {Matrix2D} this matrix after post-translation\n     * \n     * @sign public {Matrix2D} translate(Number dx, Number dy);\n     * @param {Number} dx - The shift along the x-axis\n     * @param {Number} dy - The shift along the y-axis\n     * @returns {Matrix2D} this matrix after post-translation\n     */\n\tMatrix2D.prototype.translate = function (dx, dy) {\n\t\tif (typeof dx === \"number\") {\n\t\t\tthis.e += this.a * dx + this.c * dy;\n\t\t\tthis.f += this.b * dx + this.d * dy;\n\t\t} else {\n\t\t\tthis.e += this.a * dx.x + this.c * dx.y;\n\t\t\tthis.f += this.b * dx.x + this.d * dx.y;\n\t\t} // else\n\n\t\treturn this;\n\t}; // translate\n\n\treturn Matrix2D;\n})();\n\n//# sourceURL=webpack://qrafty-v2/./src/spatial/math.js?");

/***/ }),

/***/ "./src/spatial/motion.js":
/*!*******************************!*\
  !*** ./src/spatial/motion.js ***!
  \*******************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n\n// This is used to define getters and setters for Motion properties\n// For instance\n//      __motionProp(entity, \"a\", \"x\", true) \n// will define a getter for `ax` which accesses an underlying private property `_ax`\n// If the `setter` property is false, setting a value will be a null-op\nvar __motionProp = function(self, prefix, prop, setter) {\n\tvar publicProp = prefix + prop;\n\tvar privateProp = \"_\" + publicProp;\n\n\tvar motionEvent = { key: \"\", oldValue: 0};\n\t// getters & setters for public property\n\tif (setter) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.defineField(self, publicProp, function() { return this[privateProp]; }, function(newValue) {\n\t\t\tvar oldValue = this[privateProp];\n\t\t\tif (newValue !== oldValue) {\n\t\t\t\tthis[privateProp] = newValue;\n\n\t\t\t\tmotionEvent.key = publicProp;\n\t\t\t\tmotionEvent.oldValue = oldValue;\n\t\t\t\tthis.trigger(\"MotionChange\", motionEvent);\n\t\t\t}\n\t\t});\n\t} else {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.defineField(self, publicProp, function() { return this[privateProp]; }, function(newValue) {});\n\t}\n\n\t// hide private property\n\tObject.defineProperty(self, privateProp, {\n\t\tvalue : 0,\n\t\twritable : true,\n\t\tenumerable : false,\n\t\tconfigurable : false\n\t});\n};\n\n// This defines an alias for a pair of underlying properties which represent the components of a vector\n// It takes an object with vector methods, and redefines its x/y properties as getters and setters to properties of self\n// This allows you to use the vector's special methods to manipulate the entity's properties, \n// while still allowing you to manipulate those properties directly if performance matters\nvar __motionVector = function(self, prefix, setter, vector) {\n\tvar publicX = prefix + \"x\",\n\t\tpublicY = prefix + \"y\",\n\t\tprivateX = \"_\" + publicX,\n\t\tprivateY = \"_\" + publicY;\n\n\tif (setter) {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.defineField(vector, \"x\", function() { return self[privateX]; }, function(v) { self[publicX] = v; });\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.defineField(vector, \"y\", function() { return self[privateY]; }, function(v) { self[publicY] = v; });\n\t} else {\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.defineField(vector, \"x\", function() { return self[privateX]; }, function(v) {});\n\t\t_core_core__WEBPACK_IMPORTED_MODULE_0__.default.defineField(vector, \"y\", function() { return self[privateY]; }, function(v) {});\n\t}\n\tif (Object.seal) { Object.seal(vector); }\n\n\treturn vector;\n};\n\n/**@\n * #AngularMotion\n * @category 2D\n * @kind Component\n * \n * @trigger Rotated - When entity has rotated due to angular velocity/acceleration a Rotated event is triggered. - Number - Old rotation\n * @trigger NewRotationDirection - When entity has changed rotational direction due to rotational velocity a NewRotationDirection event is triggered. The event is triggered once, if direction is different from last frame. - -1 | 0 | 1 - New direction\n * @trigger MotionChange - When a motion property has changed a MotionChange event is triggered. - { key: String, oldValue: Number } - Motion property name and old value\n *\n * Component that allows rotating an entity by applying angular velocity and acceleration.\n * All angular motion values are expressed in degrees per second (e.g. an entity with `vrotation` of 10 will rotate 10 degrees each second).\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"AngularMotion\", {\n\t/**@\n     * #.vrotation\n     * @comp AngularMotion\n     * @kind Property\n     * \n     * A property for accessing/modifying the angular(rotational) velocity. \n     * The velocity remains constant over time, unless the acceleration increases the velocity.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D, AngularMotion\");\n     *\n     * var vrotation = ent.vrotation; // retrieve the angular velocity\n     * ent.vrotation += 1; // increase the angular velocity\n     * ent.vrotation = 0; // reset the angular velocity\n     * ~~~\n     */\n\t_vrotation: 0,\n\n\t/**@\n     * #.arotation\n     * @comp AngularMotion\n     * @kind Property\n     * \n     * A property for accessing/modifying the angular(rotational) acceleration. \n     * The acceleration increases the velocity over time, resulting in ever increasing speed.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D, AngularMotion\");\n     *\n     * var arotation = ent.arotation; // retrieve the angular acceleration\n     * ent.arotation += 1; // increase the angular acceleration\n     * ent.arotation = 0; // reset the angular acceleration\n     * ~~~\n     */\n\t_arotation: 0,\n\n\t/**@\n     * #.drotation\n     * @comp AngularMotion\n     * @kind Property\n     * \n     * A number that reflects the change in rotation (difference between the old & new rotation) that was applied in the last frame.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D, AngularMotion\");\n     *\n     * var drotation = ent.drotation; // the change of rotation in the last frame\n     * ~~~\n     */\n\t_drotation: 0,\n\n\tinit: function () {\n\t\tthis.requires(\"2D\");\n\n\t\t__motionProp(this, \"v\", \"rotation\", true);\n\t\t__motionProp(this, \"a\", \"rotation\", true);\n\t\t__motionProp(this, \"d\", \"rotation\", false);\n\n\t\tthis.__oldRotationDirection = 0;\n\n\t\tthis.bind(\"UpdateFrame\", this._angularMotionTick);\n\t},\n\tremove: function(destroyed) {\n\t\tthis.unbind(\"UpdateFrame\", this._angularMotionTick);\n\t},\n\n\t/**@\n     * #.resetAngularMotion\n     * @comp AngularMotion\n     * @kind Method\n     * \n     * @sign public this .resetAngularMotion()\n     * \n     * Reset all motion (resets velocity, acceleration, motionDelta).\n     */\n\tresetAngularMotion: function() {\n\t\tthis._drotation = 0;\n\t\tthis.vrotation = 0;\n\t\tthis.arotation = 0;\n\n\t\treturn this;\n\t},\n\n\t/*\n     * s += v * Δt + (0.5 * a) * Δt * Δt\n     * v += a * Δt\n     */\n\t_angularMotionTick: function(frameData) {\n\t\tvar dt = frameData.dt / 1000; // Time in s\n\t\tvar oldR = this._rotation,\n\t\t\tvr = this._vrotation,\n\t\t\tar = this._arotation;\n\n\t\t// s += v * Δt + (0.5 * a) * Δt * Δt\n\t\tvar newR = oldR + vr * dt + 0.5 * ar * dt * dt;\n\t\t// v += a * Δt\n\t\tthis.vrotation = vr + ar * dt;\n\n\t\t// Check if direction of velocity has changed\n\t\tvar _vr = this._vrotation, dvr = _vr ? (_vr<0 ? -1:1):0; // Quick implementation of Math.sign\n\t\tif (this.__oldRotationDirection !== dvr) {\n\t\t\tthis.__oldRotationDirection = dvr;\n\t\t\tthis.trigger(\"NewRotationDirection\", dvr);\n\t\t}\n\n\t\t// Check if velocity has changed\n\t\t// Δs = s[t] - s[t-1]\n\t\tthis._drotation = newR - oldR;\n\t\tif (this._drotation !== 0) {\n\t\t\tthis.rotation = newR;\n\t\t\tthis.trigger(\"Rotated\", oldR);\n\t\t}\n\t}\n});\n\n/**@\n * #Motion\n * @category 2D\n * @kind Component\n * \n * @trigger NewDirection - When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame. - { x: -1 | 0 | 1, y: -1 | 0 | 1 } - New direction\n * @trigger MotionChange - When a motion property has changed a MotionChange event is triggered. - { key: String, oldValue: Number } - Motion property name and old value\n *\n * Component that allows moving an entity by applying linear velocity and acceleration.\n * All linear motion values are expressed in pixels per second (e.g. an entity with `vx` of 1 will move 1px on the x axis each second).\n *\n * @note Several methods return Vector2D objects that dynamically reflect the entity's underlying properties.  If you want a static copy instead, use the vector's `clone()` method.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Motion\", {\n\t/**@\n     * #.vx\n     * @comp Motion\n     * @kind Property\n     * \n     * A property for accessing/modifying the linear velocity in the x axis.\n     * The velocity remains constant over time, unless the acceleration changes the velocity.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D, Motion\");\n     *\n     * var vx = ent.vx; // retrieve the linear velocity in the x axis\n     * ent.vx += 1; // increase the linear velocity in the x axis\n     * ent.vx = 0; // reset the linear velocity in the x axis\n     * ~~~\n     */\n\t_vx: 0,\n\n\t/**@\n     * #.vy\n     * @comp Motion\n     * @kind Property\n     * \n     * A property for accessing/modifying the linear velocity in the y axis.\n     * The velocity remains constant over time, unless the acceleration changes the velocity.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D, Motion\");\n     *\n     * var vy = ent.vy; // retrieve the linear velocity in the y axis\n     * ent.vy += 1; // increase the linear velocity in the y axis\n     * ent.vy = 0; // reset the linear velocity in the y axis\n     * ~~~\n     */\n\t_vy: 0,\n\n\t/**@\n     * #.ax\n     * @comp Motion\n     * @kind Property\n     * \n     * A property for accessing/modifying the linear acceleration in the x axis.\n     * The acceleration changes the velocity over time.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D, Motion\");\n     *\n     * var ax = ent.ax; // retrieve the linear acceleration in the x axis\n     * ent.ax += 1; // increase the linear acceleration in the x axis\n     * ent.ax = 0; // reset the linear acceleration in the x axis\n     * ~~~\n     */\n\t_ax: 0,\n\n\t/**@\n     * #.ay\n     * @comp Motion\n     * @kind Property\n     * \n     * A property for accessing/modifying the linear acceleration in the y axis.\n     * The acceleration changes the velocity over time.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D, Motion\");\n     *\n     * var ay = ent.ay; // retrieve the linear acceleration in the y axis\n     * ent.ay += 1; // increase the linear acceleration in the y axis\n     * ent.ay = 0; // reset the linear acceleration in the y axis\n     * ~~~\n     */\n\t_ay: 0,\n\n\t/**@\n     * #.dx\n     * @comp Motion\n     * @kind Property\n     * \n     * A number that reflects the change in x (difference between the old & new x) that was applied in the last frame.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D, Motion\");\n     *\n     * var dx = ent.dx; // the change of x in the last frame\n     * ~~~\n     */\n\t_dx: 0,\n\n\t/**@\n     * #.dy\n     * @comp Motion\n     * @kind Property\n     * \n     * A number that reflects the change in y (difference between the old & new y) that was applied in the last frame.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D, Motion\");\n     *\n     * var dy = ent.dy; // the change of y in the last frame\n     * ~~~\n     */\n\t_dy: 0,\n\n\tinit: async function () {\n\t\tawait this.requires(\"2D\");\n\n\t\t__motionProp(this, \"v\", \"x\", true);\n\t\t__motionProp(this, \"v\", \"y\", true);\n\t\tthis._velocity = __motionVector(this, \"v\", true, new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.math.Vector2D());\n\t\t__motionProp(this, \"a\", \"x\", true);\n\t\t__motionProp(this, \"a\", \"y\", true);\n\t\tthis._acceleration = __motionVector(this, \"a\", true, new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.math.Vector2D());\n\t\t__motionProp(this, \"d\", \"x\", false);\n\t\t__motionProp(this, \"d\", \"y\", false);\n\t\tthis._motionDelta = __motionVector(this, \"d\", false, new _core_core__WEBPACK_IMPORTED_MODULE_0__.default.math.Vector2D());\n\n\t\tthis.__oldDirection = {x: 0, y: 0};\n\n\t\tthis.bind(\"UpdateFrame\", this._linearMotionTick);\n\t},\n\tremove: function(destroyed) {\n\t\tthis.unbind(\"UpdateFrame\", this._linearMotionTick);\n\t},\n\n\t/**@\n     * #.resetMotion\n     * @comp Motion\n     * @kind Method\n     * \n     * @sign public this .resetMotion()\n     * @return this\n     * \n     * Reset all linear motion (resets velocity, acceleration, motionDelta).\n     */\n\tresetMotion: function() {\n\t\tthis.vx = 0; this.vy = 0;\n\t\tthis.ax = 0; this.ay = 0;\n\t\tthis._dx = 0; this._dy = 0;\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.motionDelta\n     * @comp Motion\n     * @kind Method\n     * \n     * @sign public Vector2D .motionDelta()\n     * @return A Vector2D with the properties {x, y} that reflect the change in x & y.\n     * \n     * Returns the difference between the old & new position that was applied in the last frame.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D, Motion\");\n     *\n     * var deltaY = ent.motionDelta().y; // the change of y in the last frame\n     * ~~~\n     * @see Qrafty.math.Vector2D\n     */\n\tmotionDelta: function() {\n\t\treturn this._motionDelta;\n\t},\n\n\t/**@\n     * #.velocity\n     * @comp Motion\n     * @kind Method\n     * \n     * Method for accessing/modifying the linear(x,y) velocity. \n     * The velocity remains constant over time, unless the acceleration increases the velocity.\n     *\n     * @sign public Vector2D .velocity()\n     * @return The velocity Vector2D with the properties {x, y} that reflect the velocities in the <x, y> direction of the entity.\n     *\n     * Returns the current velocity. You can access/modify the properties in order to retrieve/change the velocity.\n\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D, Motion\");\n     *\n     * var vel = ent.velocity(); //returns the velocity vector\n     * vel.x;       // retrieve the velocity in the x direction\n     * vel.x = 0;   // set the velocity in the x direction\n     * vel.x += 4   // add to the velocity in the x direction\n     * ~~~\n     * @see Qrafty.math.Vector2D\n     */\n\tvelocity: function() {\n\t\treturn this._velocity;\n\t},\n\n\n\t/**@\n     * #.acceleration\n     * @comp Motion\n     * @kind Method\n     * \n     * Method for accessing/modifying the linear(x,y) acceleration. \n     * The acceleration increases the velocity over time, resulting in ever increasing speed.\n     * \n     * @sign public Vector2D .acceleration()\n     * @return The acceleration Vector2D with the properties {x, y} that reflects the acceleration in the <x, y> direction of the entity.\n     *\n     * Returns the current acceleration. You can access/modify the properties in order to retrieve/change the acceleration.\n     *\n     * @example\n     * ~~~\n     * var ent = Qrafty.e(\"2D, Motion\");\n     *\n     * var acc = ent.acceleration(); //returns the acceleration object\n     * acc.x;       // retrieve the acceleration in the x direction\n     * acc.x = 0;   // set the acceleration in the x direction\n     * acc.x += 4   // add to the acceleration in the x direction\n     * ~~~\n     * @see Qrafty.math.Vector2D\n     */\n\tacceleration: function() {\n\t\treturn this._acceleration;\n\t},\n\n\t/**@\n     * #.ccdbr\n     * @comp Motion\n     * @kind Method\n     * \n     * @sign public Object .ccdbr([Object ccdbr])\n     * @param ccdbr - an object to use as output\n     * @returns an object with `_x`, `_y`, `_w`, and `_h` properties; if an object is passed in, it will be reused rather than creating a new object.\n     *\n     * Return an object containing the entity's continuous collision detection bounding rectangle.\n     * The CCDBR encompasses the motion delta of the entity's bounding rectangle since last frame.\n     * The CCDBR is minimal if the entity moved on only one axis since last frame, however it encompasses a non-minimal region if it moved on both axis.\n     * For further details, refer to [FAQ#Tunneling](https://github.com/craftyjs/Qrafty/wiki/Qrafty-FAQ-%28draft%29#why-are-my-bullets-passing-through-other-entities-without-registering-hits).\n     *\n     * @note The keys have an underscore prefix. This is due to the x, y, w, h properties\n     * being setters and getters that wrap the underlying properties with an underscore (_x, _y, _w, _h).\n     *\n     * @see .motionDelta, Collision#.cbr\n     */\n\tccdbr: function (ccdbr) {\n\t\tvar pos = this._cbr || this._mbr || this,\n\t\t\tdx = this._dx,\n\t\t\tdy = this._dy,\n\t\t\tccdX = 0, ccdY = 0,\n\t\t\tccdW = dx > 0 ? (ccdX = dx) : -dx,\n\t\t\tccdH = dy > 0 ? (ccdY = dy) : -dy;\n\n\t\tccdbr = ccdbr || {};\n\t\tccdbr._x = pos._x - ccdX;\n\t\tccdbr._y = pos._y - ccdY;\n\t\tccdbr._w = pos._w + ccdW;\n\t\tccdbr._h = pos._h + ccdH;\n\n\t\treturn ccdbr;\n\t},\n\n\t/*\n     * s += v * Δt + (0.5 * a) * Δt * Δt\n     * v += a * Δt\n     */\n\t_linearMotionTick: function(frameData) {\n\t\tvar dt = frameData.dt / 1000; // time in s\n\t\tvar vx = this._vx, ax = this._ax,\n\t\t\tvy = this._vy, ay = this._ay;\n\n\t\t// s += v * Δt + (0.5 * a) * Δt * Δt\n\t\tvar dx = vx * dt + 0.5 * ax * dt * dt;\n\t\tvar dy = vy * dt + 0.5 * ay * dt * dt;\n\t\t// v += a * Δt\n\t\tthis.vx = vx + ax * dt;\n\t\tthis.vy = vy + ay * dt;\n\n\t\t// Check if direction of velocity has changed\n\t\tvar oldDirection = this.__oldDirection,\n\t\t\t_vx = this._vx, dvx = _vx ? (_vx<0 ? -1:1):0, // A quick implementation of Math.sign\n\t\t\t_vy = this._vy, dvy = _vy ? (_vy<0 ? -1:1):0;\n\t\tif (oldDirection.x !== dvx || oldDirection.y !== dvy) {\n\t\t\toldDirection.x = dvx;\n\t\t\toldDirection.y = dvy;\n\t\t\tthis.trigger(\"NewDirection\", oldDirection);\n\t\t}\n\n\t\tthis._dx = dx;\n\t\tthis._dy = dy;\n\n\t\t// Set the position using the optimized _setPosition method\n\t\tthis._setPosition(this._x + dx, this._y + dy);\n\t}\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/spatial/motion.js?");

/***/ }),

/***/ "./src/spatial/platform.js":
/*!*********************************!*\
  !*** ./src/spatial/platform.js ***!
  \*********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #Supportable\n * @category 2D\n * @kind Component\n * \n * @trigger LandedOnGround - When entity has landed. This event is triggered with the object the entity landed on.\n * @trigger LiftedOffGround - When entity has lifted off. This event is triggered with the object the entity stood on before lift-off.\n * @trigger CheckLanding - When entity is about to land. This event is triggered with the object the entity is about to land on. Third parties can respond to this event and prevent the entity from being able to land.\n *\n * Component that detects if the entity collides with the ground. This component is automatically added and managed by the Gravity component.\n * The appropriate events are fired when the entity state changes (lands on ground / lifts off ground). The current ground entity can also be accessed with `.ground`.\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Supportable\", {\n\t/**@\n     * #.ground\n     * @comp Supportable\n     * @kind Property\n     *\n     * Access the ground entity (which may be the actual ground entity if it exists, or `null` if it doesn't exist) and thus whether this entity is currently on the ground or not. \n     * The ground entity is also available through the events, when the ground entity changes.\n     */\n\t_ground: null,\n\t_groundComp: null,\n\t_preventGroundTunneling: false,\n\n\t/**@\n     * #.canLand\n     * @comp Supportable\n     * @kind Property\n     *\n     * The canLand boolean determines if the entity is allowed to land or not (e.g. perhaps the entity should not land if it's not falling).\n     * The Supportable component will trigger a \"CheckLanding\" event. \n     * Interested parties can listen to this event and prevent the entity from landing by setting `canLand` to false.\n     *\n     * @example\n     * ~~~\n     * var player = Qrafty.e(\"2D, Gravity\");\n     * player.bind(\"CheckLanding\", function(ground) {\n     *     if (player.y + player.h > ground.y + player.dy) { // forbid landing, if player's feet are not above ground\n     *         player.canLand = false;\n     *     }\n     * });\n     * ~~~\n     */\n\tcanLand: true,\n\n\tinit: async function () {\n\t\tawait this.requires(\"2D\");\n\t\tthis.__area = {_x: 0, _y: 0, _w: 0, _h: 0};\n\t\tthis.defineField(\"ground\", function() { return this._ground; }, function(newValue) {});\n\t},\n\tremove: function(destroyed) {\n\t\tthis.unbind(\"UpdateFrame\", this._detectGroundTick);\n\t},\n\n\t/*@\n     * #.startGroundDetection\n     * @comp Supportable\n     * @kind Method\n     * \n     * @sign private this .startGroundDetection([comp])\n     * @param comp - The name of a component that will be treated as ground\n     *\n     * This method is automatically called by the Gravity component and should not be called by the user.\n     *\n     * Enable ground detection for this entity no matter whether comp parameter is specified or not.\n     * If comp parameter is specified all entities with that component will stop this entity from falling.\n     * For a player entity in a platform game this would be a component that is added to all entities\n     * that the player should be able to walk on.\n     * \n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, DOM, Color, Gravity\")\n     *   .color(\"red\")\n     *   .attr({ w: 100, h: 100 })\n     *   .gravity(\"platform\");\n     * ~~~\n     *\n     * @see Gravity\n     */\n\tstartGroundDetection: function(ground) {\n\t\tif (ground) this._groundComp = ground;\n\t\tthis.uniqueBind(\"UpdateFrame\", this._detectGroundTick);\n\n\t\treturn this;\n\t},\n\t/*@\n     * #.stopGroundDetection\n     * @comp Supportable\n     * @kind Method\n     * \n     * @sign private this .stopGroundDetection()\n     *\n     * This method is automatically called by the Gravity component and should not be called by the user.\n     *\n     * Disable ground detection for this component. It can be reenabled by calling .startGroundDetection()\n     */\n\tstopGroundDetection: function() {\n\t\tthis.unbind(\"UpdateFrame\", this._detectGroundTick);\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.preventGroundTunneling\n     * @comp Supportable\n     * @kind Method\n     * \n     * @sign this .preventGroundTunneling([Boolean enable])\n     * @param enable - Boolean indicating whether to enable continous collision detection or not; if omitted defaults to true\n     *\n     * Prevent entity from falling through thin ground entities at high speeds. This setting is disabled by default.\n     * This is performed by approximating continous collision detection, which may impact performance negatively.\n     * For further details, refer to [FAQ#Tunneling](https://github.com/craftyjs/Qrafty/wiki/Qrafty-FAQ-%28draft%29#why-are-my-bullets-passing-through-other-entities-without-registering-hits).\n     *\n     * @see Motion#.ccdbr\n     */\n\tpreventGroundTunneling: function(enable) {\n\t\tif (typeof enable === \"undefined\")\n\t\t\tenable = true;\n\t\tif (enable)\n\t\t\tthis.requires(\"Motion\");\n\t\tthis._preventGroundTunneling = enable;\n\n\t\treturn this;\n\t},\n\n\t_detectGroundTick: function() {\n\t\tvar groundComp = this._groundComp,\n\t\t\tground = this._ground,\n\t\t\toverlap = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.rectManager.overlap,\n\t\t\tarea;\n\n\t\tif (!this._preventGroundTunneling) {\n\t\t\tvar pos = this._cbr || this._mbr || this;\n\t\t\tarea = this.__area;\n\t\t\tarea._x = pos._x;\n\t\t\tarea._y = pos._y;\n\t\t\tarea._w = pos._w;\n\t\t\tarea._h = pos._h;\n\t\t} else {\n\t\t\tarea = this.ccdbr(this.__area);\n\t\t}\n\t\tarea._h++; // Increase by 1 to make sure map.search() finds the floor\n\t\t// Decrease width by 1px from left and 1px from right, to fall more gracefully\n\t\t// area._x++; area._w--;\n\n\n\t\t// check if we lift-off\n\t\tif (ground) {\n\t\t\tvar garea = ground._cbr || ground._mbr || ground;\n\t\t\tif (!(ground.__c[groundComp] && (0,_core_core__WEBPACK_IMPORTED_MODULE_0__.default)(ground[0]) === ground && overlap(garea, area))) {\n\t\t\t\tthis._ground = null;\n\t\t\t\tthis.trigger(\"LiftedOffGround\", ground); // no collision with ground was detected for first time\n\t\t\t\tground = null;\n\t\t\t}\n\t\t}\n\n\t\t// check if we land (also possible to land on other ground object in same frame after lift-off from current ground object)\n\t\tif (!ground) {\n\t\t\tvar obj, oarea,\n\t\t\t\tresults = _core_core__WEBPACK_IMPORTED_MODULE_0__.default.map.unfilteredSearch(area),\n\t\t\t\ti = 0,\n\t\t\t\tl = results.length;\n\n\t\t\tfor (; i < l; ++i) {\n\t\t\t\tobj = results[i];\n\t\t\t\toarea = obj._cbr || obj._mbr || obj;\n\t\t\t\t// check for an intersection with the player\n\t\t\t\tif (obj !== this && obj.__c[groundComp] && overlap(oarea, area)) {\n\t\t\t\t\tthis.canLand = true;\n\t\t\t\t\tthis.trigger(\"CheckLanding\", obj); // is entity allowed to land?\n\t\t\t\t\tif (this.canLand) {\n\t\t\t\t\t\tthis._ground = ground = obj;\n\n\t\t\t\t\t\t// snap entity to ground object\n\t\t\t\t\t\tthis.y = ground._y - this._h;\n\t\t\t\t\t\tif (this._x > ground._x + ground._w)\n\t\t\t\t\t\t\tthis.x = ground._x + ground._w - 1;\n\t\t\t\t\t\telse if (this._x + this._w < ground._x)\n\t\t\t\t\t\t\tthis.x = ground._x - this._w + 1;\n\n\t\t\t\t\t\tthis.trigger(\"LandedOnGround\", ground); // collision with ground was detected for first time\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\n/**@\n * #GroundAttacher\n * @category 2D\n * @kind Component\n *\n * Attach the entity to the ground when it lands. Useful for platformers with moving platforms.\n * Remove the component to disable the functionality.\n *\n * Additionally, this component provides the entity with `Supportable` methods & events.\n *\n * @example\n * ~~~\n * Qrafty.e(\"2D, Gravity, GroundAttacher\")\n *     .gravity(\"Platform\"); // entity will land on and move with entites that have the \"Platform\" component\n * ~~~\n *\n * @see Supportable, Gravity\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"GroundAttacher\", {\n\t_groundAttach: function(ground) {\n\t\tground.attach(this);\n\t},\n\t_groundDetach: function(ground) {\n\t\tground.detach(this);\n\t},\n\n\tinit: function () {\n\t\tthis.requires(\"Supportable\");\n\n\t\tthis.bind(\"LandedOnGround\", this._groundAttach);\n\t\tthis.bind(\"LiftedOffGround\", this._groundDetach);\n\t},\n\tremove: function(destroyed) {\n\t\tthis.unbind(\"LandedOnGround\", this._groundAttach);\n\t\tthis.unbind(\"LiftedOffGround\", this._groundDetach);\n\t}\n});\n\n\n/**@\n * #Gravity\n * @category 2D\n * @kind Component\n * \n * Adds gravitational pull to the entity.\n *\n * Additionally, this component provides the entity with `Supportable` and `Motion` methods & events.\n *\n * Simulates jumping and falling when used with the `Twoway` component and is thus well suited for side-scrolling platformer type games.\n * This component should not be used alongside `Fourway` or `Multiway`.\n *\n * @see Supportable, Motion\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.c(\"Gravity\", {\n\t_gravityConst: 500,\n\t_gravityActive: false,\n\n\tinit: function () {\n\t\tthis.requires(\"2D, Supportable, Motion\");\n\n\t\tthis.bind(\"LiftedOffGround\", this._startGravity); // start gravity if we are off ground\n\t\tthis.bind(\"LandedOnGround\", this._stopGravity); // stop gravity once landed\n\t},\n\tremove: function(destroyed) {\n\t\tthis.unbind(\"LiftedOffGround\", this._startGravity);\n\t\tthis.unbind(\"LandedOnGround\", this._stopGravity);\n\t},\n\n\t_gravityCheckLanding: function(ground) {\n\t\tif (this._dy < 0) \n\t\t\tthis.canLand = false;\n\t},\n\n\t/**@\n     * #.gravity\n     * @comp Gravity\n     * @kind Method\n     * \n     * @sign public this .gravity([comp])\n     * @param comp - The name of a component that will stop this entity from falling\n     *\n     * Enable gravity for this entity no matter whether comp parameter is specified or not.\n     * If comp parameter is specified all entities with that component will stop this entity from falling.\n     * For a player entity in a platform game this would be a component that is added to all entities\n     * that the player should be able to walk on.\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, DOM, Color, Gravity\")\n     *   .color(\"red\")\n     *   .attr({ w: 100, h: 100 })\n     *   .gravity(\"platform\");\n     * ~~~\n     */\n\tgravity: function (comp) {\n\t\tthis.uniqueBind(\"CheckLanding\", this._gravityCheckLanding);\n\t\tthis.startGroundDetection(comp);\n\t\tthis._startGravity();\n\n\t\treturn this;\n\t},\n\t/**@\n     * #.antigravity\n     * @comp Gravity\n     * @kind Method\n     * \n     * @sign public this .antigravity()\n     * Disable gravity for this component. It can be reenabled by calling .gravity()\n     */\n\tantigravity: function () {\n\t\tthis._stopGravity();\n\t\tthis.stopGroundDetection();\n\t\tthis.unbind(\"CheckLanding\", this._gravityCheckLanding);\n\n\t\treturn this;\n\t},\n\n\t/**@\n     * #.gravityConst\n     * @comp Gravity\n     * @kind Method\n     * \n     * @sign public this .gravityConst(g)\n     * @param g - gravitational constant in pixels per second squared\n     *\n     * Set the gravitational constant to g for this entity. The default is 500. The greater g, the stronger the downwards acceleration.\n     *\n     * @example\n     * ~~~\n     * Qrafty.e(\"2D, DOM, Color, Gravity\")\n     *   .color(\"red\")\n     *   .attr({ w: 100, h: 100 })\n     *   .gravityConst(750)\n     *   .gravity(\"platform\");\n     * ~~~\n     */\n\tgravityConst: function (g) {\n\t\tif (this._gravityActive) { // gravity active, change acceleration\n\t\t\tthis.ay -= this._gravityConst;\n\t\t\tthis.ay += g;\n\t\t}\n\t\tthis._gravityConst = g;\n\n\t\treturn this;\n\t},\n\n\t_startGravity: function() {\n\t\tif (this._gravityActive) return;\n\t\tthis._gravityActive = true;\n\t\tthis.ay += this._gravityConst;\n\t},\n\t_stopGravity: function() {\n\t\tif (!this._gravityActive) return;\n\t\tthis._gravityActive = false;\n\t\tthis.ay = 0;\n\t\tthis.vy = 0;\n\t}\n});\n\n\n\n//# sourceURL=webpack://qrafty-v2/./src/spatial/platform.js?");

/***/ }),

/***/ "./src/spatial/rect-manager.js":
/*!*************************************!*\
  !*** ./src/spatial/rect-manager.js ***!
  \*************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n//var Qrafty = require(\"../core/core.js\");\n;\n\n/**@\n * #Qrafty.rectManager\n * @category 2D\n * @kind CoreObj\n *\n * Collection of methods for handling rectangles\n */\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.extend({\n\t/** recManager: an object for managing dirty rectangles. */\n\trectManager: {\n\t\t/** Finds smallest rectangles that overlaps a and b, merges them into target */\n\t\tmerge: function (a, b, target) {\n\t\t\tif (typeof target === \"undefined\")\n\t\t\t\ttarget = {};\n\t\t\t// Doing it in this order means we can use either a or b as the target, with no conflict\n\t\t\ttarget._h = Math.max(a._y + a._h, b._y + b._h);\n\t\t\ttarget._w = Math.max(a._x + a._w, b._x + b._w);\n\t\t\ttarget._x = Math.min(a._x, b._x);\n\t\t\ttarget._y = Math.min(a._y, b._y);\n\t\t\ttarget._w -= target._x;\n\t\t\ttarget._h -= target._y;\n\n\t\t\treturn target;\n\t\t},\n\n\t\t/**@\n       * #Qrafty.rectManager.overlap\n       * @comp Qrafty.rectManager\n       * @kind Method\n       * \n       * @sign public Boolean Qrafty.rectManager.overlap(Object rectA, Object rectA)\n       * @param rectA - An object that must have the `_x, _y, _w, _h` values as properties\n       * @param rectB - An object that must have the `_x, _y, _w, _h` values as properties\n       * @return true if the rectangles overlap; false otherwise\n       *\n       * Checks whether two rectangles overlap.\n       */\n\t\toverlap: function (rectA, rectB) {\n\t\t\treturn (rectA._x < rectB._x + rectB._w && rectA._x + rectA._w > rectB._x &&\n                rectA._y < rectB._y + rectB._h && rectA._y + rectA._h > rectB._y);\n\t\t},\n      \n\t\t/**@\n       * #Qrafty.rectManager.integerBounds\n       * @comp Qrafty.rectManager\n       * @kind Method\n       * \n       * @sign public Boolean Qrafty.rectManager.integerBounds(Object rect)\n       * @param rect - An object that must have the `_x, _y, _w, _h` values as properties\n       * @return An enclosing rectangle with integer coordinates\n       *\n       * Calculate the smallest rectangle with integer coordinates that encloses the specified rectangle,\n       * modifying the passed object to have those bounds.\n       */\n\t\tintegerBounds: function(rect) {\n\t\t\t// Truncate to next, lower integer, but don't modify if already integer\n\t\t\trect._x = Math.floor(rect._x);\n\t\t\trect._y = Math.floor(rect._y);\n\t\t\t// Ceil to next, higher integer, but don't modify if already integer\n\t\t\trect._w = Math.ceil(rect._w);\n\t\t\trect._h = Math.ceil(rect._h);\n\t\t\treturn rect;\n\t\t},\n\n\t\t/**@\n      * #Qrafty.rectManager.mergeSet\n      * @comp Qrafty.rectManager\n      * @kind Method\n      *\n      * @sign public Object Qrafty.rectManager.mergeSet(Object set)\n      * @param set - an array of rectangular regions\n      *\n      * Merge any consecutive, overlapping rects into each other.\n      * Its an optimization for the redraw regions.\n      *\n      * The order of set isn't strictly meaningful,\n      * but overlapping objects will often cause each other to change,\n      * and so might be consecutive.\n      */\n\t\tmergeSet: function (set) {\n\t\t\tif (set.length < 2) return set;\n\n\t\t\tvar i = set.length - 1;\n\t\t\twhile (i--) {\n\t\t\t\t// If current and next overlap, merge them together into the first, removing the second\n\t\t\t\tif (this.overlap(set[i], set[i + 1])) {\n\t\t\t\t\tthis.merge(set[i], set[i + 1], set[i]);\n\t\t\t\t\tset.splice(i + 1, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn set;\n\t\t},\n\n\t\t/**@\n       * #Qrafty.rectManager.boundingRect\n       * @comp Qrafty.rectManager\n       * @kind Method\n       * \n       * @sign public Qrafty.rectManager.boundingRect(set)\n       * @param set - An array of rectangles\n       *\n       * - Calculate the common bounding rect of multiple canvas entities.\n       * - Returns coords\n       */\n\t\tboundingRect: function (set) {\n\t\t\tif (!set || !set.length) return;\n\t\t\tvar i = 1,\n\t\t\t\tl = set.length,\n\t\t\t\tcurrent, master = set[0],\n\t\t\t\ttmp;\n\t\t\tmaster = [master._x, master._y, master._x + master._w, master._y + master._h];\n\t\t\twhile (i < l) {\n\t\t\t\tcurrent = set[i];\n\t\t\t\ttmp = [current._x, current._y, current._x + current._w, current._y + current._h];\n\t\t\t\tif (tmp[0] < master[0]) master[0] = tmp[0];\n\t\t\t\tif (tmp[1] < master[1]) master[1] = tmp[1];\n\t\t\t\tif (tmp[2] > master[2]) master[2] = tmp[2];\n\t\t\t\tif (tmp[3] > master[3]) master[3] = tmp[3];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\ttmp = master;\n\t\t\tmaster = {\n\t\t\t\t_x: tmp[0],\n\t\t\t\t_y: tmp[1],\n\t\t\t\t_w: tmp[2] - tmp[0],\n\t\t\t\t_h: tmp[3] - tmp[1]\n\t\t\t};\n\n\t\t\treturn master;\n\t\t},\n\n\t\t// Qrafty.rectManager._rectPool\n\t\t//\n\t\t// This is a private object used internally by 2D methods\n\t\t// Cascade and _attr need to keep track of an entity's old position,\n\t\t// but we want to avoid creating temp objects every time an attribute is set.\n\t\t// The solution is to have a pool of objects that can be reused.\n\t\t//\n\t\t// The current implementation makes a BIG ASSUMPTION:  that if multiple rectangles are requested,\n\t\t// the later one is recycled before any preceding ones.  This matches how they are used in the code.\n\t\t// Each rect is created by a triggered event, and will be recycled by the time the event is complete.\n\t\t_pool: (function () {\n\t\t\tvar pool = [],\n\t\t\t\tpointer = 0;\n\t\t\treturn {\n\t\t\t\tget: function (x, y, w, h) {\n\t\t\t\t\tif (pool.length <= pointer)\n\t\t\t\t\t\tpool.push({});\n\t\t\t\t\tvar r = pool[pointer++];\n\t\t\t\t\tr._x = x;\n\t\t\t\t\tr._y = y;\n\t\t\t\t\tr._w = w;\n\t\t\t\t\tr._h = h;\n\t\t\t\t\treturn r;\n\t\t\t\t},\n\n\t\t\t\tcopy: function (o) {\n\t\t\t\t\tif (pool.length <= pointer)\n\t\t\t\t\t\tpool.push({});\n\t\t\t\t\tvar r = pool[pointer++];\n\t\t\t\t\tr._x = o._x;\n\t\t\t\t\tr._y = o._y;\n\t\t\t\t\tr._w = o._w;\n\t\t\t\t\tr._h = o._h;\n\t\t\t\t\treturn r;\n\t\t\t\t},\n\n\t\t\t\trecycle: function (o) {\n\t\t\t\t\tpointer--;\n\t\t\t\t}\n\t\t\t};\n\t\t})(),\n\n\t}\n\n\n});\n\n\n//# sourceURL=webpack://qrafty-v2/./src/spatial/rect-manager.js?");

/***/ }),

/***/ "./src/spatial/spatial-grid.js":
/*!*************************************!*\
  !*** ./src/spatial/spatial-grid.js ***!
  \*************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core */ \"./src/core/core.js\");\n;\n\n/**\n * Spatial HashMap for broad phase collision\n *\n * @author Louis Stowasser\n */\n\n\n/**@\n * #Crafty.HashMap\n * @category 2D\n * @kind Class\n *\n * Broad-phase collision detection engine. See background information at\n *\n * - [N Tutorial B - Broad-Phase Collision](http://www.metanetsoftware.com/technique/tutorialB.html)\n * - [Broad-Phase Collision Detection with CUDA](http://http.developer.nvidia.com/GPUGems3/gpugems3_ch32.html)\n * @see Crafty.map\n */\nvar cellsize, // TODO: make cellsize an instance property, so multiple maps with different cellsizes can be created\n\tSPACE = \" \",\n\tkeyHolder = {}; // temp object for reuse\n\n/**@\n * #Crafty.HashMap.constructor\n * @comp Crafty.HashMap\n * @kind Class\n *\n * @sign public void Crafty.HashMap([cellsize])\n * @param cellsize - the cell size. If omitted, `cellsize` is 64.\n *\n * Set `cellsize`.\n * And create `this.map`.\n */\nvar HashMap = function (cell) {\n\tcellsize = cell || 64;\n\tthis.map = {};\n\n\tthis.boundsDirty = false;\n\tthis.coordBoundsDirty = false;\n\tthis.boundsHash = {\n\t\tmaxX: -Infinity,\n\t\tmaxY: -Infinity,\n\t\tminX: Infinity,\n\t\tminY: Infinity\n\t};\n\tthis.boundsCoords = {\n\t\tmaxX: -Infinity,\n\t\tmaxY: -Infinity,\n\t\tminX: Infinity,\n\t\tminY: Infinity\n\t};\n};\n\n/**@\n * #Crafty.HashMap.key\n * @comp Crafty.HashMap\n * @kind Method\n *\n * @sign public Object Crafty.HashMap.key(Object obj[, Object keys])\n * @param obj - an Object that has .cbr(), .mbr() or _x, _y, _w and _h.\n * @param [keys] - optional object to reuse for the saving result in\n * @returns an object describing the region in grid cells the given object is located in - { x1: start col index, y1: start row index, x2: end col index, y2: end row index}\n *\n * Get the rectangular region (in terms of the grid, with grid size `cellsize`), where the object may fall in. This region is determined by the object's bounding box.\n * The `cellsize` is 64 by default.\n *\n * @see Crafty.HashMap.constructor\n */\nHashMap.key = function (obj, keys) {\n\tobj = obj._cbr || obj._mbr || obj;\n\tkeys = keys || {};\n\n\tkeys.x1 = Math.floor(obj._x / cellsize);\n\tkeys.y1 = Math.floor(obj._y / cellsize);\n\tkeys.x2 = Math.floor((obj._w + obj._x) / cellsize);\n\tkeys.y2 = Math.floor((obj._h + obj._y) / cellsize);\n\treturn keys;\n};\n\nHashMap.hash = function (keys) {\n\treturn keys.x1 + SPACE + keys.y1 + SPACE + keys.x2 + SPACE + keys.y2;\n};\n\n// TODO make this an instance property getter\nHashMap.cellsize = function() {\n\treturn cellsize;\n};\n\n/**@\n * #Crafty.map\n * @category 2D\n * @kind CoreObject\n *\n * Functions related with querying entities.\n * @see Crafty.HashMap\n */\nHashMap.prototype = {\n\t/**@\n     * #Crafty.map.insert\n     * @comp Crafty.map\n     * @kind Method\n     *\n     * @sign public Object Crafty.map.insert(Object obj[, Object entry])\n     * @param obj - An entity to be inserted.\n     * @param entry - An existing entry object to reuse.  (Optional)\n     * @returns An object representing this object's entry in the HashMap\n     *\n     * `obj` is inserted in '.map' of the corresponding broad phase cells. An object of the following fields is returned.\n     * ~~~\n     * {\n     *   keys: the object that keep track of cells\n     *   obj: The inserted object\n     *   map: the HashMap object\n     * }\n     * ~~~\n     */\n\tinsert: function (obj, entry) {\n\t\tvar i, j, hash;\n\t\tvar keys = HashMap.key(obj, entry && entry.keys);\n\t\tentry = entry || new Entry(keys, obj, this);\n\n\t\t//insert into all x buckets\n\t\tfor (i = keys.x1; i <= keys.x2; i++) {\n\t\t\t//insert into all y buckets\n\t\t\tfor (j = keys.y1; j <= keys.y2; j++) {\n\t\t\t\thash = (i << 16) ^ j;\n\t\t\t\tif (!this.map[hash]) this.map[hash] = [];\n\t\t\t\tthis.map[hash].push(obj);\n\t\t\t}\n\t\t}\n\n\t\t//mark map boundaries as dirty\n\t\tthis.boundsDirty = true;\n\n\t\treturn entry;\n\t},\n\n\t/**@\n     * #Crafty.map.search\n     * @comp Crafty.map\n     * @kind Method\n     *\n     * @sign public Array Crafty.map.search(Object rect[, Array results])\n     * @param rect - the rectangular region to search for entities.\n     *               This object must contain the properties `_x`,`_y`,`_w`,`_h`.\n     * @param results - If passed, entities found will be appended to this array.\n     * @return a (possibly empty) array of entities that have been found in the given region\n     *\n     * Do a search for entities in the given region.  Returned entities are guaranteed\n     * to overlap with the given region.\n     *\n     * The easier usage is with `filter == true`. For performance reason, you may use `filter == false`, and filter the result yourself. See examples in drawing.js and collision.js.\n     *\n     * @example\n     * ~~~\n     * // search for entities located in the current visible region of the viewport\n     * var results = Crafty.map.search(Crafty.viewport.rect());\n     * // iterate over all those entities\n     * var ent;\n     * for (var i = 0, l = results.length; i < l; ++i) {\n     *     // do something with an entity\n     *     ent = results[i];\n     *     Crafty.log('Found entity with id', ent.getId());\n     * }\n     * ~~~\n     */\n\t_searchHolder: [],\n\tsearch: function (rect, results) {\n\t\tvar keys = HashMap.key(rect, keyHolder),\n\t\t\ti, j, k,  cell,\n\t\t\tpreviouslyChecked = this._searchHolder;\n\t\tresults = results || [];\n\t\tpreviouslyChecked.length = 0;\n\n\t\tvar obj;\n\t\t//search in all x buckets\n\t\tfor (i = keys.x1; i <= keys.x2; i++) {\n\t\t\t//insert into all y buckets\n\t\t\tfor (j = keys.y1; j <= keys.y2; j++) {\n\t\t\t\tif ((cell = this.map[(i << 16) ^ j])) {\n\t\t\t\t\tfor (k = 0; k < cell.length; k++) {\n\t\t\t\t\t\tif (previouslyChecked[cell[k][0]]) continue;\n\t\t\t\t\t\tobj = previouslyChecked[cell[k][0]] = cell[k];\n\t\t\t\t\t\tobj = obj._cbr || obj._mbr || obj;\n\t\t\t\t\t\tif (obj._x < rect._x + rect._w && obj._x + obj._w > rect._x &&\n                                obj._y < rect._y + rect._h && obj._y + obj._h > rect._y) {\n\t\t\t\t\t\t\tresults.push(cell[k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t},\n\n\t/**@\n     * #Crafty.map.unfilteredSearch\n     * @comp Crafty.map\n     * @kind Method\n     *\n     * @sign public Array Crafty.map.search(Object rect[, Array results])\n     * @param rect - the rectangular region to search for entities.\n     *               This object must contain the properties `_x`,`_y`,`_w`,`_h`.\n     * @param results - If passed, entities found will be appended to this array.\n     * @return a (possibly empty) array of entities that have been found in the given region\n     *\n     * Do a search for entities in the given region.  Returned entities are **not** guaranteed\n     * to overlap with the given region, and the results may contain duplicates.\n     * \n     * This method is intended to be used as the first step of a more complex search.\n     * More common use cases should use Crafty.map.search, which filters the results.\n     * \n     * @see Crafty.map.search\n     */\n\tunfilteredSearch: function(rect, results) {\n\t\tvar keys = HashMap.key(rect, keyHolder),\n\t\t\ti, j, k,  cell;\n\t\tresults = results || [];\n\n\t\t//search in all x buckets\n\t\tfor (i = keys.x1; i <= keys.x2; i++) {\n\t\t\t//insert into all y buckets\n\t\t\tfor (j = keys.y1; j <= keys.y2; j++) {\n\t\t\t\tif ((cell = this.map[(i << 16) ^ j])) {\n\t\t\t\t\tfor (k = 0; k < cell.length; k++) {\n\t\t\t\t\t\tresults.push(cell[k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t},\n\n\t/**@\n     * #Crafty.map.remove\n     * @comp Crafty.map\n     * @kind Method\n     *\n     * @sign public void Crafty.map.remove(Entry entry)\n     * @param entry - An entry to remove from the hashmap\n     *\n     * Remove an entry from the broad phase map.\n     *\n     * @example\n     * ~~~\n     * Crafty.map.remove(e);\n     * ~~~\n     */\n\tremove: function (entry) {\n\t\tvar keys = entry.keys;\n\t\tvar obj = entry.obj;\n\t\tvar i = 0,\n\t\t\tj, hash;\n\n\t\t//search in all x buckets\n\t\tfor (i = keys.x1; i <= keys.x2; i++) {\n\t\t\t//insert into all y buckets\n\t\t\tfor (j = keys.y1; j <= keys.y2; j++) {\n\t\t\t\thash = (i << 16) ^ j;\n\n\t\t\t\tif (this.map[hash]) {\n\t\t\t\t\tvar cell = this.map[hash],\n\t\t\t\t\t\tm, n = cell.length;\n\t\t\t\t\t//loop over objs in cell and delete\n\t\t\t\t\tfor (m = 0; m < n; m++)\n\t\t\t\t\t\tif (cell[m] && cell[m][0] === obj[0])\n\t\t\t\t\t\t\tcell.splice(m, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//mark map boundaries as dirty\n\t\tthis.boundsDirty = true;\n\t},\n\n\t/**@\n     * #Crafty.map.refresh\n     * @comp Crafty.map\n     * @kind Method\n     *\n     * @sign public void Crafty.map.refresh(Entry entry)\n     * @param entry - An entry to update\n     *\n     * Update an entry's keys, and its position in the broad phrase map.\n     *\n     * @example\n     * ~~~\n     * Crafty.map.refresh(e);\n     * ~~~\n     */\n\trefresh: function (entry) {\n\t\tvar keys = entry.keys;\n\t\tvar obj = entry.obj;\n\t\tvar cell, i, j, m, n;\n\n\t\t//First delete current object from appropriate cells\n\t\tfor (i = keys.x1; i <= keys.x2; i++) {\n\t\t\tfor (j = keys.y1; j <= keys.y2; j++) {\n\t\t\t\tcell = this.map[(i << 16) ^ j];\n\t\t\t\tif (cell) {\n\t\t\t\t\tn = cell.length;\n\t\t\t\t\t//loop over objs in cell and delete\n\t\t\t\t\tfor (m = 0; m < n; m++)\n\t\t\t\t\t\tif (cell[m] && cell[m][0] === obj[0])\n\t\t\t\t\t\t\tcell.splice(m, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//update keys\n\t\tHashMap.key(obj, keys);\n\n\t\t//insert into all rows and columns\n\t\tfor (i = keys.x1; i <= keys.x2; i++) {\n\t\t\tfor (j = keys.y1; j <= keys.y2; j++) {\n\t\t\t\tcell = this.map[(i << 16) ^ j];\n\t\t\t\tif (!cell) cell = this.map[(i << 16) ^ j] = [];\n\t\t\t\tcell.push(obj);\n\t\t\t}\n\t\t}\n\n\t\t//mark map boundaries as dirty\n\t\tthis.boundsDirty = true;\n\n\t\treturn entry;\n\t},\n\n\n\t/**@\n     * #Crafty.map.boundaries\n     * @comp Crafty.map\n     * @kind Method\n     *\n     * @sign public Object Crafty.map.boundaries()\n     * @returns An object with the following structure, which represents an MBR which contains all entities\n     *\n     * Return a copy of the minimum bounding rectangle encompassing all entities.\n     *\n     * ~~~\n     * {\n     *   min: {\n     *     x: val_x,\n     *     y: val_y\n     *   },\n     *   max: {\n     *     x: val_x,\n     *     y: val_y\n     *   }\n     * }\n     * ~~~\n     */\n\tboundaries: function() {\n\t\t// TODO: flatten output, likewise do it for Crafty.viewport.bounds\n\t\t// TODO: accept optional parameter to save result in\n\t\tthis._updateBoundaries();\n\t\tvar bounds = this.boundsCoords;\n\t\treturn {\n\t\t\tmin: {\n\t\t\t\tx: bounds.minX,\n\t\t\t\ty: bounds.minY\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: bounds.maxX,\n\t\t\t\ty: bounds.maxY\n\t\t\t}\n\t\t};\n\t},\n\n\t/**\n     * #Crafty.map._keyBoundaries\n     * @comp Crafty.map\n     * @kind Method\n     *\n     * @sign private Object Crafty.map._keyBoundaries()\n     * @returns An object with the following structure, which represents an MBR which contains all hash keys\n     *\n     * Find boundaries of row/col cell grid keys instead of actual x/y pixel coordinates.\n     *\n     * ~~~\n     * {\n     *   minX: val_x,\n     *   minY: val_y,\n     *   maxX: val_x,\n     *   maxY: val_y\n     * }\n     * ~~~\n     */\n\t_keyBoundaries: function() {\n\t\tthis._updateBoundaries();\n\t\treturn this.boundsHash;\n\t},\n\n\t_updateBoundaries: function() {\n\t\t// update map boundaries if they were changed\n\t\tif (!this.boundsDirty && !this.coordBoundsDirty) return;\n\n\n\t\tvar hash = this.boundsHash;\n\t\t// Optimization: if no entities have moved cells, \n\t\t// we don't need to recalculate the hash boundaries\n\t\tif (this.boundsDirty) {\n\t\t\thash.maxX = -Infinity;\n\t\t\thash.maxY = -Infinity;\n\t\t\thash.minX = Infinity;\n\t\t\thash.minY = Infinity;\n\t\t}\n\n\t\tvar coords = this.boundsCoords;\n\t\tcoords.maxX = -Infinity;\n\t\tcoords.maxY = -Infinity;\n\t\tcoords.minX = Infinity;\n\t\tcoords.minY = Infinity;\n\n\t\tvar k, ent, cell;\n\t\t//Using broad phase hash to speed up the computation of boundaries.\n\t\tfor (var h in this.map) {\n\t\t\tcell = this.map[h];\n\t\t\tif (!cell.length) continue;\n\n\t\t\t//broad phase coordinate\n\t\t\tvar i = h >> 16,\n\t\t\t\tj = (h << 16) >> 16;\n\t\t\tif (j < 0) {\n\t\t\t\ti = ~i; // i ^ -1\n\t\t\t}\n\n\t\t\tif (i >= hash.maxX) {\n\t\t\t\thash.maxX = i;\n\t\t\t\tfor (k in cell) {\n\t\t\t\t\tent = cell[k];\n\t\t\t\t\t//TODO: remove these checks introduced by 25e7c88f61f64525adc32f7fd776099413cb1567?\n\t\t\t\t\t//make sure that this is a Crafty entity\n\t\t\t\t\tif (typeof ent === \"object\" && \"requires\" in ent) {\n\t\t\t\t\t\tcoords.maxX = Math.max(coords.maxX, ent.x + ent.w);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i <= hash.minX) {\n\t\t\t\thash.minX = i;\n\t\t\t\tfor (k in cell) {\n\t\t\t\t\tent = cell[k];\n\t\t\t\t\tif (typeof ent === \"object\" && \"requires\" in ent) {\n\t\t\t\t\t\tcoords.minX = Math.min(coords.minX, ent.x);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j >= hash.maxY) {\n\t\t\t\thash.maxY = j;\n\t\t\t\tfor (k in cell) {\n\t\t\t\t\tent = cell[k];\n\t\t\t\t\tif (typeof ent === \"object\" && \"requires\" in ent) {\n\t\t\t\t\t\tcoords.maxY = Math.max(coords.maxY, ent.y + ent.h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j <= hash.minY) {\n\t\t\t\thash.minY = j;\n\t\t\t\tfor (k in cell) {\n\t\t\t\t\tent = cell[k];\n\t\t\t\t\tif (typeof ent === \"object\" && \"requires\" in ent) {\n\t\t\t\t\t\tcoords.minY = Math.min(coords.minY, ent.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// mark map boundaries as clean\n\t\tthis.boundsDirty = false;\n\t\tthis.coordBoundsDirty = false;\n\t},\n\n\t/**@\n     * #Crafty.map.traverseRay\n     * @comp Crafty.map\n     * @kind Method\n     *\n     * @sign public void Crafty.map.traverseRay(Object origin, Object direction, Function callback)\n     * @param origin - the point of origin from which the ray will be cast. The object must contain the properties `_x` and `_y`.\n     * @param direction - the direction the ray will be cast. It must be normalized. The object must contain the properties `x` and `y`.\n     * @param callback - a callback that will be called for each object that is encountered along the ray.\n     *                   This function is called with two arguments: The first one represents the object encountered;\n     *                   the second one represents the distance up to which all objects have been reported so far.\n     *                   The callback can return a truthy value in order to stop the traversal early.\n     *\n     * Traverse the spatial map in the direction of the supplied ray.\n     *\n     * Given the `origin` and `direction` the ray is cast and the `callback` is called\n     * for each object encountered in map cells traversed by the ray.\n     *\n     * The callback is called for each object that may be intersected by the ray.\n     * Whether an actual intersection occurs shall be determined by the callback's implementation.\n     *\n     * @example\n     * ~~~\n     * Crafty.e(\"2D\")\n     *       .setName('First entity')\n     *       .attr({x: 0, y: 0, w: 10, h: 10});\n     *\n     * Crafty.e(\"2D\")\n     *       .setName('Second entity')\n     *       .attr({x: 20, y: 20, w: 10, h: 10});\n     *\n     * var origin = {_x: -25, _y: -25};\n     * var direction = new Crafty.math.Vector2D(1, 1).normalize();\n     *\n     * Crafty.map.traverseRay(origin, direction, function(ent, processedDistance) {\n     *   Crafty.log('Encountered entity named', ent.getName()); // logs 'First entity'\n     *   Crafty.log('All entities up to', processedDistance, 'px away have been reported thus far.');\n     *   Crafty.log('Stopping traversal after encountering the first entity.');\n     *   return true;\n     * });\n     * ~~~\n     */\n\n\t// See [this tutorial](http://www.flipcode.com/archives/Raytracing_Topics_Techniques-Part_4_Spatial_Subdivisions.shtml) and linked materials\n\t// Segment-segment intersection is described here: http://stackoverflow.com/a/565282/3041008\n\t//\n\t// origin = {_x, _y}\n\t// direction = {x, y}, must be normalized\n\t//\n\t//\n\t// # Let\n\t//  edge = end - start\n\t//  edge x edge == 0\n\t//\n\t// # Segment - segment intersection equation\n\t//  origin + d * direction = start + e * edge\n\t//\n\t// # Solving for d\n\t//  (origin + d * direction) x edge = (start + e * edge) x edge\n\t//  d = (start − origin) × edge / (direction × edge)\n\t//\n\t//      (start.x - origin.x) * edge.y - (start.y - origin.y) * edge.x\n\t//  d = --------------------------------------------------------------\n\t//               direction.x * edge.y - direction.y * edge.x\n\t//\n\t//\n\t// # In case ray intersects vertical cell grid edge\n\t// start = (x, 0)\n\t// edge = (0, 1)\n\t//\n\t//      start.x - origin.x\n\t//  d = -------------------\n\t//         direction.x\n\t//\n\t// # In case ray intersects horizontal cell grid edge\n\t// start = (0, y)\n\t// edge = (1, 0)\n\t//\n\t//      start.y - origin.y\n\t//  d = -------------------\n\t//         direction.y\n\t//\n\ttraverseRay: function(origin, direction, callback) {\n\t\tvar dirX = direction.x,\n\t\t\tdirY = direction.y;\n\t\t// copy input data\n\t\t// TODO maybe allow HashMap.key search with point only\n\t\torigin = {\n\t\t\t_x: origin._x,\n\t\t\t_y: origin._y,\n\t\t\t_w: 0,\n\t\t\t_h: 0\n\t\t};\n\n\n\t\tvar keyBounds = this._keyBoundaries();\n\t\tvar keys = HashMap.key(origin, keyHolder);\n\n\t\t// calculate col & row cell indices\n\t\tvar currentCol = keys.x1,\n\t\t\tcurrentRow = keys.y1;\n\t\tvar minCol = keyBounds.minX,\n\t\t\tminRow = keyBounds.minY,\n\t\t\tmaxCol = keyBounds.maxX,\n\t\t\tmaxRow = keyBounds.maxY;\n\t\t// direction to traverse cells\n\t\tvar stepCol = dirX > 0 ? 1 : (dirX < 0 ? -1 : 0),\n\t\t\tstepRow = dirY > 0 ? 1 : (dirY < 0 ? -1 : 0);\n\n\n\t\t// first, next cell edge in absolute coordinates\n\t\tvar firstCellEdgeX = (dirX >= 0) ? (currentCol + 1) * cellsize : currentCol * cellsize,\n\t\t\tfirstCellEdgeY = (dirY >= 0) ? (currentRow + 1) * cellsize : currentRow * cellsize;\n\n\t\t// distance from origin to previous cell edge\n\t\tvar previousDistance = -Infinity;\n\n\t\t// distances to next horizontal and vertical cell edge\n\t\tvar deltaDistanceX = 0, // distance for the ray to be advanced to cross a whole cell horizontally\n\t\t\tdeltaDistanceY = 0, // distance for the ray to be advanced to cross a whole cell vertically\n\t\t\tnextDistanceX = Infinity, // distance we can advance(increase magnitude) ray until we advance to next horizontal cell\n\t\t\tnextDistanceY = Infinity; // distance we can advance(increase magnitude) ray until we advance to next vertical cell\n\n\t\tvar norm;\n\t\tif (dirX !== 0) {\n\t\t\tnorm = 1.0 / dirX;\n\t\t\tnextDistanceX = (firstCellEdgeX - origin._x) * norm;\n\t\t\tdeltaDistanceX = (cellsize * stepCol) * norm;\n\t\t}\n\t\tif (dirY !== 0) {\n\t\t\tnorm = 1.0 / dirY;\n\t\t\tnextDistanceY = (firstCellEdgeY - origin._y) * norm;\n\t\t\tdeltaDistanceY = (cellsize * stepRow) * norm;\n\t\t}\n\n\n\t\t// advance starting cell to be inside of map bounds\n\t\twhile ((stepCol === 1 && currentCol < minCol && minCol !== Infinity) || (stepCol === -1 && currentCol > maxCol && maxCol !== -Infinity) ||\n               (stepRow === 1 && currentRow < minRow && minRow !== Infinity) || (stepRow === -1 && currentRow > maxRow && maxRow !== -Infinity)) {\n\n\t\t\t// advance to closest cell\n\t\t\tif (nextDistanceX < nextDistanceY) {\n\t\t\t\tpreviousDistance = nextDistanceX;\n\n\t\t\t\tcurrentCol += stepCol;\n\t\t\t\tnextDistanceX += deltaDistanceX;\n\t\t\t} else {\n\t\t\t\tpreviousDistance = nextDistanceY;\n\n\t\t\t\tcurrentRow += stepRow;\n\t\t\t\tnextDistanceY += deltaDistanceY;\n\t\t\t}\n\t\t}\n\n\t\tvar cell;\n\t\t// traverse over cells\n\t\t// TODO: maybe change condition to `while (currentCol !== endX) || (currentRow !== endY)`\n\t\twhile ((minCol <= currentCol && currentCol <= maxCol) &&\n               (minRow <= currentRow && currentRow <= maxRow)) {\n\n\t\t\t// process cell\n\t\t\tif ((cell = this.map[(currentCol << 16) ^ currentRow])) {\n\t\t\t\t// check each object inside this cell\n\t\t\t\tfor (var k = 0; k < cell.length; k++) {\n\t\t\t\t\t// if supplied callback returns true, abort traversal\n\t\t\t\t\tif (callback(cell[k], previousDistance))\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// advance to closest cell\n\t\t\tif (nextDistanceX < nextDistanceY) {\n\t\t\t\tpreviousDistance = nextDistanceX;\n\n\t\t\t\tcurrentCol += stepCol;\n\t\t\t\tnextDistanceX += deltaDistanceX;\n\t\t\t} else {\n\t\t\t\tpreviousDistance = nextDistanceY;\n\n\t\t\t\tcurrentRow += stepRow;\n\t\t\t\tnextDistanceY += deltaDistanceY;\n\t\t\t}\n\t\t}\n\t}\n\n};\n\nfunction Entry(keys, obj, map) {\n\tthis.keys = keys;\n\tthis.map = map;\n\tthis.obj = obj;\n}\n\nEntry.prototype = {\n\tupdate: function (rect) {\n\t\t//check if buckets change\n\t\tif (HashMap.hash(HashMap.key(rect, keyHolder)) !== HashMap.hash(this.keys)) {\n\t\t\tthis.map.refresh(this);\n\t\t} else {\n\t\t\t//mark map coordinate boundaries as dirty\n\t\t\tthis.map.coordBoundsDirty = true;\n\t\t}\n        \n\t}\n};\n\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.HashMap = HashMap;\n_core_core__WEBPACK_IMPORTED_MODULE_0__.default.map = new HashMap();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HashMap);\n\n\n//# sourceURL=webpack://qrafty-v2/./src/spatial/spatial-grid.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/qrafty.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;